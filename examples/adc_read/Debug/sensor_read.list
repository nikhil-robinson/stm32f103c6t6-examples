
sensor_read.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003958  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000084  08003a64  08003a64  00013a64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003ae8  08003ae8  00020068  2**0
                  CONTENTS
  4 .ARM          00000000  08003ae8  08003ae8  00020068  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003ae8  08003ae8  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003ae8  08003ae8  00013ae8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003aec  08003aec  00013aec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08003af0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001e8  20000068  08003b58  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000250  08003b58  00020250  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020091  2**0
                  CONTENTS, READONLY
 13 .debug_info   00009d61  00000000  00000000  000200d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001d10  00000000  00000000  00029e35  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ba8  00000000  00000000  0002bb48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000008f0  00000000  00000000  0002c6f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00018807  00000000  00000000  0002cfe0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000d4ea  00000000  00000000  000457e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008c99a  00000000  00000000  00052cd1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003740  00000000  00000000  000df66c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000072  00000000  00000000  000e2dac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000068 	.word	0x20000068
 8000128:	00000000 	.word	0x00000000
 800012c:	08003a4c 	.word	0x08003a4c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000006c 	.word	0x2000006c
 8000148:	08003a4c 	.word	0x08003a4c

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000152:	f000 fb13 	bl	800077c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000156:	f000 f825 	bl	80001a4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800015a:	f000 f927 	bl	80003ac <MX_GPIO_Init>
  MX_ADC1_Init();
 800015e:	f000 f871 	bl	8000244 <MX_ADC1_Init>
  MX_TIM2_Init();
 8000162:	f000 f8ad 	bl	80002c0 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADCEx_Calibration_Start(&hadc1);
 8000166:	480d      	ldr	r0, [pc, #52]	; (800019c <main+0x50>)
 8000168:	f000 ffba 	bl	80010e0 <HAL_ADCEx_Calibration_Start>

  uint16_t AD_RES = 0;
 800016c:	2300      	movs	r3, #0
 800016e:	80fb      	strh	r3, [r7, #6]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  HAL_ADC_Start(&hadc1);
 8000170:	480a      	ldr	r0, [pc, #40]	; (800019c <main+0x50>)
 8000172:	f000 fc61 	bl	8000a38 <HAL_ADC_Start>
	  // Poll ADC1 Perihperal & TimeOut = 1mSec
	  HAL_ADC_PollForConversion(&hadc1, 1);
 8000176:	2101      	movs	r1, #1
 8000178:	4808      	ldr	r0, [pc, #32]	; (800019c <main+0x50>)
 800017a:	f000 fd0b 	bl	8000b94 <HAL_ADC_PollForConversion>

	  AD_RES = HAL_ADC_GetValue(&hadc1);
 800017e:	4807      	ldr	r0, [pc, #28]	; (800019c <main+0x50>)
 8000180:	f000 fe0e 	bl	8000da0 <HAL_ADC_GetValue>
 8000184:	4603      	mov	r3, r0
 8000186:	80fb      	strh	r3, [r7, #6]

	  printf("ADC VAL : %d \n",AD_RES);
 8000188:	88fb      	ldrh	r3, [r7, #6]
 800018a:	4619      	mov	r1, r3
 800018c:	4804      	ldr	r0, [pc, #16]	; (80001a0 <main+0x54>)
 800018e:	f002 fddf 	bl	8002d50 <iprintf>

	  HAL_Delay(1);
 8000192:	2001      	movs	r0, #1
 8000194:	f000 fb54 	bl	8000840 <HAL_Delay>
	  HAL_ADC_Start(&hadc1);
 8000198:	e7ea      	b.n	8000170 <main+0x24>
 800019a:	bf00      	nop
 800019c:	20000084 	.word	0x20000084
 80001a0:	08003a64 	.word	0x08003a64

080001a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001a4:	b580      	push	{r7, lr}
 80001a6:	b094      	sub	sp, #80	; 0x50
 80001a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001aa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80001ae:	2228      	movs	r2, #40	; 0x28
 80001b0:	2100      	movs	r1, #0
 80001b2:	4618      	mov	r0, r3
 80001b4:	f002 fe21 	bl	8002dfa <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001b8:	f107 0314 	add.w	r3, r7, #20
 80001bc:	2200      	movs	r2, #0
 80001be:	601a      	str	r2, [r3, #0]
 80001c0:	605a      	str	r2, [r3, #4]
 80001c2:	609a      	str	r2, [r3, #8]
 80001c4:	60da      	str	r2, [r3, #12]
 80001c6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80001c8:	1d3b      	adds	r3, r7, #4
 80001ca:	2200      	movs	r2, #0
 80001cc:	601a      	str	r2, [r3, #0]
 80001ce:	605a      	str	r2, [r3, #4]
 80001d0:	609a      	str	r2, [r3, #8]
 80001d2:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80001d4:	2302      	movs	r3, #2
 80001d6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001d8:	2301      	movs	r3, #1
 80001da:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80001dc:	2310      	movs	r3, #16
 80001de:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80001e0:	2300      	movs	r3, #0
 80001e2:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80001e4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80001e8:	4618      	mov	r0, r3
 80001ea:	f001 fa87 	bl	80016fc <HAL_RCC_OscConfig>
 80001ee:	4603      	mov	r3, r0
 80001f0:	2b00      	cmp	r3, #0
 80001f2:	d001      	beq.n	80001f8 <SystemClock_Config+0x54>
  {
    Error_Handler();
 80001f4:	f000 f910 	bl	8000418 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80001f8:	230f      	movs	r3, #15
 80001fa:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80001fc:	2300      	movs	r3, #0
 80001fe:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000200:	2300      	movs	r3, #0
 8000202:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000204:	2300      	movs	r3, #0
 8000206:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000208:	2300      	movs	r3, #0
 800020a:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800020c:	f107 0314 	add.w	r3, r7, #20
 8000210:	2100      	movs	r1, #0
 8000212:	4618      	mov	r0, r3
 8000214:	f001 fcf4 	bl	8001c00 <HAL_RCC_ClockConfig>
 8000218:	4603      	mov	r3, r0
 800021a:	2b00      	cmp	r3, #0
 800021c:	d001      	beq.n	8000222 <SystemClock_Config+0x7e>
  {
    Error_Handler();
 800021e:	f000 f8fb 	bl	8000418 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000222:	2302      	movs	r3, #2
 8000224:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 8000226:	2300      	movs	r3, #0
 8000228:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800022a:	1d3b      	adds	r3, r7, #4
 800022c:	4618      	mov	r0, r3
 800022e:	f001 fe61 	bl	8001ef4 <HAL_RCCEx_PeriphCLKConfig>
 8000232:	4603      	mov	r3, r0
 8000234:	2b00      	cmp	r3, #0
 8000236:	d001      	beq.n	800023c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000238:	f000 f8ee 	bl	8000418 <Error_Handler>
  }
}
 800023c:	bf00      	nop
 800023e:	3750      	adds	r7, #80	; 0x50
 8000240:	46bd      	mov	sp, r7
 8000242:	bd80      	pop	{r7, pc}

08000244 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000244:	b580      	push	{r7, lr}
 8000246:	b084      	sub	sp, #16
 8000248:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800024a:	1d3b      	adds	r3, r7, #4
 800024c:	2200      	movs	r2, #0
 800024e:	601a      	str	r2, [r3, #0]
 8000250:	605a      	str	r2, [r3, #4]
 8000252:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000254:	4b18      	ldr	r3, [pc, #96]	; (80002b8 <MX_ADC1_Init+0x74>)
 8000256:	4a19      	ldr	r2, [pc, #100]	; (80002bc <MX_ADC1_Init+0x78>)
 8000258:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800025a:	4b17      	ldr	r3, [pc, #92]	; (80002b8 <MX_ADC1_Init+0x74>)
 800025c:	2200      	movs	r2, #0
 800025e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000260:	4b15      	ldr	r3, [pc, #84]	; (80002b8 <MX_ADC1_Init+0x74>)
 8000262:	2200      	movs	r2, #0
 8000264:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000266:	4b14      	ldr	r3, [pc, #80]	; (80002b8 <MX_ADC1_Init+0x74>)
 8000268:	2200      	movs	r2, #0
 800026a:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800026c:	4b12      	ldr	r3, [pc, #72]	; (80002b8 <MX_ADC1_Init+0x74>)
 800026e:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000272:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000274:	4b10      	ldr	r3, [pc, #64]	; (80002b8 <MX_ADC1_Init+0x74>)
 8000276:	2200      	movs	r2, #0
 8000278:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 800027a:	4b0f      	ldr	r3, [pc, #60]	; (80002b8 <MX_ADC1_Init+0x74>)
 800027c:	2201      	movs	r2, #1
 800027e:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000280:	480d      	ldr	r0, [pc, #52]	; (80002b8 <MX_ADC1_Init+0x74>)
 8000282:	f000 fb01 	bl	8000888 <HAL_ADC_Init>
 8000286:	4603      	mov	r3, r0
 8000288:	2b00      	cmp	r3, #0
 800028a:	d001      	beq.n	8000290 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 800028c:	f000 f8c4 	bl	8000418 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8000290:	2307      	movs	r3, #7
 8000292:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000294:	2301      	movs	r3, #1
 8000296:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000298:	2300      	movs	r3, #0
 800029a:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800029c:	1d3b      	adds	r3, r7, #4
 800029e:	4619      	mov	r1, r3
 80002a0:	4805      	ldr	r0, [pc, #20]	; (80002b8 <MX_ADC1_Init+0x74>)
 80002a2:	f000 fd89 	bl	8000db8 <HAL_ADC_ConfigChannel>
 80002a6:	4603      	mov	r3, r0
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d001      	beq.n	80002b0 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 80002ac:	f000 f8b4 	bl	8000418 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80002b0:	bf00      	nop
 80002b2:	3710      	adds	r7, #16
 80002b4:	46bd      	mov	sp, r7
 80002b6:	bd80      	pop	{r7, pc}
 80002b8:	20000084 	.word	0x20000084
 80002bc:	40012400 	.word	0x40012400

080002c0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80002c0:	b580      	push	{r7, lr}
 80002c2:	b08e      	sub	sp, #56	; 0x38
 80002c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80002c6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80002ca:	2200      	movs	r2, #0
 80002cc:	601a      	str	r2, [r3, #0]
 80002ce:	605a      	str	r2, [r3, #4]
 80002d0:	609a      	str	r2, [r3, #8]
 80002d2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80002d4:	f107 0320 	add.w	r3, r7, #32
 80002d8:	2200      	movs	r2, #0
 80002da:	601a      	str	r2, [r3, #0]
 80002dc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80002de:	1d3b      	adds	r3, r7, #4
 80002e0:	2200      	movs	r2, #0
 80002e2:	601a      	str	r2, [r3, #0]
 80002e4:	605a      	str	r2, [r3, #4]
 80002e6:	609a      	str	r2, [r3, #8]
 80002e8:	60da      	str	r2, [r3, #12]
 80002ea:	611a      	str	r2, [r3, #16]
 80002ec:	615a      	str	r2, [r3, #20]
 80002ee:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80002f0:	4b2d      	ldr	r3, [pc, #180]	; (80003a8 <MX_TIM2_Init+0xe8>)
 80002f2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80002f6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80002f8:	4b2b      	ldr	r3, [pc, #172]	; (80003a8 <MX_TIM2_Init+0xe8>)
 80002fa:	2200      	movs	r2, #0
 80002fc:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80002fe:	4b2a      	ldr	r3, [pc, #168]	; (80003a8 <MX_TIM2_Init+0xe8>)
 8000300:	2200      	movs	r2, #0
 8000302:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8000304:	4b28      	ldr	r3, [pc, #160]	; (80003a8 <MX_TIM2_Init+0xe8>)
 8000306:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800030a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800030c:	4b26      	ldr	r3, [pc, #152]	; (80003a8 <MX_TIM2_Init+0xe8>)
 800030e:	2200      	movs	r2, #0
 8000310:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000312:	4b25      	ldr	r3, [pc, #148]	; (80003a8 <MX_TIM2_Init+0xe8>)
 8000314:	2280      	movs	r2, #128	; 0x80
 8000316:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000318:	4823      	ldr	r0, [pc, #140]	; (80003a8 <MX_TIM2_Init+0xe8>)
 800031a:	f001 ff57 	bl	80021cc <HAL_TIM_Base_Init>
 800031e:	4603      	mov	r3, r0
 8000320:	2b00      	cmp	r3, #0
 8000322:	d001      	beq.n	8000328 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8000324:	f000 f878 	bl	8000418 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000328:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800032c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800032e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000332:	4619      	mov	r1, r3
 8000334:	481c      	ldr	r0, [pc, #112]	; (80003a8 <MX_TIM2_Init+0xe8>)
 8000336:	f002 f8b3 	bl	80024a0 <HAL_TIM_ConfigClockSource>
 800033a:	4603      	mov	r3, r0
 800033c:	2b00      	cmp	r3, #0
 800033e:	d001      	beq.n	8000344 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8000340:	f000 f86a 	bl	8000418 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000344:	4818      	ldr	r0, [pc, #96]	; (80003a8 <MX_TIM2_Init+0xe8>)
 8000346:	f001 ff90 	bl	800226a <HAL_TIM_PWM_Init>
 800034a:	4603      	mov	r3, r0
 800034c:	2b00      	cmp	r3, #0
 800034e:	d001      	beq.n	8000354 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8000350:	f000 f862 	bl	8000418 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000354:	2300      	movs	r3, #0
 8000356:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000358:	2300      	movs	r3, #0
 800035a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800035c:	f107 0320 	add.w	r3, r7, #32
 8000360:	4619      	mov	r1, r3
 8000362:	4811      	ldr	r0, [pc, #68]	; (80003a8 <MX_TIM2_Init+0xe8>)
 8000364:	f002 fbda 	bl	8002b1c <HAL_TIMEx_MasterConfigSynchronization>
 8000368:	4603      	mov	r3, r0
 800036a:	2b00      	cmp	r3, #0
 800036c:	d001      	beq.n	8000372 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 800036e:	f000 f853 	bl	8000418 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000372:	2360      	movs	r3, #96	; 0x60
 8000374:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000376:	2300      	movs	r3, #0
 8000378:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800037a:	2300      	movs	r3, #0
 800037c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800037e:	2300      	movs	r3, #0
 8000380:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000382:	1d3b      	adds	r3, r7, #4
 8000384:	2200      	movs	r2, #0
 8000386:	4619      	mov	r1, r3
 8000388:	4807      	ldr	r0, [pc, #28]	; (80003a8 <MX_TIM2_Init+0xe8>)
 800038a:	f001 ffc7 	bl	800231c <HAL_TIM_PWM_ConfigChannel>
 800038e:	4603      	mov	r3, r0
 8000390:	2b00      	cmp	r3, #0
 8000392:	d001      	beq.n	8000398 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8000394:	f000 f840 	bl	8000418 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000398:	4803      	ldr	r0, [pc, #12]	; (80003a8 <MX_TIM2_Init+0xe8>)
 800039a:	f000 f8cd 	bl	8000538 <HAL_TIM_MspPostInit>

}
 800039e:	bf00      	nop
 80003a0:	3738      	adds	r7, #56	; 0x38
 80003a2:	46bd      	mov	sp, r7
 80003a4:	bd80      	pop	{r7, pc}
 80003a6:	bf00      	nop
 80003a8:	200000b4 	.word	0x200000b4

080003ac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80003ac:	b580      	push	{r7, lr}
 80003ae:	b086      	sub	sp, #24
 80003b0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003b2:	f107 0308 	add.w	r3, r7, #8
 80003b6:	2200      	movs	r2, #0
 80003b8:	601a      	str	r2, [r3, #0]
 80003ba:	605a      	str	r2, [r3, #4]
 80003bc:	609a      	str	r2, [r3, #8]
 80003be:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003c0:	4b13      	ldr	r3, [pc, #76]	; (8000410 <MX_GPIO_Init+0x64>)
 80003c2:	699b      	ldr	r3, [r3, #24]
 80003c4:	4a12      	ldr	r2, [pc, #72]	; (8000410 <MX_GPIO_Init+0x64>)
 80003c6:	f043 0304 	orr.w	r3, r3, #4
 80003ca:	6193      	str	r3, [r2, #24]
 80003cc:	4b10      	ldr	r3, [pc, #64]	; (8000410 <MX_GPIO_Init+0x64>)
 80003ce:	699b      	ldr	r3, [r3, #24]
 80003d0:	f003 0304 	and.w	r3, r3, #4
 80003d4:	607b      	str	r3, [r7, #4]
 80003d6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80003d8:	4b0d      	ldr	r3, [pc, #52]	; (8000410 <MX_GPIO_Init+0x64>)
 80003da:	699b      	ldr	r3, [r3, #24]
 80003dc:	4a0c      	ldr	r2, [pc, #48]	; (8000410 <MX_GPIO_Init+0x64>)
 80003de:	f043 0308 	orr.w	r3, r3, #8
 80003e2:	6193      	str	r3, [r2, #24]
 80003e4:	4b0a      	ldr	r3, [pc, #40]	; (8000410 <MX_GPIO_Init+0x64>)
 80003e6:	699b      	ldr	r3, [r3, #24]
 80003e8:	f003 0308 	and.w	r3, r3, #8
 80003ec:	603b      	str	r3, [r7, #0]
 80003ee:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 80003f0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80003f4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80003f6:	2303      	movs	r3, #3
 80003f8:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80003fa:	f107 0308 	add.w	r3, r7, #8
 80003fe:	4619      	mov	r1, r3
 8000400:	4804      	ldr	r0, [pc, #16]	; (8000414 <MX_GPIO_Init+0x68>)
 8000402:	f000 ffff 	bl	8001404 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000406:	bf00      	nop
 8000408:	3718      	adds	r7, #24
 800040a:	46bd      	mov	sp, r7
 800040c:	bd80      	pop	{r7, pc}
 800040e:	bf00      	nop
 8000410:	40021000 	.word	0x40021000
 8000414:	40010800 	.word	0x40010800

08000418 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000418:	b480      	push	{r7}
 800041a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800041c:	b672      	cpsid	i
}
 800041e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000420:	e7fe      	b.n	8000420 <Error_Handler+0x8>
	...

08000424 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000424:	b480      	push	{r7}
 8000426:	b085      	sub	sp, #20
 8000428:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800042a:	4b15      	ldr	r3, [pc, #84]	; (8000480 <HAL_MspInit+0x5c>)
 800042c:	699b      	ldr	r3, [r3, #24]
 800042e:	4a14      	ldr	r2, [pc, #80]	; (8000480 <HAL_MspInit+0x5c>)
 8000430:	f043 0301 	orr.w	r3, r3, #1
 8000434:	6193      	str	r3, [r2, #24]
 8000436:	4b12      	ldr	r3, [pc, #72]	; (8000480 <HAL_MspInit+0x5c>)
 8000438:	699b      	ldr	r3, [r3, #24]
 800043a:	f003 0301 	and.w	r3, r3, #1
 800043e:	60bb      	str	r3, [r7, #8]
 8000440:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000442:	4b0f      	ldr	r3, [pc, #60]	; (8000480 <HAL_MspInit+0x5c>)
 8000444:	69db      	ldr	r3, [r3, #28]
 8000446:	4a0e      	ldr	r2, [pc, #56]	; (8000480 <HAL_MspInit+0x5c>)
 8000448:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800044c:	61d3      	str	r3, [r2, #28]
 800044e:	4b0c      	ldr	r3, [pc, #48]	; (8000480 <HAL_MspInit+0x5c>)
 8000450:	69db      	ldr	r3, [r3, #28]
 8000452:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000456:	607b      	str	r3, [r7, #4]
 8000458:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800045a:	4b0a      	ldr	r3, [pc, #40]	; (8000484 <HAL_MspInit+0x60>)
 800045c:	685b      	ldr	r3, [r3, #4]
 800045e:	60fb      	str	r3, [r7, #12]
 8000460:	68fb      	ldr	r3, [r7, #12]
 8000462:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000466:	60fb      	str	r3, [r7, #12]
 8000468:	68fb      	ldr	r3, [r7, #12]
 800046a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800046e:	60fb      	str	r3, [r7, #12]
 8000470:	4a04      	ldr	r2, [pc, #16]	; (8000484 <HAL_MspInit+0x60>)
 8000472:	68fb      	ldr	r3, [r7, #12]
 8000474:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000476:	bf00      	nop
 8000478:	3714      	adds	r7, #20
 800047a:	46bd      	mov	sp, r7
 800047c:	bc80      	pop	{r7}
 800047e:	4770      	bx	lr
 8000480:	40021000 	.word	0x40021000
 8000484:	40010000 	.word	0x40010000

08000488 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000488:	b580      	push	{r7, lr}
 800048a:	b088      	sub	sp, #32
 800048c:	af00      	add	r7, sp, #0
 800048e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000490:	f107 0310 	add.w	r3, r7, #16
 8000494:	2200      	movs	r2, #0
 8000496:	601a      	str	r2, [r3, #0]
 8000498:	605a      	str	r2, [r3, #4]
 800049a:	609a      	str	r2, [r3, #8]
 800049c:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 800049e:	687b      	ldr	r3, [r7, #4]
 80004a0:	681b      	ldr	r3, [r3, #0]
 80004a2:	4a14      	ldr	r2, [pc, #80]	; (80004f4 <HAL_ADC_MspInit+0x6c>)
 80004a4:	4293      	cmp	r3, r2
 80004a6:	d121      	bne.n	80004ec <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80004a8:	4b13      	ldr	r3, [pc, #76]	; (80004f8 <HAL_ADC_MspInit+0x70>)
 80004aa:	699b      	ldr	r3, [r3, #24]
 80004ac:	4a12      	ldr	r2, [pc, #72]	; (80004f8 <HAL_ADC_MspInit+0x70>)
 80004ae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80004b2:	6193      	str	r3, [r2, #24]
 80004b4:	4b10      	ldr	r3, [pc, #64]	; (80004f8 <HAL_ADC_MspInit+0x70>)
 80004b6:	699b      	ldr	r3, [r3, #24]
 80004b8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80004bc:	60fb      	str	r3, [r7, #12]
 80004be:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80004c0:	4b0d      	ldr	r3, [pc, #52]	; (80004f8 <HAL_ADC_MspInit+0x70>)
 80004c2:	699b      	ldr	r3, [r3, #24]
 80004c4:	4a0c      	ldr	r2, [pc, #48]	; (80004f8 <HAL_ADC_MspInit+0x70>)
 80004c6:	f043 0304 	orr.w	r3, r3, #4
 80004ca:	6193      	str	r3, [r2, #24]
 80004cc:	4b0a      	ldr	r3, [pc, #40]	; (80004f8 <HAL_ADC_MspInit+0x70>)
 80004ce:	699b      	ldr	r3, [r3, #24]
 80004d0:	f003 0304 	and.w	r3, r3, #4
 80004d4:	60bb      	str	r3, [r7, #8]
 80004d6:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA7     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80004d8:	2380      	movs	r3, #128	; 0x80
 80004da:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80004dc:	2303      	movs	r3, #3
 80004de:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004e0:	f107 0310 	add.w	r3, r7, #16
 80004e4:	4619      	mov	r1, r3
 80004e6:	4805      	ldr	r0, [pc, #20]	; (80004fc <HAL_ADC_MspInit+0x74>)
 80004e8:	f000 ff8c 	bl	8001404 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80004ec:	bf00      	nop
 80004ee:	3720      	adds	r7, #32
 80004f0:	46bd      	mov	sp, r7
 80004f2:	bd80      	pop	{r7, pc}
 80004f4:	40012400 	.word	0x40012400
 80004f8:	40021000 	.word	0x40021000
 80004fc:	40010800 	.word	0x40010800

08000500 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000500:	b480      	push	{r7}
 8000502:	b085      	sub	sp, #20
 8000504:	af00      	add	r7, sp, #0
 8000506:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000508:	687b      	ldr	r3, [r7, #4]
 800050a:	681b      	ldr	r3, [r3, #0]
 800050c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000510:	d10b      	bne.n	800052a <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000512:	4b08      	ldr	r3, [pc, #32]	; (8000534 <HAL_TIM_Base_MspInit+0x34>)
 8000514:	69db      	ldr	r3, [r3, #28]
 8000516:	4a07      	ldr	r2, [pc, #28]	; (8000534 <HAL_TIM_Base_MspInit+0x34>)
 8000518:	f043 0301 	orr.w	r3, r3, #1
 800051c:	61d3      	str	r3, [r2, #28]
 800051e:	4b05      	ldr	r3, [pc, #20]	; (8000534 <HAL_TIM_Base_MspInit+0x34>)
 8000520:	69db      	ldr	r3, [r3, #28]
 8000522:	f003 0301 	and.w	r3, r3, #1
 8000526:	60fb      	str	r3, [r7, #12]
 8000528:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800052a:	bf00      	nop
 800052c:	3714      	adds	r7, #20
 800052e:	46bd      	mov	sp, r7
 8000530:	bc80      	pop	{r7}
 8000532:	4770      	bx	lr
 8000534:	40021000 	.word	0x40021000

08000538 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000538:	b580      	push	{r7, lr}
 800053a:	b088      	sub	sp, #32
 800053c:	af00      	add	r7, sp, #0
 800053e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000540:	f107 0310 	add.w	r3, r7, #16
 8000544:	2200      	movs	r2, #0
 8000546:	601a      	str	r2, [r3, #0]
 8000548:	605a      	str	r2, [r3, #4]
 800054a:	609a      	str	r2, [r3, #8]
 800054c:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 800054e:	687b      	ldr	r3, [r7, #4]
 8000550:	681b      	ldr	r3, [r3, #0]
 8000552:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000556:	d117      	bne.n	8000588 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000558:	4b0d      	ldr	r3, [pc, #52]	; (8000590 <HAL_TIM_MspPostInit+0x58>)
 800055a:	699b      	ldr	r3, [r3, #24]
 800055c:	4a0c      	ldr	r2, [pc, #48]	; (8000590 <HAL_TIM_MspPostInit+0x58>)
 800055e:	f043 0304 	orr.w	r3, r3, #4
 8000562:	6193      	str	r3, [r2, #24]
 8000564:	4b0a      	ldr	r3, [pc, #40]	; (8000590 <HAL_TIM_MspPostInit+0x58>)
 8000566:	699b      	ldr	r3, [r3, #24]
 8000568:	f003 0304 	and.w	r3, r3, #4
 800056c:	60fb      	str	r3, [r7, #12]
 800056e:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000570:	2301      	movs	r3, #1
 8000572:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000574:	2302      	movs	r3, #2
 8000576:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000578:	2302      	movs	r3, #2
 800057a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800057c:	f107 0310 	add.w	r3, r7, #16
 8000580:	4619      	mov	r1, r3
 8000582:	4804      	ldr	r0, [pc, #16]	; (8000594 <HAL_TIM_MspPostInit+0x5c>)
 8000584:	f000 ff3e 	bl	8001404 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000588:	bf00      	nop
 800058a:	3720      	adds	r7, #32
 800058c:	46bd      	mov	sp, r7
 800058e:	bd80      	pop	{r7, pc}
 8000590:	40021000 	.word	0x40021000
 8000594:	40010800 	.word	0x40010800

08000598 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000598:	b480      	push	{r7}
 800059a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800059c:	e7fe      	b.n	800059c <NMI_Handler+0x4>

0800059e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800059e:	b480      	push	{r7}
 80005a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80005a2:	e7fe      	b.n	80005a2 <HardFault_Handler+0x4>

080005a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80005a4:	b480      	push	{r7}
 80005a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80005a8:	e7fe      	b.n	80005a8 <MemManage_Handler+0x4>

080005aa <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80005aa:	b480      	push	{r7}
 80005ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80005ae:	e7fe      	b.n	80005ae <BusFault_Handler+0x4>

080005b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80005b0:	b480      	push	{r7}
 80005b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80005b4:	e7fe      	b.n	80005b4 <UsageFault_Handler+0x4>

080005b6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80005b6:	b480      	push	{r7}
 80005b8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80005ba:	bf00      	nop
 80005bc:	46bd      	mov	sp, r7
 80005be:	bc80      	pop	{r7}
 80005c0:	4770      	bx	lr

080005c2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80005c2:	b480      	push	{r7}
 80005c4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80005c6:	bf00      	nop
 80005c8:	46bd      	mov	sp, r7
 80005ca:	bc80      	pop	{r7}
 80005cc:	4770      	bx	lr

080005ce <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80005ce:	b480      	push	{r7}
 80005d0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80005d2:	bf00      	nop
 80005d4:	46bd      	mov	sp, r7
 80005d6:	bc80      	pop	{r7}
 80005d8:	4770      	bx	lr

080005da <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80005da:	b580      	push	{r7, lr}
 80005dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80005de:	f000 f913 	bl	8000808 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80005e2:	bf00      	nop
 80005e4:	bd80      	pop	{r7, pc}

080005e6 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80005e6:	b580      	push	{r7, lr}
 80005e8:	b086      	sub	sp, #24
 80005ea:	af00      	add	r7, sp, #0
 80005ec:	60f8      	str	r0, [r7, #12]
 80005ee:	60b9      	str	r1, [r7, #8]
 80005f0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80005f2:	2300      	movs	r3, #0
 80005f4:	617b      	str	r3, [r7, #20]
 80005f6:	e00a      	b.n	800060e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80005f8:	f3af 8000 	nop.w
 80005fc:	4601      	mov	r1, r0
 80005fe:	68bb      	ldr	r3, [r7, #8]
 8000600:	1c5a      	adds	r2, r3, #1
 8000602:	60ba      	str	r2, [r7, #8]
 8000604:	b2ca      	uxtb	r2, r1
 8000606:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000608:	697b      	ldr	r3, [r7, #20]
 800060a:	3301      	adds	r3, #1
 800060c:	617b      	str	r3, [r7, #20]
 800060e:	697a      	ldr	r2, [r7, #20]
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	429a      	cmp	r2, r3
 8000614:	dbf0      	blt.n	80005f8 <_read+0x12>
  }

  return len;
 8000616:	687b      	ldr	r3, [r7, #4]
}
 8000618:	4618      	mov	r0, r3
 800061a:	3718      	adds	r7, #24
 800061c:	46bd      	mov	sp, r7
 800061e:	bd80      	pop	{r7, pc}

08000620 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	b086      	sub	sp, #24
 8000624:	af00      	add	r7, sp, #0
 8000626:	60f8      	str	r0, [r7, #12]
 8000628:	60b9      	str	r1, [r7, #8]
 800062a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800062c:	2300      	movs	r3, #0
 800062e:	617b      	str	r3, [r7, #20]
 8000630:	e009      	b.n	8000646 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000632:	68bb      	ldr	r3, [r7, #8]
 8000634:	1c5a      	adds	r2, r3, #1
 8000636:	60ba      	str	r2, [r7, #8]
 8000638:	781b      	ldrb	r3, [r3, #0]
 800063a:	4618      	mov	r0, r3
 800063c:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000640:	697b      	ldr	r3, [r7, #20]
 8000642:	3301      	adds	r3, #1
 8000644:	617b      	str	r3, [r7, #20]
 8000646:	697a      	ldr	r2, [r7, #20]
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	429a      	cmp	r2, r3
 800064c:	dbf1      	blt.n	8000632 <_write+0x12>
  }
  return len;
 800064e:	687b      	ldr	r3, [r7, #4]
}
 8000650:	4618      	mov	r0, r3
 8000652:	3718      	adds	r7, #24
 8000654:	46bd      	mov	sp, r7
 8000656:	bd80      	pop	{r7, pc}

08000658 <_close>:

int _close(int file)
{
 8000658:	b480      	push	{r7}
 800065a:	b083      	sub	sp, #12
 800065c:	af00      	add	r7, sp, #0
 800065e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000660:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000664:	4618      	mov	r0, r3
 8000666:	370c      	adds	r7, #12
 8000668:	46bd      	mov	sp, r7
 800066a:	bc80      	pop	{r7}
 800066c:	4770      	bx	lr

0800066e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800066e:	b480      	push	{r7}
 8000670:	b083      	sub	sp, #12
 8000672:	af00      	add	r7, sp, #0
 8000674:	6078      	str	r0, [r7, #4]
 8000676:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000678:	683b      	ldr	r3, [r7, #0]
 800067a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800067e:	605a      	str	r2, [r3, #4]
  return 0;
 8000680:	2300      	movs	r3, #0
}
 8000682:	4618      	mov	r0, r3
 8000684:	370c      	adds	r7, #12
 8000686:	46bd      	mov	sp, r7
 8000688:	bc80      	pop	{r7}
 800068a:	4770      	bx	lr

0800068c <_isatty>:

int _isatty(int file)
{
 800068c:	b480      	push	{r7}
 800068e:	b083      	sub	sp, #12
 8000690:	af00      	add	r7, sp, #0
 8000692:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000694:	2301      	movs	r3, #1
}
 8000696:	4618      	mov	r0, r3
 8000698:	370c      	adds	r7, #12
 800069a:	46bd      	mov	sp, r7
 800069c:	bc80      	pop	{r7}
 800069e:	4770      	bx	lr

080006a0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80006a0:	b480      	push	{r7}
 80006a2:	b085      	sub	sp, #20
 80006a4:	af00      	add	r7, sp, #0
 80006a6:	60f8      	str	r0, [r7, #12]
 80006a8:	60b9      	str	r1, [r7, #8]
 80006aa:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80006ac:	2300      	movs	r3, #0
}
 80006ae:	4618      	mov	r0, r3
 80006b0:	3714      	adds	r7, #20
 80006b2:	46bd      	mov	sp, r7
 80006b4:	bc80      	pop	{r7}
 80006b6:	4770      	bx	lr

080006b8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b086      	sub	sp, #24
 80006bc:	af00      	add	r7, sp, #0
 80006be:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80006c0:	4a14      	ldr	r2, [pc, #80]	; (8000714 <_sbrk+0x5c>)
 80006c2:	4b15      	ldr	r3, [pc, #84]	; (8000718 <_sbrk+0x60>)
 80006c4:	1ad3      	subs	r3, r2, r3
 80006c6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80006c8:	697b      	ldr	r3, [r7, #20]
 80006ca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80006cc:	4b13      	ldr	r3, [pc, #76]	; (800071c <_sbrk+0x64>)
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	d102      	bne.n	80006da <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80006d4:	4b11      	ldr	r3, [pc, #68]	; (800071c <_sbrk+0x64>)
 80006d6:	4a12      	ldr	r2, [pc, #72]	; (8000720 <_sbrk+0x68>)
 80006d8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80006da:	4b10      	ldr	r3, [pc, #64]	; (800071c <_sbrk+0x64>)
 80006dc:	681a      	ldr	r2, [r3, #0]
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	4413      	add	r3, r2
 80006e2:	693a      	ldr	r2, [r7, #16]
 80006e4:	429a      	cmp	r2, r3
 80006e6:	d207      	bcs.n	80006f8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80006e8:	f002 fbd6 	bl	8002e98 <__errno>
 80006ec:	4603      	mov	r3, r0
 80006ee:	220c      	movs	r2, #12
 80006f0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80006f2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80006f6:	e009      	b.n	800070c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80006f8:	4b08      	ldr	r3, [pc, #32]	; (800071c <_sbrk+0x64>)
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80006fe:	4b07      	ldr	r3, [pc, #28]	; (800071c <_sbrk+0x64>)
 8000700:	681a      	ldr	r2, [r3, #0]
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	4413      	add	r3, r2
 8000706:	4a05      	ldr	r2, [pc, #20]	; (800071c <_sbrk+0x64>)
 8000708:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800070a:	68fb      	ldr	r3, [r7, #12]
}
 800070c:	4618      	mov	r0, r3
 800070e:	3718      	adds	r7, #24
 8000710:	46bd      	mov	sp, r7
 8000712:	bd80      	pop	{r7, pc}
 8000714:	20002800 	.word	0x20002800
 8000718:	00000400 	.word	0x00000400
 800071c:	200000fc 	.word	0x200000fc
 8000720:	20000250 	.word	0x20000250

08000724 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000724:	b480      	push	{r7}
 8000726:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000728:	bf00      	nop
 800072a:	46bd      	mov	sp, r7
 800072c:	bc80      	pop	{r7}
 800072e:	4770      	bx	lr

08000730 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000730:	f7ff fff8 	bl	8000724 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000734:	480b      	ldr	r0, [pc, #44]	; (8000764 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000736:	490c      	ldr	r1, [pc, #48]	; (8000768 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000738:	4a0c      	ldr	r2, [pc, #48]	; (800076c <LoopFillZerobss+0x16>)
  movs r3, #0
 800073a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800073c:	e002      	b.n	8000744 <LoopCopyDataInit>

0800073e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800073e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000740:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000742:	3304      	adds	r3, #4

08000744 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000744:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000746:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000748:	d3f9      	bcc.n	800073e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800074a:	4a09      	ldr	r2, [pc, #36]	; (8000770 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800074c:	4c09      	ldr	r4, [pc, #36]	; (8000774 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800074e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000750:	e001      	b.n	8000756 <LoopFillZerobss>

08000752 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000752:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000754:	3204      	adds	r2, #4

08000756 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000756:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000758:	d3fb      	bcc.n	8000752 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800075a:	f002 fba3 	bl	8002ea4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800075e:	f7ff fcf5 	bl	800014c <main>
  bx lr
 8000762:	4770      	bx	lr
  ldr r0, =_sdata
 8000764:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000768:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 800076c:	08003af0 	.word	0x08003af0
  ldr r2, =_sbss
 8000770:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000774:	20000250 	.word	0x20000250

08000778 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000778:	e7fe      	b.n	8000778 <ADC1_2_IRQHandler>
	...

0800077c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000780:	4b08      	ldr	r3, [pc, #32]	; (80007a4 <HAL_Init+0x28>)
 8000782:	681b      	ldr	r3, [r3, #0]
 8000784:	4a07      	ldr	r2, [pc, #28]	; (80007a4 <HAL_Init+0x28>)
 8000786:	f043 0310 	orr.w	r3, r3, #16
 800078a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800078c:	2003      	movs	r0, #3
 800078e:	f000 fe05 	bl	800139c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000792:	200f      	movs	r0, #15
 8000794:	f000 f808 	bl	80007a8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000798:	f7ff fe44 	bl	8000424 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800079c:	2300      	movs	r3, #0
}
 800079e:	4618      	mov	r0, r3
 80007a0:	bd80      	pop	{r7, pc}
 80007a2:	bf00      	nop
 80007a4:	40022000 	.word	0x40022000

080007a8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b082      	sub	sp, #8
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80007b0:	4b12      	ldr	r3, [pc, #72]	; (80007fc <HAL_InitTick+0x54>)
 80007b2:	681a      	ldr	r2, [r3, #0]
 80007b4:	4b12      	ldr	r3, [pc, #72]	; (8000800 <HAL_InitTick+0x58>)
 80007b6:	781b      	ldrb	r3, [r3, #0]
 80007b8:	4619      	mov	r1, r3
 80007ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007be:	fbb3 f3f1 	udiv	r3, r3, r1
 80007c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80007c6:	4618      	mov	r0, r3
 80007c8:	f000 fe0f 	bl	80013ea <HAL_SYSTICK_Config>
 80007cc:	4603      	mov	r3, r0
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	d001      	beq.n	80007d6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80007d2:	2301      	movs	r3, #1
 80007d4:	e00e      	b.n	80007f4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	2b0f      	cmp	r3, #15
 80007da:	d80a      	bhi.n	80007f2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80007dc:	2200      	movs	r2, #0
 80007de:	6879      	ldr	r1, [r7, #4]
 80007e0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80007e4:	f000 fde5 	bl	80013b2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80007e8:	4a06      	ldr	r2, [pc, #24]	; (8000804 <HAL_InitTick+0x5c>)
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80007ee:	2300      	movs	r3, #0
 80007f0:	e000      	b.n	80007f4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80007f2:	2301      	movs	r3, #1
}
 80007f4:	4618      	mov	r0, r3
 80007f6:	3708      	adds	r7, #8
 80007f8:	46bd      	mov	sp, r7
 80007fa:	bd80      	pop	{r7, pc}
 80007fc:	20000000 	.word	0x20000000
 8000800:	20000008 	.word	0x20000008
 8000804:	20000004 	.word	0x20000004

08000808 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000808:	b480      	push	{r7}
 800080a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800080c:	4b05      	ldr	r3, [pc, #20]	; (8000824 <HAL_IncTick+0x1c>)
 800080e:	781b      	ldrb	r3, [r3, #0]
 8000810:	461a      	mov	r2, r3
 8000812:	4b05      	ldr	r3, [pc, #20]	; (8000828 <HAL_IncTick+0x20>)
 8000814:	681b      	ldr	r3, [r3, #0]
 8000816:	4413      	add	r3, r2
 8000818:	4a03      	ldr	r2, [pc, #12]	; (8000828 <HAL_IncTick+0x20>)
 800081a:	6013      	str	r3, [r2, #0]
}
 800081c:	bf00      	nop
 800081e:	46bd      	mov	sp, r7
 8000820:	bc80      	pop	{r7}
 8000822:	4770      	bx	lr
 8000824:	20000008 	.word	0x20000008
 8000828:	20000100 	.word	0x20000100

0800082c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800082c:	b480      	push	{r7}
 800082e:	af00      	add	r7, sp, #0
  return uwTick;
 8000830:	4b02      	ldr	r3, [pc, #8]	; (800083c <HAL_GetTick+0x10>)
 8000832:	681b      	ldr	r3, [r3, #0]
}
 8000834:	4618      	mov	r0, r3
 8000836:	46bd      	mov	sp, r7
 8000838:	bc80      	pop	{r7}
 800083a:	4770      	bx	lr
 800083c:	20000100 	.word	0x20000100

08000840 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	b084      	sub	sp, #16
 8000844:	af00      	add	r7, sp, #0
 8000846:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000848:	f7ff fff0 	bl	800082c <HAL_GetTick>
 800084c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000852:	68fb      	ldr	r3, [r7, #12]
 8000854:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000858:	d005      	beq.n	8000866 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800085a:	4b0a      	ldr	r3, [pc, #40]	; (8000884 <HAL_Delay+0x44>)
 800085c:	781b      	ldrb	r3, [r3, #0]
 800085e:	461a      	mov	r2, r3
 8000860:	68fb      	ldr	r3, [r7, #12]
 8000862:	4413      	add	r3, r2
 8000864:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000866:	bf00      	nop
 8000868:	f7ff ffe0 	bl	800082c <HAL_GetTick>
 800086c:	4602      	mov	r2, r0
 800086e:	68bb      	ldr	r3, [r7, #8]
 8000870:	1ad3      	subs	r3, r2, r3
 8000872:	68fa      	ldr	r2, [r7, #12]
 8000874:	429a      	cmp	r2, r3
 8000876:	d8f7      	bhi.n	8000868 <HAL_Delay+0x28>
  {
  }
}
 8000878:	bf00      	nop
 800087a:	bf00      	nop
 800087c:	3710      	adds	r7, #16
 800087e:	46bd      	mov	sp, r7
 8000880:	bd80      	pop	{r7, pc}
 8000882:	bf00      	nop
 8000884:	20000008 	.word	0x20000008

08000888 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	b086      	sub	sp, #24
 800088c:	af00      	add	r7, sp, #0
 800088e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000890:	2300      	movs	r3, #0
 8000892:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8000894:	2300      	movs	r3, #0
 8000896:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8000898:	2300      	movs	r3, #0
 800089a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 800089c:	2300      	movs	r3, #0
 800089e:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	d101      	bne.n	80008aa <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80008a6:	2301      	movs	r3, #1
 80008a8:	e0be      	b.n	8000a28 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	689b      	ldr	r3, [r3, #8]
 80008ae:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	d109      	bne.n	80008cc <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	2200      	movs	r2, #0
 80008bc:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	2200      	movs	r2, #0
 80008c2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80008c6:	6878      	ldr	r0, [r7, #4]
 80008c8:	f7ff fdde 	bl	8000488 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80008cc:	6878      	ldr	r0, [r7, #4]
 80008ce:	f000 fbc5 	bl	800105c <ADC_ConversionStop_Disable>
 80008d2:	4603      	mov	r3, r0
 80008d4:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80008da:	f003 0310 	and.w	r3, r3, #16
 80008de:	2b00      	cmp	r3, #0
 80008e0:	f040 8099 	bne.w	8000a16 <HAL_ADC_Init+0x18e>
 80008e4:	7dfb      	ldrb	r3, [r7, #23]
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	f040 8095 	bne.w	8000a16 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80008f0:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80008f4:	f023 0302 	bic.w	r3, r3, #2
 80008f8:	f043 0202 	orr.w	r2, r3, #2
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000908:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	7b1b      	ldrb	r3, [r3, #12]
 800090e:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000910:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000912:	68ba      	ldr	r2, [r7, #8]
 8000914:	4313      	orrs	r3, r2
 8000916:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	689b      	ldr	r3, [r3, #8]
 800091c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000920:	d003      	beq.n	800092a <HAL_ADC_Init+0xa2>
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	689b      	ldr	r3, [r3, #8]
 8000926:	2b01      	cmp	r3, #1
 8000928:	d102      	bne.n	8000930 <HAL_ADC_Init+0xa8>
 800092a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800092e:	e000      	b.n	8000932 <HAL_ADC_Init+0xaa>
 8000930:	2300      	movs	r3, #0
 8000932:	693a      	ldr	r2, [r7, #16]
 8000934:	4313      	orrs	r3, r2
 8000936:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	7d1b      	ldrb	r3, [r3, #20]
 800093c:	2b01      	cmp	r3, #1
 800093e:	d119      	bne.n	8000974 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	7b1b      	ldrb	r3, [r3, #12]
 8000944:	2b00      	cmp	r3, #0
 8000946:	d109      	bne.n	800095c <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	699b      	ldr	r3, [r3, #24]
 800094c:	3b01      	subs	r3, #1
 800094e:	035a      	lsls	r2, r3, #13
 8000950:	693b      	ldr	r3, [r7, #16]
 8000952:	4313      	orrs	r3, r2
 8000954:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000958:	613b      	str	r3, [r7, #16]
 800095a:	e00b      	b.n	8000974 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000960:	f043 0220 	orr.w	r2, r3, #32
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800096c:	f043 0201 	orr.w	r2, r3, #1
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	685b      	ldr	r3, [r3, #4]
 800097a:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	681b      	ldr	r3, [r3, #0]
 8000982:	693a      	ldr	r2, [r7, #16]
 8000984:	430a      	orrs	r2, r1
 8000986:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	689a      	ldr	r2, [r3, #8]
 800098e:	4b28      	ldr	r3, [pc, #160]	; (8000a30 <HAL_ADC_Init+0x1a8>)
 8000990:	4013      	ands	r3, r2
 8000992:	687a      	ldr	r2, [r7, #4]
 8000994:	6812      	ldr	r2, [r2, #0]
 8000996:	68b9      	ldr	r1, [r7, #8]
 8000998:	430b      	orrs	r3, r1
 800099a:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	689b      	ldr	r3, [r3, #8]
 80009a0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80009a4:	d003      	beq.n	80009ae <HAL_ADC_Init+0x126>
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	689b      	ldr	r3, [r3, #8]
 80009aa:	2b01      	cmp	r3, #1
 80009ac:	d104      	bne.n	80009b8 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	691b      	ldr	r3, [r3, #16]
 80009b2:	3b01      	subs	r3, #1
 80009b4:	051b      	lsls	r3, r3, #20
 80009b6:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80009be:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	681b      	ldr	r3, [r3, #0]
 80009c6:	68fa      	ldr	r2, [r7, #12]
 80009c8:	430a      	orrs	r2, r1
 80009ca:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	681b      	ldr	r3, [r3, #0]
 80009d0:	689a      	ldr	r2, [r3, #8]
 80009d2:	4b18      	ldr	r3, [pc, #96]	; (8000a34 <HAL_ADC_Init+0x1ac>)
 80009d4:	4013      	ands	r3, r2
 80009d6:	68ba      	ldr	r2, [r7, #8]
 80009d8:	429a      	cmp	r2, r3
 80009da:	d10b      	bne.n	80009f4 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	2200      	movs	r2, #0
 80009e0:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80009e6:	f023 0303 	bic.w	r3, r3, #3
 80009ea:	f043 0201 	orr.w	r2, r3, #1
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80009f2:	e018      	b.n	8000a26 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80009f8:	f023 0312 	bic.w	r3, r3, #18
 80009fc:	f043 0210 	orr.w	r2, r3, #16
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a08:	f043 0201 	orr.w	r2, r3, #1
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8000a10:	2301      	movs	r3, #1
 8000a12:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000a14:	e007      	b.n	8000a26 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a1a:	f043 0210 	orr.w	r2, r3, #16
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8000a22:	2301      	movs	r3, #1
 8000a24:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000a26:	7dfb      	ldrb	r3, [r7, #23]
}
 8000a28:	4618      	mov	r0, r3
 8000a2a:	3718      	adds	r7, #24
 8000a2c:	46bd      	mov	sp, r7
 8000a2e:	bd80      	pop	{r7, pc}
 8000a30:	ffe1f7fd 	.word	0xffe1f7fd
 8000a34:	ff1f0efe 	.word	0xff1f0efe

08000a38 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b084      	sub	sp, #16
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000a40:	2300      	movs	r3, #0
 8000a42:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000a4a:	2b01      	cmp	r3, #1
 8000a4c:	d101      	bne.n	8000a52 <HAL_ADC_Start+0x1a>
 8000a4e:	2302      	movs	r3, #2
 8000a50:	e098      	b.n	8000b84 <HAL_ADC_Start+0x14c>
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	2201      	movs	r2, #1
 8000a56:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8000a5a:	6878      	ldr	r0, [r7, #4]
 8000a5c:	f000 faa4 	bl	8000fa8 <ADC_Enable>
 8000a60:	4603      	mov	r3, r0
 8000a62:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8000a64:	7bfb      	ldrb	r3, [r7, #15]
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	f040 8087 	bne.w	8000b7a <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a70:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000a74:	f023 0301 	bic.w	r3, r3, #1
 8000a78:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	4a41      	ldr	r2, [pc, #260]	; (8000b8c <HAL_ADC_Start+0x154>)
 8000a86:	4293      	cmp	r3, r2
 8000a88:	d105      	bne.n	8000a96 <HAL_ADC_Start+0x5e>
 8000a8a:	4b41      	ldr	r3, [pc, #260]	; (8000b90 <HAL_ADC_Start+0x158>)
 8000a8c:	685b      	ldr	r3, [r3, #4]
 8000a8e:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	d115      	bne.n	8000ac2 <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a9a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	681b      	ldr	r3, [r3, #0]
 8000aa6:	685b      	ldr	r3, [r3, #4]
 8000aa8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d026      	beq.n	8000afe <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ab4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000ab8:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000ac0:	e01d      	b.n	8000afe <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ac6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	4a2f      	ldr	r2, [pc, #188]	; (8000b90 <HAL_ADC_Start+0x158>)
 8000ad4:	4293      	cmp	r3, r2
 8000ad6:	d004      	beq.n	8000ae2 <HAL_ADC_Start+0xaa>
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	4a2b      	ldr	r2, [pc, #172]	; (8000b8c <HAL_ADC_Start+0x154>)
 8000ade:	4293      	cmp	r3, r2
 8000ae0:	d10d      	bne.n	8000afe <HAL_ADC_Start+0xc6>
 8000ae2:	4b2b      	ldr	r3, [pc, #172]	; (8000b90 <HAL_ADC_Start+0x158>)
 8000ae4:	685b      	ldr	r3, [r3, #4]
 8000ae6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d007      	beq.n	8000afe <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000af2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000af6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b02:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d006      	beq.n	8000b18 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b0e:	f023 0206 	bic.w	r2, r3, #6
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	62da      	str	r2, [r3, #44]	; 0x2c
 8000b16:	e002      	b.n	8000b1e <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	2200      	movs	r2, #0
 8000b22:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	681b      	ldr	r3, [r3, #0]
 8000b2a:	f06f 0202 	mvn.w	r2, #2
 8000b2e:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	689b      	ldr	r3, [r3, #8]
 8000b36:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8000b3a:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8000b3e:	d113      	bne.n	8000b68 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000b44:	4a11      	ldr	r2, [pc, #68]	; (8000b8c <HAL_ADC_Start+0x154>)
 8000b46:	4293      	cmp	r3, r2
 8000b48:	d105      	bne.n	8000b56 <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8000b4a:	4b11      	ldr	r3, [pc, #68]	; (8000b90 <HAL_ADC_Start+0x158>)
 8000b4c:	685b      	ldr	r3, [r3, #4]
 8000b4e:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d108      	bne.n	8000b68 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	681b      	ldr	r3, [r3, #0]
 8000b5a:	689a      	ldr	r2, [r3, #8]
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8000b64:	609a      	str	r2, [r3, #8]
 8000b66:	e00c      	b.n	8000b82 <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	689a      	ldr	r2, [r3, #8]
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	681b      	ldr	r3, [r3, #0]
 8000b72:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8000b76:	609a      	str	r2, [r3, #8]
 8000b78:	e003      	b.n	8000b82 <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8000b82:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b84:	4618      	mov	r0, r3
 8000b86:	3710      	adds	r7, #16
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	bd80      	pop	{r7, pc}
 8000b8c:	40012800 	.word	0x40012800
 8000b90:	40012400 	.word	0x40012400

08000b94 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8000b94:	b590      	push	{r4, r7, lr}
 8000b96:	b087      	sub	sp, #28
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	6078      	str	r0, [r7, #4]
 8000b9c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8000baa:	f7ff fe3f 	bl	800082c <HAL_GetTick>
 8000bae:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	689b      	ldr	r3, [r3, #8]
 8000bb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d00b      	beq.n	8000bd6 <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000bc2:	f043 0220 	orr.w	r2, r3, #32
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	2200      	movs	r2, #0
 8000bce:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 8000bd2:	2301      	movs	r3, #1
 8000bd4:	e0d3      	b.n	8000d7e <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	681b      	ldr	r3, [r3, #0]
 8000bda:	685b      	ldr	r3, [r3, #4]
 8000bdc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d131      	bne.n	8000c48 <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000bea:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d12a      	bne.n	8000c48 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8000bf2:	e021      	b.n	8000c38 <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8000bf4:	683b      	ldr	r3, [r7, #0]
 8000bf6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000bfa:	d01d      	beq.n	8000c38 <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8000bfc:	683b      	ldr	r3, [r7, #0]
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d007      	beq.n	8000c12 <HAL_ADC_PollForConversion+0x7e>
 8000c02:	f7ff fe13 	bl	800082c <HAL_GetTick>
 8000c06:	4602      	mov	r2, r0
 8000c08:	697b      	ldr	r3, [r7, #20]
 8000c0a:	1ad3      	subs	r3, r2, r3
 8000c0c:	683a      	ldr	r2, [r7, #0]
 8000c0e:	429a      	cmp	r2, r3
 8000c10:	d212      	bcs.n	8000c38 <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	f003 0302 	and.w	r3, r3, #2
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d10b      	bne.n	8000c38 <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c24:	f043 0204 	orr.w	r2, r3, #4
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	629a      	str	r2, [r3, #40]	; 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	2200      	movs	r2, #0
 8000c30:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
            
            return HAL_TIMEOUT;
 8000c34:	2303      	movs	r3, #3
 8000c36:	e0a2      	b.n	8000d7e <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	f003 0302 	and.w	r3, r3, #2
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d0d6      	beq.n	8000bf4 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8000c46:	e070      	b.n	8000d2a <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8000c48:	4b4f      	ldr	r3, [pc, #316]	; (8000d88 <HAL_ADC_PollForConversion+0x1f4>)
 8000c4a:	681c      	ldr	r4, [r3, #0]
 8000c4c:	2002      	movs	r0, #2
 8000c4e:	f001 fa07 	bl	8002060 <HAL_RCCEx_GetPeriphCLKFreq>
 8000c52:	4603      	mov	r3, r0
 8000c54:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	6919      	ldr	r1, [r3, #16]
 8000c5e:	4b4b      	ldr	r3, [pc, #300]	; (8000d8c <HAL_ADC_PollForConversion+0x1f8>)
 8000c60:	400b      	ands	r3, r1
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d118      	bne.n	8000c98 <HAL_ADC_PollForConversion+0x104>
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	68d9      	ldr	r1, [r3, #12]
 8000c6c:	4b48      	ldr	r3, [pc, #288]	; (8000d90 <HAL_ADC_PollForConversion+0x1fc>)
 8000c6e:	400b      	ands	r3, r1
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d111      	bne.n	8000c98 <HAL_ADC_PollForConversion+0x104>
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	6919      	ldr	r1, [r3, #16]
 8000c7a:	4b46      	ldr	r3, [pc, #280]	; (8000d94 <HAL_ADC_PollForConversion+0x200>)
 8000c7c:	400b      	ands	r3, r1
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d108      	bne.n	8000c94 <HAL_ADC_PollForConversion+0x100>
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	68d9      	ldr	r1, [r3, #12]
 8000c88:	4b43      	ldr	r3, [pc, #268]	; (8000d98 <HAL_ADC_PollForConversion+0x204>)
 8000c8a:	400b      	ands	r3, r1
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d101      	bne.n	8000c94 <HAL_ADC_PollForConversion+0x100>
 8000c90:	2314      	movs	r3, #20
 8000c92:	e020      	b.n	8000cd6 <HAL_ADC_PollForConversion+0x142>
 8000c94:	2329      	movs	r3, #41	; 0x29
 8000c96:	e01e      	b.n	8000cd6 <HAL_ADC_PollForConversion+0x142>
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	6919      	ldr	r1, [r3, #16]
 8000c9e:	4b3d      	ldr	r3, [pc, #244]	; (8000d94 <HAL_ADC_PollForConversion+0x200>)
 8000ca0:	400b      	ands	r3, r1
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d106      	bne.n	8000cb4 <HAL_ADC_PollForConversion+0x120>
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	68d9      	ldr	r1, [r3, #12]
 8000cac:	4b3a      	ldr	r3, [pc, #232]	; (8000d98 <HAL_ADC_PollForConversion+0x204>)
 8000cae:	400b      	ands	r3, r1
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d00d      	beq.n	8000cd0 <HAL_ADC_PollForConversion+0x13c>
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	6919      	ldr	r1, [r3, #16]
 8000cba:	4b38      	ldr	r3, [pc, #224]	; (8000d9c <HAL_ADC_PollForConversion+0x208>)
 8000cbc:	400b      	ands	r3, r1
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d108      	bne.n	8000cd4 <HAL_ADC_PollForConversion+0x140>
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	68d9      	ldr	r1, [r3, #12]
 8000cc8:	4b34      	ldr	r3, [pc, #208]	; (8000d9c <HAL_ADC_PollForConversion+0x208>)
 8000cca:	400b      	ands	r3, r1
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d101      	bne.n	8000cd4 <HAL_ADC_PollForConversion+0x140>
 8000cd0:	2354      	movs	r3, #84	; 0x54
 8000cd2:	e000      	b.n	8000cd6 <HAL_ADC_PollForConversion+0x142>
 8000cd4:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8000cd6:	fb02 f303 	mul.w	r3, r2, r3
 8000cda:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8000cdc:	e021      	b.n	8000d22 <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8000cde:	683b      	ldr	r3, [r7, #0]
 8000ce0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000ce4:	d01a      	beq.n	8000d1c <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8000ce6:	683b      	ldr	r3, [r7, #0]
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d007      	beq.n	8000cfc <HAL_ADC_PollForConversion+0x168>
 8000cec:	f7ff fd9e 	bl	800082c <HAL_GetTick>
 8000cf0:	4602      	mov	r2, r0
 8000cf2:	697b      	ldr	r3, [r7, #20]
 8000cf4:	1ad3      	subs	r3, r2, r3
 8000cf6:	683a      	ldr	r2, [r7, #0]
 8000cf8:	429a      	cmp	r2, r3
 8000cfa:	d20f      	bcs.n	8000d1c <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8000cfc:	68fb      	ldr	r3, [r7, #12]
 8000cfe:	693a      	ldr	r2, [r7, #16]
 8000d00:	429a      	cmp	r2, r3
 8000d02:	d90b      	bls.n	8000d1c <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d08:	f043 0204 	orr.w	r2, r3, #4
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	629a      	str	r2, [r3, #40]	; 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	2200      	movs	r2, #0
 8000d14:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

            return HAL_TIMEOUT;
 8000d18:	2303      	movs	r3, #3
 8000d1a:	e030      	b.n	8000d7e <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8000d1c:	68fb      	ldr	r3, [r7, #12]
 8000d1e:	3301      	adds	r3, #1
 8000d20:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8000d22:	68fb      	ldr	r3, [r7, #12]
 8000d24:	693a      	ldr	r2, [r7, #16]
 8000d26:	429a      	cmp	r2, r3
 8000d28:	d8d9      	bhi.n	8000cde <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	f06f 0212 	mvn.w	r2, #18
 8000d32:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d38:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	689b      	ldr	r3, [r3, #8]
 8000d46:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8000d4a:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8000d4e:	d115      	bne.n	8000d7c <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d111      	bne.n	8000d7c <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d5c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d68:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d105      	bne.n	8000d7c <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d74:	f043 0201 	orr.w	r2, r3, #1
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8000d7c:	2300      	movs	r3, #0
}
 8000d7e:	4618      	mov	r0, r3
 8000d80:	371c      	adds	r7, #28
 8000d82:	46bd      	mov	sp, r7
 8000d84:	bd90      	pop	{r4, r7, pc}
 8000d86:	bf00      	nop
 8000d88:	20000000 	.word	0x20000000
 8000d8c:	24924924 	.word	0x24924924
 8000d90:	00924924 	.word	0x00924924
 8000d94:	12492492 	.word	0x12492492
 8000d98:	00492492 	.word	0x00492492
 8000d9c:	00249249 	.word	0x00249249

08000da0 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8000da0:	b480      	push	{r7}
 8000da2:	b083      	sub	sp, #12
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8000dae:	4618      	mov	r0, r3
 8000db0:	370c      	adds	r7, #12
 8000db2:	46bd      	mov	sp, r7
 8000db4:	bc80      	pop	{r7}
 8000db6:	4770      	bx	lr

08000db8 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8000db8:	b480      	push	{r7}
 8000dba:	b085      	sub	sp, #20
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]
 8000dc0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000dd0:	2b01      	cmp	r3, #1
 8000dd2:	d101      	bne.n	8000dd8 <HAL_ADC_ConfigChannel+0x20>
 8000dd4:	2302      	movs	r3, #2
 8000dd6:	e0dc      	b.n	8000f92 <HAL_ADC_ConfigChannel+0x1da>
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	2201      	movs	r2, #1
 8000ddc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8000de0:	683b      	ldr	r3, [r7, #0]
 8000de2:	685b      	ldr	r3, [r3, #4]
 8000de4:	2b06      	cmp	r3, #6
 8000de6:	d81c      	bhi.n	8000e22 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000dee:	683b      	ldr	r3, [r7, #0]
 8000df0:	685a      	ldr	r2, [r3, #4]
 8000df2:	4613      	mov	r3, r2
 8000df4:	009b      	lsls	r3, r3, #2
 8000df6:	4413      	add	r3, r2
 8000df8:	3b05      	subs	r3, #5
 8000dfa:	221f      	movs	r2, #31
 8000dfc:	fa02 f303 	lsl.w	r3, r2, r3
 8000e00:	43db      	mvns	r3, r3
 8000e02:	4019      	ands	r1, r3
 8000e04:	683b      	ldr	r3, [r7, #0]
 8000e06:	6818      	ldr	r0, [r3, #0]
 8000e08:	683b      	ldr	r3, [r7, #0]
 8000e0a:	685a      	ldr	r2, [r3, #4]
 8000e0c:	4613      	mov	r3, r2
 8000e0e:	009b      	lsls	r3, r3, #2
 8000e10:	4413      	add	r3, r2
 8000e12:	3b05      	subs	r3, #5
 8000e14:	fa00 f203 	lsl.w	r2, r0, r3
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	430a      	orrs	r2, r1
 8000e1e:	635a      	str	r2, [r3, #52]	; 0x34
 8000e20:	e03c      	b.n	8000e9c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8000e22:	683b      	ldr	r3, [r7, #0]
 8000e24:	685b      	ldr	r3, [r3, #4]
 8000e26:	2b0c      	cmp	r3, #12
 8000e28:	d81c      	bhi.n	8000e64 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000e30:	683b      	ldr	r3, [r7, #0]
 8000e32:	685a      	ldr	r2, [r3, #4]
 8000e34:	4613      	mov	r3, r2
 8000e36:	009b      	lsls	r3, r3, #2
 8000e38:	4413      	add	r3, r2
 8000e3a:	3b23      	subs	r3, #35	; 0x23
 8000e3c:	221f      	movs	r2, #31
 8000e3e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e42:	43db      	mvns	r3, r3
 8000e44:	4019      	ands	r1, r3
 8000e46:	683b      	ldr	r3, [r7, #0]
 8000e48:	6818      	ldr	r0, [r3, #0]
 8000e4a:	683b      	ldr	r3, [r7, #0]
 8000e4c:	685a      	ldr	r2, [r3, #4]
 8000e4e:	4613      	mov	r3, r2
 8000e50:	009b      	lsls	r3, r3, #2
 8000e52:	4413      	add	r3, r2
 8000e54:	3b23      	subs	r3, #35	; 0x23
 8000e56:	fa00 f203 	lsl.w	r2, r0, r3
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	430a      	orrs	r2, r1
 8000e60:	631a      	str	r2, [r3, #48]	; 0x30
 8000e62:	e01b      	b.n	8000e9c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000e6a:	683b      	ldr	r3, [r7, #0]
 8000e6c:	685a      	ldr	r2, [r3, #4]
 8000e6e:	4613      	mov	r3, r2
 8000e70:	009b      	lsls	r3, r3, #2
 8000e72:	4413      	add	r3, r2
 8000e74:	3b41      	subs	r3, #65	; 0x41
 8000e76:	221f      	movs	r2, #31
 8000e78:	fa02 f303 	lsl.w	r3, r2, r3
 8000e7c:	43db      	mvns	r3, r3
 8000e7e:	4019      	ands	r1, r3
 8000e80:	683b      	ldr	r3, [r7, #0]
 8000e82:	6818      	ldr	r0, [r3, #0]
 8000e84:	683b      	ldr	r3, [r7, #0]
 8000e86:	685a      	ldr	r2, [r3, #4]
 8000e88:	4613      	mov	r3, r2
 8000e8a:	009b      	lsls	r3, r3, #2
 8000e8c:	4413      	add	r3, r2
 8000e8e:	3b41      	subs	r3, #65	; 0x41
 8000e90:	fa00 f203 	lsl.w	r2, r0, r3
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	430a      	orrs	r2, r1
 8000e9a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8000e9c:	683b      	ldr	r3, [r7, #0]
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	2b09      	cmp	r3, #9
 8000ea2:	d91c      	bls.n	8000ede <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	68d9      	ldr	r1, [r3, #12]
 8000eaa:	683b      	ldr	r3, [r7, #0]
 8000eac:	681a      	ldr	r2, [r3, #0]
 8000eae:	4613      	mov	r3, r2
 8000eb0:	005b      	lsls	r3, r3, #1
 8000eb2:	4413      	add	r3, r2
 8000eb4:	3b1e      	subs	r3, #30
 8000eb6:	2207      	movs	r2, #7
 8000eb8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ebc:	43db      	mvns	r3, r3
 8000ebe:	4019      	ands	r1, r3
 8000ec0:	683b      	ldr	r3, [r7, #0]
 8000ec2:	6898      	ldr	r0, [r3, #8]
 8000ec4:	683b      	ldr	r3, [r7, #0]
 8000ec6:	681a      	ldr	r2, [r3, #0]
 8000ec8:	4613      	mov	r3, r2
 8000eca:	005b      	lsls	r3, r3, #1
 8000ecc:	4413      	add	r3, r2
 8000ece:	3b1e      	subs	r3, #30
 8000ed0:	fa00 f203 	lsl.w	r2, r0, r3
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	430a      	orrs	r2, r1
 8000eda:	60da      	str	r2, [r3, #12]
 8000edc:	e019      	b.n	8000f12 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	6919      	ldr	r1, [r3, #16]
 8000ee4:	683b      	ldr	r3, [r7, #0]
 8000ee6:	681a      	ldr	r2, [r3, #0]
 8000ee8:	4613      	mov	r3, r2
 8000eea:	005b      	lsls	r3, r3, #1
 8000eec:	4413      	add	r3, r2
 8000eee:	2207      	movs	r2, #7
 8000ef0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef4:	43db      	mvns	r3, r3
 8000ef6:	4019      	ands	r1, r3
 8000ef8:	683b      	ldr	r3, [r7, #0]
 8000efa:	6898      	ldr	r0, [r3, #8]
 8000efc:	683b      	ldr	r3, [r7, #0]
 8000efe:	681a      	ldr	r2, [r3, #0]
 8000f00:	4613      	mov	r3, r2
 8000f02:	005b      	lsls	r3, r3, #1
 8000f04:	4413      	add	r3, r2
 8000f06:	fa00 f203 	lsl.w	r2, r0, r3
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	430a      	orrs	r2, r1
 8000f10:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000f12:	683b      	ldr	r3, [r7, #0]
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	2b10      	cmp	r3, #16
 8000f18:	d003      	beq.n	8000f22 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8000f1a:	683b      	ldr	r3, [r7, #0]
 8000f1c:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000f1e:	2b11      	cmp	r3, #17
 8000f20:	d132      	bne.n	8000f88 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	4a1d      	ldr	r2, [pc, #116]	; (8000f9c <HAL_ADC_ConfigChannel+0x1e4>)
 8000f28:	4293      	cmp	r3, r2
 8000f2a:	d125      	bne.n	8000f78 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	689b      	ldr	r3, [r3, #8]
 8000f32:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d126      	bne.n	8000f88 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	689a      	ldr	r2, [r3, #8]
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8000f48:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8000f4a:	683b      	ldr	r3, [r7, #0]
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	2b10      	cmp	r3, #16
 8000f50:	d11a      	bne.n	8000f88 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000f52:	4b13      	ldr	r3, [pc, #76]	; (8000fa0 <HAL_ADC_ConfigChannel+0x1e8>)
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	4a13      	ldr	r2, [pc, #76]	; (8000fa4 <HAL_ADC_ConfigChannel+0x1ec>)
 8000f58:	fba2 2303 	umull	r2, r3, r2, r3
 8000f5c:	0c9a      	lsrs	r2, r3, #18
 8000f5e:	4613      	mov	r3, r2
 8000f60:	009b      	lsls	r3, r3, #2
 8000f62:	4413      	add	r3, r2
 8000f64:	005b      	lsls	r3, r3, #1
 8000f66:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000f68:	e002      	b.n	8000f70 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8000f6a:	68bb      	ldr	r3, [r7, #8]
 8000f6c:	3b01      	subs	r3, #1
 8000f6e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000f70:	68bb      	ldr	r3, [r7, #8]
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d1f9      	bne.n	8000f6a <HAL_ADC_ConfigChannel+0x1b2>
 8000f76:	e007      	b.n	8000f88 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f7c:	f043 0220 	orr.w	r2, r3, #32
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8000f84:	2301      	movs	r3, #1
 8000f86:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8000f90:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f92:	4618      	mov	r0, r3
 8000f94:	3714      	adds	r7, #20
 8000f96:	46bd      	mov	sp, r7
 8000f98:	bc80      	pop	{r7}
 8000f9a:	4770      	bx	lr
 8000f9c:	40012400 	.word	0x40012400
 8000fa0:	20000000 	.word	0x20000000
 8000fa4:	431bde83 	.word	0x431bde83

08000fa8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b084      	sub	sp, #16
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	689b      	ldr	r3, [r3, #8]
 8000fbe:	f003 0301 	and.w	r3, r3, #1
 8000fc2:	2b01      	cmp	r3, #1
 8000fc4:	d040      	beq.n	8001048 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	689a      	ldr	r2, [r3, #8]
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	f042 0201 	orr.w	r2, r2, #1
 8000fd4:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000fd6:	4b1f      	ldr	r3, [pc, #124]	; (8001054 <ADC_Enable+0xac>)
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	4a1f      	ldr	r2, [pc, #124]	; (8001058 <ADC_Enable+0xb0>)
 8000fdc:	fba2 2303 	umull	r2, r3, r2, r3
 8000fe0:	0c9b      	lsrs	r3, r3, #18
 8000fe2:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8000fe4:	e002      	b.n	8000fec <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8000fe6:	68bb      	ldr	r3, [r7, #8]
 8000fe8:	3b01      	subs	r3, #1
 8000fea:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8000fec:	68bb      	ldr	r3, [r7, #8]
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d1f9      	bne.n	8000fe6 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8000ff2:	f7ff fc1b 	bl	800082c <HAL_GetTick>
 8000ff6:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8000ff8:	e01f      	b.n	800103a <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8000ffa:	f7ff fc17 	bl	800082c <HAL_GetTick>
 8000ffe:	4602      	mov	r2, r0
 8001000:	68fb      	ldr	r3, [r7, #12]
 8001002:	1ad3      	subs	r3, r2, r3
 8001004:	2b02      	cmp	r3, #2
 8001006:	d918      	bls.n	800103a <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	689b      	ldr	r3, [r3, #8]
 800100e:	f003 0301 	and.w	r3, r3, #1
 8001012:	2b01      	cmp	r3, #1
 8001014:	d011      	beq.n	800103a <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800101a:	f043 0210 	orr.w	r2, r3, #16
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001026:	f043 0201 	orr.w	r2, r3, #1
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	2200      	movs	r2, #0
 8001032:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8001036:	2301      	movs	r3, #1
 8001038:	e007      	b.n	800104a <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	689b      	ldr	r3, [r3, #8]
 8001040:	f003 0301 	and.w	r3, r3, #1
 8001044:	2b01      	cmp	r3, #1
 8001046:	d1d8      	bne.n	8000ffa <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001048:	2300      	movs	r3, #0
}
 800104a:	4618      	mov	r0, r3
 800104c:	3710      	adds	r7, #16
 800104e:	46bd      	mov	sp, r7
 8001050:	bd80      	pop	{r7, pc}
 8001052:	bf00      	nop
 8001054:	20000000 	.word	0x20000000
 8001058:	431bde83 	.word	0x431bde83

0800105c <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b084      	sub	sp, #16
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001064:	2300      	movs	r3, #0
 8001066:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	689b      	ldr	r3, [r3, #8]
 800106e:	f003 0301 	and.w	r3, r3, #1
 8001072:	2b01      	cmp	r3, #1
 8001074:	d12e      	bne.n	80010d4 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	689a      	ldr	r2, [r3, #8]
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	f022 0201 	bic.w	r2, r2, #1
 8001084:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001086:	f7ff fbd1 	bl	800082c <HAL_GetTick>
 800108a:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 800108c:	e01b      	b.n	80010c6 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800108e:	f7ff fbcd 	bl	800082c <HAL_GetTick>
 8001092:	4602      	mov	r2, r0
 8001094:	68fb      	ldr	r3, [r7, #12]
 8001096:	1ad3      	subs	r3, r2, r3
 8001098:	2b02      	cmp	r3, #2
 800109a:	d914      	bls.n	80010c6 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	689b      	ldr	r3, [r3, #8]
 80010a2:	f003 0301 	and.w	r3, r3, #1
 80010a6:	2b01      	cmp	r3, #1
 80010a8:	d10d      	bne.n	80010c6 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010ae:	f043 0210 	orr.w	r2, r3, #16
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010ba:	f043 0201 	orr.w	r2, r3, #1
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 80010c2:	2301      	movs	r3, #1
 80010c4:	e007      	b.n	80010d6 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	689b      	ldr	r3, [r3, #8]
 80010cc:	f003 0301 	and.w	r3, r3, #1
 80010d0:	2b01      	cmp	r3, #1
 80010d2:	d0dc      	beq.n	800108e <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80010d4:	2300      	movs	r3, #0
}
 80010d6:	4618      	mov	r0, r3
 80010d8:	3710      	adds	r7, #16
 80010da:	46bd      	mov	sp, r7
 80010dc:	bd80      	pop	{r7, pc}
	...

080010e0 <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 80010e0:	b590      	push	{r4, r7, lr}
 80010e2:	b087      	sub	sp, #28
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80010e8:	2300      	movs	r3, #0
 80010ea:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 80010ec:	2300      	movs	r3, #0
 80010ee:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80010f6:	2b01      	cmp	r3, #1
 80010f8:	d101      	bne.n	80010fe <HAL_ADCEx_Calibration_Start+0x1e>
 80010fa:	2302      	movs	r3, #2
 80010fc:	e097      	b.n	800122e <HAL_ADCEx_Calibration_Start+0x14e>
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	2201      	movs	r2, #1
 8001102:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
   /* 1. Disable ADC peripheral                                                 */
   tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001106:	6878      	ldr	r0, [r7, #4]
 8001108:	f7ff ffa8 	bl	800105c <ADC_ConversionStop_Disable>
 800110c:	4603      	mov	r3, r0
 800110e:	75fb      	strb	r3, [r7, #23]
  
   /* 2. Calibration prerequisite delay before starting the calibration.       */
   /*    - ADC must be enabled for at least two ADC clock cycles               */
   tmp_hal_status = ADC_Enable(hadc);
 8001110:	6878      	ldr	r0, [r7, #4]
 8001112:	f7ff ff49 	bl	8000fa8 <ADC_Enable>
 8001116:	4603      	mov	r3, r0
 8001118:	75fb      	strb	r3, [r7, #23]

   /* Check if ADC is effectively enabled */
   if (tmp_hal_status == HAL_OK)
 800111a:	7dfb      	ldrb	r3, [r7, #23]
 800111c:	2b00      	cmp	r3, #0
 800111e:	f040 8081 	bne.w	8001224 <HAL_ADCEx_Calibration_Start+0x144>
   {
     /* Set ADC state */
     ADC_STATE_CLR_SET(hadc->State,
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001126:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800112a:	f023 0302 	bic.w	r3, r3, #2
 800112e:	f043 0202 	orr.w	r2, r3, #2
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8001136:	4b40      	ldr	r3, [pc, #256]	; (8001238 <HAL_ADCEx_Calibration_Start+0x158>)
 8001138:	681c      	ldr	r4, [r3, #0]
 800113a:	2002      	movs	r0, #2
 800113c:	f000 ff90 	bl	8002060 <HAL_RCCEx_GetPeriphCLKFreq>
 8001140:	4603      	mov	r3, r0
 8001142:	fbb4 f3f3 	udiv	r3, r4, r3
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 8001146:	005b      	lsls	r3, r3, #1
    wait_loop_index = ((SystemCoreClock
 8001148:	60fb      	str	r3, [r7, #12]

    while(wait_loop_index != 0U)
 800114a:	e002      	b.n	8001152 <HAL_ADCEx_Calibration_Start+0x72>
    {
      wait_loop_index--;
 800114c:	68fb      	ldr	r3, [r7, #12]
 800114e:	3b01      	subs	r3, #1
 8001150:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0U)
 8001152:	68fb      	ldr	r3, [r7, #12]
 8001154:	2b00      	cmp	r3, #0
 8001156:	d1f9      	bne.n	800114c <HAL_ADCEx_Calibration_Start+0x6c>
    }

    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	689a      	ldr	r2, [r3, #8]
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	f042 0208 	orr.w	r2, r2, #8
 8001166:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8001168:	f7ff fb60 	bl	800082c <HAL_GetTick>
 800116c:	6138      	str	r0, [r7, #16]

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 800116e:	e01b      	b.n	80011a8 <HAL_ADCEx_Calibration_Start+0xc8>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8001170:	f7ff fb5c 	bl	800082c <HAL_GetTick>
 8001174:	4602      	mov	r2, r0
 8001176:	693b      	ldr	r3, [r7, #16]
 8001178:	1ad3      	subs	r3, r2, r3
 800117a:	2b0a      	cmp	r3, #10
 800117c:	d914      	bls.n	80011a8 <HAL_ADCEx_Calibration_Start+0xc8>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	689b      	ldr	r3, [r3, #8]
 8001184:	f003 0308 	and.w	r3, r3, #8
 8001188:	2b00      	cmp	r3, #0
 800118a:	d00d      	beq.n	80011a8 <HAL_ADCEx_Calibration_Start+0xc8>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001190:	f023 0312 	bic.w	r3, r3, #18
 8001194:	f043 0210 	orr.w	r2, r3, #16
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	629a      	str	r2, [r3, #40]	; 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	2200      	movs	r2, #0
 80011a0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 80011a4:	2301      	movs	r3, #1
 80011a6:	e042      	b.n	800122e <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	689b      	ldr	r3, [r3, #8]
 80011ae:	f003 0308 	and.w	r3, r3, #8
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d1dc      	bne.n	8001170 <HAL_ADCEx_Calibration_Start+0x90>
        }
      }
    }
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	689a      	ldr	r2, [r3, #8]
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	f042 0204 	orr.w	r2, r2, #4
 80011c4:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 80011c6:	f7ff fb31 	bl	800082c <HAL_GetTick>
 80011ca:	6138      	str	r0, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 80011cc:	e01b      	b.n	8001206 <HAL_ADCEx_Calibration_Start+0x126>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 80011ce:	f7ff fb2d 	bl	800082c <HAL_GetTick>
 80011d2:	4602      	mov	r2, r0
 80011d4:	693b      	ldr	r3, [r7, #16]
 80011d6:	1ad3      	subs	r3, r2, r3
 80011d8:	2b0a      	cmp	r3, #10
 80011da:	d914      	bls.n	8001206 <HAL_ADCEx_Calibration_Start+0x126>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	689b      	ldr	r3, [r3, #8]
 80011e2:	f003 0304 	and.w	r3, r3, #4
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d00d      	beq.n	8001206 <HAL_ADCEx_Calibration_Start+0x126>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011ee:	f023 0312 	bic.w	r3, r3, #18
 80011f2:	f043 0210 	orr.w	r2, r3, #16
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	629a      	str	r2, [r3, #40]	; 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	2200      	movs	r2, #0
 80011fe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8001202:	2301      	movs	r3, #1
 8001204:	e013      	b.n	800122e <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	689b      	ldr	r3, [r3, #8]
 800120c:	f003 0304 	and.w	r3, r3, #4
 8001210:	2b00      	cmp	r3, #0
 8001212:	d1dc      	bne.n	80011ce <HAL_ADCEx_Calibration_Start+0xee>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001218:	f023 0303 	bic.w	r3, r3, #3
 800121c:	f043 0201 	orr.w	r2, r3, #1
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	2200      	movs	r2, #0
 8001228:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 800122c:	7dfb      	ldrb	r3, [r7, #23]
}
 800122e:	4618      	mov	r0, r3
 8001230:	371c      	adds	r7, #28
 8001232:	46bd      	mov	sp, r7
 8001234:	bd90      	pop	{r4, r7, pc}
 8001236:	bf00      	nop
 8001238:	20000000 	.word	0x20000000

0800123c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800123c:	b480      	push	{r7}
 800123e:	b085      	sub	sp, #20
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	f003 0307 	and.w	r3, r3, #7
 800124a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800124c:	4b0c      	ldr	r3, [pc, #48]	; (8001280 <__NVIC_SetPriorityGrouping+0x44>)
 800124e:	68db      	ldr	r3, [r3, #12]
 8001250:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001252:	68ba      	ldr	r2, [r7, #8]
 8001254:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001258:	4013      	ands	r3, r2
 800125a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001260:	68bb      	ldr	r3, [r7, #8]
 8001262:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001264:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001268:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800126c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800126e:	4a04      	ldr	r2, [pc, #16]	; (8001280 <__NVIC_SetPriorityGrouping+0x44>)
 8001270:	68bb      	ldr	r3, [r7, #8]
 8001272:	60d3      	str	r3, [r2, #12]
}
 8001274:	bf00      	nop
 8001276:	3714      	adds	r7, #20
 8001278:	46bd      	mov	sp, r7
 800127a:	bc80      	pop	{r7}
 800127c:	4770      	bx	lr
 800127e:	bf00      	nop
 8001280:	e000ed00 	.word	0xe000ed00

08001284 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001284:	b480      	push	{r7}
 8001286:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001288:	4b04      	ldr	r3, [pc, #16]	; (800129c <__NVIC_GetPriorityGrouping+0x18>)
 800128a:	68db      	ldr	r3, [r3, #12]
 800128c:	0a1b      	lsrs	r3, r3, #8
 800128e:	f003 0307 	and.w	r3, r3, #7
}
 8001292:	4618      	mov	r0, r3
 8001294:	46bd      	mov	sp, r7
 8001296:	bc80      	pop	{r7}
 8001298:	4770      	bx	lr
 800129a:	bf00      	nop
 800129c:	e000ed00 	.word	0xe000ed00

080012a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80012a0:	b480      	push	{r7}
 80012a2:	b083      	sub	sp, #12
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	4603      	mov	r3, r0
 80012a8:	6039      	str	r1, [r7, #0]
 80012aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	db0a      	blt.n	80012ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012b4:	683b      	ldr	r3, [r7, #0]
 80012b6:	b2da      	uxtb	r2, r3
 80012b8:	490c      	ldr	r1, [pc, #48]	; (80012ec <__NVIC_SetPriority+0x4c>)
 80012ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012be:	0112      	lsls	r2, r2, #4
 80012c0:	b2d2      	uxtb	r2, r2
 80012c2:	440b      	add	r3, r1
 80012c4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80012c8:	e00a      	b.n	80012e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012ca:	683b      	ldr	r3, [r7, #0]
 80012cc:	b2da      	uxtb	r2, r3
 80012ce:	4908      	ldr	r1, [pc, #32]	; (80012f0 <__NVIC_SetPriority+0x50>)
 80012d0:	79fb      	ldrb	r3, [r7, #7]
 80012d2:	f003 030f 	and.w	r3, r3, #15
 80012d6:	3b04      	subs	r3, #4
 80012d8:	0112      	lsls	r2, r2, #4
 80012da:	b2d2      	uxtb	r2, r2
 80012dc:	440b      	add	r3, r1
 80012de:	761a      	strb	r2, [r3, #24]
}
 80012e0:	bf00      	nop
 80012e2:	370c      	adds	r7, #12
 80012e4:	46bd      	mov	sp, r7
 80012e6:	bc80      	pop	{r7}
 80012e8:	4770      	bx	lr
 80012ea:	bf00      	nop
 80012ec:	e000e100 	.word	0xe000e100
 80012f0:	e000ed00 	.word	0xe000ed00

080012f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012f4:	b480      	push	{r7}
 80012f6:	b089      	sub	sp, #36	; 0x24
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	60f8      	str	r0, [r7, #12]
 80012fc:	60b9      	str	r1, [r7, #8]
 80012fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	f003 0307 	and.w	r3, r3, #7
 8001306:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001308:	69fb      	ldr	r3, [r7, #28]
 800130a:	f1c3 0307 	rsb	r3, r3, #7
 800130e:	2b04      	cmp	r3, #4
 8001310:	bf28      	it	cs
 8001312:	2304      	movcs	r3, #4
 8001314:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001316:	69fb      	ldr	r3, [r7, #28]
 8001318:	3304      	adds	r3, #4
 800131a:	2b06      	cmp	r3, #6
 800131c:	d902      	bls.n	8001324 <NVIC_EncodePriority+0x30>
 800131e:	69fb      	ldr	r3, [r7, #28]
 8001320:	3b03      	subs	r3, #3
 8001322:	e000      	b.n	8001326 <NVIC_EncodePriority+0x32>
 8001324:	2300      	movs	r3, #0
 8001326:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001328:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800132c:	69bb      	ldr	r3, [r7, #24]
 800132e:	fa02 f303 	lsl.w	r3, r2, r3
 8001332:	43da      	mvns	r2, r3
 8001334:	68bb      	ldr	r3, [r7, #8]
 8001336:	401a      	ands	r2, r3
 8001338:	697b      	ldr	r3, [r7, #20]
 800133a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800133c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001340:	697b      	ldr	r3, [r7, #20]
 8001342:	fa01 f303 	lsl.w	r3, r1, r3
 8001346:	43d9      	mvns	r1, r3
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800134c:	4313      	orrs	r3, r2
         );
}
 800134e:	4618      	mov	r0, r3
 8001350:	3724      	adds	r7, #36	; 0x24
 8001352:	46bd      	mov	sp, r7
 8001354:	bc80      	pop	{r7}
 8001356:	4770      	bx	lr

08001358 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b082      	sub	sp, #8
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	3b01      	subs	r3, #1
 8001364:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001368:	d301      	bcc.n	800136e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800136a:	2301      	movs	r3, #1
 800136c:	e00f      	b.n	800138e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800136e:	4a0a      	ldr	r2, [pc, #40]	; (8001398 <SysTick_Config+0x40>)
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	3b01      	subs	r3, #1
 8001374:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001376:	210f      	movs	r1, #15
 8001378:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800137c:	f7ff ff90 	bl	80012a0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001380:	4b05      	ldr	r3, [pc, #20]	; (8001398 <SysTick_Config+0x40>)
 8001382:	2200      	movs	r2, #0
 8001384:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001386:	4b04      	ldr	r3, [pc, #16]	; (8001398 <SysTick_Config+0x40>)
 8001388:	2207      	movs	r2, #7
 800138a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800138c:	2300      	movs	r3, #0
}
 800138e:	4618      	mov	r0, r3
 8001390:	3708      	adds	r7, #8
 8001392:	46bd      	mov	sp, r7
 8001394:	bd80      	pop	{r7, pc}
 8001396:	bf00      	nop
 8001398:	e000e010 	.word	0xe000e010

0800139c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b082      	sub	sp, #8
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80013a4:	6878      	ldr	r0, [r7, #4]
 80013a6:	f7ff ff49 	bl	800123c <__NVIC_SetPriorityGrouping>
}
 80013aa:	bf00      	nop
 80013ac:	3708      	adds	r7, #8
 80013ae:	46bd      	mov	sp, r7
 80013b0:	bd80      	pop	{r7, pc}

080013b2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80013b2:	b580      	push	{r7, lr}
 80013b4:	b086      	sub	sp, #24
 80013b6:	af00      	add	r7, sp, #0
 80013b8:	4603      	mov	r3, r0
 80013ba:	60b9      	str	r1, [r7, #8]
 80013bc:	607a      	str	r2, [r7, #4]
 80013be:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80013c0:	2300      	movs	r3, #0
 80013c2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80013c4:	f7ff ff5e 	bl	8001284 <__NVIC_GetPriorityGrouping>
 80013c8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80013ca:	687a      	ldr	r2, [r7, #4]
 80013cc:	68b9      	ldr	r1, [r7, #8]
 80013ce:	6978      	ldr	r0, [r7, #20]
 80013d0:	f7ff ff90 	bl	80012f4 <NVIC_EncodePriority>
 80013d4:	4602      	mov	r2, r0
 80013d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013da:	4611      	mov	r1, r2
 80013dc:	4618      	mov	r0, r3
 80013de:	f7ff ff5f 	bl	80012a0 <__NVIC_SetPriority>
}
 80013e2:	bf00      	nop
 80013e4:	3718      	adds	r7, #24
 80013e6:	46bd      	mov	sp, r7
 80013e8:	bd80      	pop	{r7, pc}

080013ea <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80013ea:	b580      	push	{r7, lr}
 80013ec:	b082      	sub	sp, #8
 80013ee:	af00      	add	r7, sp, #0
 80013f0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80013f2:	6878      	ldr	r0, [r7, #4]
 80013f4:	f7ff ffb0 	bl	8001358 <SysTick_Config>
 80013f8:	4603      	mov	r3, r0
}
 80013fa:	4618      	mov	r0, r3
 80013fc:	3708      	adds	r7, #8
 80013fe:	46bd      	mov	sp, r7
 8001400:	bd80      	pop	{r7, pc}
	...

08001404 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001404:	b480      	push	{r7}
 8001406:	b08b      	sub	sp, #44	; 0x2c
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
 800140c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800140e:	2300      	movs	r3, #0
 8001410:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001412:	2300      	movs	r3, #0
 8001414:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001416:	e161      	b.n	80016dc <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001418:	2201      	movs	r2, #1
 800141a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800141c:	fa02 f303 	lsl.w	r3, r2, r3
 8001420:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001422:	683b      	ldr	r3, [r7, #0]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	69fa      	ldr	r2, [r7, #28]
 8001428:	4013      	ands	r3, r2
 800142a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800142c:	69ba      	ldr	r2, [r7, #24]
 800142e:	69fb      	ldr	r3, [r7, #28]
 8001430:	429a      	cmp	r2, r3
 8001432:	f040 8150 	bne.w	80016d6 <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001436:	683b      	ldr	r3, [r7, #0]
 8001438:	685b      	ldr	r3, [r3, #4]
 800143a:	4a97      	ldr	r2, [pc, #604]	; (8001698 <HAL_GPIO_Init+0x294>)
 800143c:	4293      	cmp	r3, r2
 800143e:	d05e      	beq.n	80014fe <HAL_GPIO_Init+0xfa>
 8001440:	4a95      	ldr	r2, [pc, #596]	; (8001698 <HAL_GPIO_Init+0x294>)
 8001442:	4293      	cmp	r3, r2
 8001444:	d875      	bhi.n	8001532 <HAL_GPIO_Init+0x12e>
 8001446:	4a95      	ldr	r2, [pc, #596]	; (800169c <HAL_GPIO_Init+0x298>)
 8001448:	4293      	cmp	r3, r2
 800144a:	d058      	beq.n	80014fe <HAL_GPIO_Init+0xfa>
 800144c:	4a93      	ldr	r2, [pc, #588]	; (800169c <HAL_GPIO_Init+0x298>)
 800144e:	4293      	cmp	r3, r2
 8001450:	d86f      	bhi.n	8001532 <HAL_GPIO_Init+0x12e>
 8001452:	4a93      	ldr	r2, [pc, #588]	; (80016a0 <HAL_GPIO_Init+0x29c>)
 8001454:	4293      	cmp	r3, r2
 8001456:	d052      	beq.n	80014fe <HAL_GPIO_Init+0xfa>
 8001458:	4a91      	ldr	r2, [pc, #580]	; (80016a0 <HAL_GPIO_Init+0x29c>)
 800145a:	4293      	cmp	r3, r2
 800145c:	d869      	bhi.n	8001532 <HAL_GPIO_Init+0x12e>
 800145e:	4a91      	ldr	r2, [pc, #580]	; (80016a4 <HAL_GPIO_Init+0x2a0>)
 8001460:	4293      	cmp	r3, r2
 8001462:	d04c      	beq.n	80014fe <HAL_GPIO_Init+0xfa>
 8001464:	4a8f      	ldr	r2, [pc, #572]	; (80016a4 <HAL_GPIO_Init+0x2a0>)
 8001466:	4293      	cmp	r3, r2
 8001468:	d863      	bhi.n	8001532 <HAL_GPIO_Init+0x12e>
 800146a:	4a8f      	ldr	r2, [pc, #572]	; (80016a8 <HAL_GPIO_Init+0x2a4>)
 800146c:	4293      	cmp	r3, r2
 800146e:	d046      	beq.n	80014fe <HAL_GPIO_Init+0xfa>
 8001470:	4a8d      	ldr	r2, [pc, #564]	; (80016a8 <HAL_GPIO_Init+0x2a4>)
 8001472:	4293      	cmp	r3, r2
 8001474:	d85d      	bhi.n	8001532 <HAL_GPIO_Init+0x12e>
 8001476:	2b12      	cmp	r3, #18
 8001478:	d82a      	bhi.n	80014d0 <HAL_GPIO_Init+0xcc>
 800147a:	2b12      	cmp	r3, #18
 800147c:	d859      	bhi.n	8001532 <HAL_GPIO_Init+0x12e>
 800147e:	a201      	add	r2, pc, #4	; (adr r2, 8001484 <HAL_GPIO_Init+0x80>)
 8001480:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001484:	080014ff 	.word	0x080014ff
 8001488:	080014d9 	.word	0x080014d9
 800148c:	080014eb 	.word	0x080014eb
 8001490:	0800152d 	.word	0x0800152d
 8001494:	08001533 	.word	0x08001533
 8001498:	08001533 	.word	0x08001533
 800149c:	08001533 	.word	0x08001533
 80014a0:	08001533 	.word	0x08001533
 80014a4:	08001533 	.word	0x08001533
 80014a8:	08001533 	.word	0x08001533
 80014ac:	08001533 	.word	0x08001533
 80014b0:	08001533 	.word	0x08001533
 80014b4:	08001533 	.word	0x08001533
 80014b8:	08001533 	.word	0x08001533
 80014bc:	08001533 	.word	0x08001533
 80014c0:	08001533 	.word	0x08001533
 80014c4:	08001533 	.word	0x08001533
 80014c8:	080014e1 	.word	0x080014e1
 80014cc:	080014f5 	.word	0x080014f5
 80014d0:	4a76      	ldr	r2, [pc, #472]	; (80016ac <HAL_GPIO_Init+0x2a8>)
 80014d2:	4293      	cmp	r3, r2
 80014d4:	d013      	beq.n	80014fe <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80014d6:	e02c      	b.n	8001532 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80014d8:	683b      	ldr	r3, [r7, #0]
 80014da:	68db      	ldr	r3, [r3, #12]
 80014dc:	623b      	str	r3, [r7, #32]
          break;
 80014de:	e029      	b.n	8001534 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80014e0:	683b      	ldr	r3, [r7, #0]
 80014e2:	68db      	ldr	r3, [r3, #12]
 80014e4:	3304      	adds	r3, #4
 80014e6:	623b      	str	r3, [r7, #32]
          break;
 80014e8:	e024      	b.n	8001534 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80014ea:	683b      	ldr	r3, [r7, #0]
 80014ec:	68db      	ldr	r3, [r3, #12]
 80014ee:	3308      	adds	r3, #8
 80014f0:	623b      	str	r3, [r7, #32]
          break;
 80014f2:	e01f      	b.n	8001534 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80014f4:	683b      	ldr	r3, [r7, #0]
 80014f6:	68db      	ldr	r3, [r3, #12]
 80014f8:	330c      	adds	r3, #12
 80014fa:	623b      	str	r3, [r7, #32]
          break;
 80014fc:	e01a      	b.n	8001534 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80014fe:	683b      	ldr	r3, [r7, #0]
 8001500:	689b      	ldr	r3, [r3, #8]
 8001502:	2b00      	cmp	r3, #0
 8001504:	d102      	bne.n	800150c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001506:	2304      	movs	r3, #4
 8001508:	623b      	str	r3, [r7, #32]
          break;
 800150a:	e013      	b.n	8001534 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800150c:	683b      	ldr	r3, [r7, #0]
 800150e:	689b      	ldr	r3, [r3, #8]
 8001510:	2b01      	cmp	r3, #1
 8001512:	d105      	bne.n	8001520 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001514:	2308      	movs	r3, #8
 8001516:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	69fa      	ldr	r2, [r7, #28]
 800151c:	611a      	str	r2, [r3, #16]
          break;
 800151e:	e009      	b.n	8001534 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001520:	2308      	movs	r3, #8
 8001522:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	69fa      	ldr	r2, [r7, #28]
 8001528:	615a      	str	r2, [r3, #20]
          break;
 800152a:	e003      	b.n	8001534 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800152c:	2300      	movs	r3, #0
 800152e:	623b      	str	r3, [r7, #32]
          break;
 8001530:	e000      	b.n	8001534 <HAL_GPIO_Init+0x130>
          break;
 8001532:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001534:	69bb      	ldr	r3, [r7, #24]
 8001536:	2bff      	cmp	r3, #255	; 0xff
 8001538:	d801      	bhi.n	800153e <HAL_GPIO_Init+0x13a>
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	e001      	b.n	8001542 <HAL_GPIO_Init+0x13e>
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	3304      	adds	r3, #4
 8001542:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001544:	69bb      	ldr	r3, [r7, #24]
 8001546:	2bff      	cmp	r3, #255	; 0xff
 8001548:	d802      	bhi.n	8001550 <HAL_GPIO_Init+0x14c>
 800154a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800154c:	009b      	lsls	r3, r3, #2
 800154e:	e002      	b.n	8001556 <HAL_GPIO_Init+0x152>
 8001550:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001552:	3b08      	subs	r3, #8
 8001554:	009b      	lsls	r3, r3, #2
 8001556:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001558:	697b      	ldr	r3, [r7, #20]
 800155a:	681a      	ldr	r2, [r3, #0]
 800155c:	210f      	movs	r1, #15
 800155e:	693b      	ldr	r3, [r7, #16]
 8001560:	fa01 f303 	lsl.w	r3, r1, r3
 8001564:	43db      	mvns	r3, r3
 8001566:	401a      	ands	r2, r3
 8001568:	6a39      	ldr	r1, [r7, #32]
 800156a:	693b      	ldr	r3, [r7, #16]
 800156c:	fa01 f303 	lsl.w	r3, r1, r3
 8001570:	431a      	orrs	r2, r3
 8001572:	697b      	ldr	r3, [r7, #20]
 8001574:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001576:	683b      	ldr	r3, [r7, #0]
 8001578:	685b      	ldr	r3, [r3, #4]
 800157a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800157e:	2b00      	cmp	r3, #0
 8001580:	f000 80a9 	beq.w	80016d6 <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001584:	4b4a      	ldr	r3, [pc, #296]	; (80016b0 <HAL_GPIO_Init+0x2ac>)
 8001586:	699b      	ldr	r3, [r3, #24]
 8001588:	4a49      	ldr	r2, [pc, #292]	; (80016b0 <HAL_GPIO_Init+0x2ac>)
 800158a:	f043 0301 	orr.w	r3, r3, #1
 800158e:	6193      	str	r3, [r2, #24]
 8001590:	4b47      	ldr	r3, [pc, #284]	; (80016b0 <HAL_GPIO_Init+0x2ac>)
 8001592:	699b      	ldr	r3, [r3, #24]
 8001594:	f003 0301 	and.w	r3, r3, #1
 8001598:	60bb      	str	r3, [r7, #8]
 800159a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800159c:	4a45      	ldr	r2, [pc, #276]	; (80016b4 <HAL_GPIO_Init+0x2b0>)
 800159e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015a0:	089b      	lsrs	r3, r3, #2
 80015a2:	3302      	adds	r3, #2
 80015a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015a8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80015aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015ac:	f003 0303 	and.w	r3, r3, #3
 80015b0:	009b      	lsls	r3, r3, #2
 80015b2:	220f      	movs	r2, #15
 80015b4:	fa02 f303 	lsl.w	r3, r2, r3
 80015b8:	43db      	mvns	r3, r3
 80015ba:	68fa      	ldr	r2, [r7, #12]
 80015bc:	4013      	ands	r3, r2
 80015be:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	4a3d      	ldr	r2, [pc, #244]	; (80016b8 <HAL_GPIO_Init+0x2b4>)
 80015c4:	4293      	cmp	r3, r2
 80015c6:	d00d      	beq.n	80015e4 <HAL_GPIO_Init+0x1e0>
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	4a3c      	ldr	r2, [pc, #240]	; (80016bc <HAL_GPIO_Init+0x2b8>)
 80015cc:	4293      	cmp	r3, r2
 80015ce:	d007      	beq.n	80015e0 <HAL_GPIO_Init+0x1dc>
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	4a3b      	ldr	r2, [pc, #236]	; (80016c0 <HAL_GPIO_Init+0x2bc>)
 80015d4:	4293      	cmp	r3, r2
 80015d6:	d101      	bne.n	80015dc <HAL_GPIO_Init+0x1d8>
 80015d8:	2302      	movs	r3, #2
 80015da:	e004      	b.n	80015e6 <HAL_GPIO_Init+0x1e2>
 80015dc:	2303      	movs	r3, #3
 80015de:	e002      	b.n	80015e6 <HAL_GPIO_Init+0x1e2>
 80015e0:	2301      	movs	r3, #1
 80015e2:	e000      	b.n	80015e6 <HAL_GPIO_Init+0x1e2>
 80015e4:	2300      	movs	r3, #0
 80015e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80015e8:	f002 0203 	and.w	r2, r2, #3
 80015ec:	0092      	lsls	r2, r2, #2
 80015ee:	4093      	lsls	r3, r2
 80015f0:	68fa      	ldr	r2, [r7, #12]
 80015f2:	4313      	orrs	r3, r2
 80015f4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80015f6:	492f      	ldr	r1, [pc, #188]	; (80016b4 <HAL_GPIO_Init+0x2b0>)
 80015f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015fa:	089b      	lsrs	r3, r3, #2
 80015fc:	3302      	adds	r3, #2
 80015fe:	68fa      	ldr	r2, [r7, #12]
 8001600:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001604:	683b      	ldr	r3, [r7, #0]
 8001606:	685b      	ldr	r3, [r3, #4]
 8001608:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800160c:	2b00      	cmp	r3, #0
 800160e:	d006      	beq.n	800161e <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001610:	4b2c      	ldr	r3, [pc, #176]	; (80016c4 <HAL_GPIO_Init+0x2c0>)
 8001612:	689a      	ldr	r2, [r3, #8]
 8001614:	492b      	ldr	r1, [pc, #172]	; (80016c4 <HAL_GPIO_Init+0x2c0>)
 8001616:	69bb      	ldr	r3, [r7, #24]
 8001618:	4313      	orrs	r3, r2
 800161a:	608b      	str	r3, [r1, #8]
 800161c:	e006      	b.n	800162c <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800161e:	4b29      	ldr	r3, [pc, #164]	; (80016c4 <HAL_GPIO_Init+0x2c0>)
 8001620:	689a      	ldr	r2, [r3, #8]
 8001622:	69bb      	ldr	r3, [r7, #24]
 8001624:	43db      	mvns	r3, r3
 8001626:	4927      	ldr	r1, [pc, #156]	; (80016c4 <HAL_GPIO_Init+0x2c0>)
 8001628:	4013      	ands	r3, r2
 800162a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800162c:	683b      	ldr	r3, [r7, #0]
 800162e:	685b      	ldr	r3, [r3, #4]
 8001630:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001634:	2b00      	cmp	r3, #0
 8001636:	d006      	beq.n	8001646 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001638:	4b22      	ldr	r3, [pc, #136]	; (80016c4 <HAL_GPIO_Init+0x2c0>)
 800163a:	68da      	ldr	r2, [r3, #12]
 800163c:	4921      	ldr	r1, [pc, #132]	; (80016c4 <HAL_GPIO_Init+0x2c0>)
 800163e:	69bb      	ldr	r3, [r7, #24]
 8001640:	4313      	orrs	r3, r2
 8001642:	60cb      	str	r3, [r1, #12]
 8001644:	e006      	b.n	8001654 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001646:	4b1f      	ldr	r3, [pc, #124]	; (80016c4 <HAL_GPIO_Init+0x2c0>)
 8001648:	68da      	ldr	r2, [r3, #12]
 800164a:	69bb      	ldr	r3, [r7, #24]
 800164c:	43db      	mvns	r3, r3
 800164e:	491d      	ldr	r1, [pc, #116]	; (80016c4 <HAL_GPIO_Init+0x2c0>)
 8001650:	4013      	ands	r3, r2
 8001652:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001654:	683b      	ldr	r3, [r7, #0]
 8001656:	685b      	ldr	r3, [r3, #4]
 8001658:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800165c:	2b00      	cmp	r3, #0
 800165e:	d006      	beq.n	800166e <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001660:	4b18      	ldr	r3, [pc, #96]	; (80016c4 <HAL_GPIO_Init+0x2c0>)
 8001662:	685a      	ldr	r2, [r3, #4]
 8001664:	4917      	ldr	r1, [pc, #92]	; (80016c4 <HAL_GPIO_Init+0x2c0>)
 8001666:	69bb      	ldr	r3, [r7, #24]
 8001668:	4313      	orrs	r3, r2
 800166a:	604b      	str	r3, [r1, #4]
 800166c:	e006      	b.n	800167c <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800166e:	4b15      	ldr	r3, [pc, #84]	; (80016c4 <HAL_GPIO_Init+0x2c0>)
 8001670:	685a      	ldr	r2, [r3, #4]
 8001672:	69bb      	ldr	r3, [r7, #24]
 8001674:	43db      	mvns	r3, r3
 8001676:	4913      	ldr	r1, [pc, #76]	; (80016c4 <HAL_GPIO_Init+0x2c0>)
 8001678:	4013      	ands	r3, r2
 800167a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800167c:	683b      	ldr	r3, [r7, #0]
 800167e:	685b      	ldr	r3, [r3, #4]
 8001680:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001684:	2b00      	cmp	r3, #0
 8001686:	d01f      	beq.n	80016c8 <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001688:	4b0e      	ldr	r3, [pc, #56]	; (80016c4 <HAL_GPIO_Init+0x2c0>)
 800168a:	681a      	ldr	r2, [r3, #0]
 800168c:	490d      	ldr	r1, [pc, #52]	; (80016c4 <HAL_GPIO_Init+0x2c0>)
 800168e:	69bb      	ldr	r3, [r7, #24]
 8001690:	4313      	orrs	r3, r2
 8001692:	600b      	str	r3, [r1, #0]
 8001694:	e01f      	b.n	80016d6 <HAL_GPIO_Init+0x2d2>
 8001696:	bf00      	nop
 8001698:	10320000 	.word	0x10320000
 800169c:	10310000 	.word	0x10310000
 80016a0:	10220000 	.word	0x10220000
 80016a4:	10210000 	.word	0x10210000
 80016a8:	10120000 	.word	0x10120000
 80016ac:	10110000 	.word	0x10110000
 80016b0:	40021000 	.word	0x40021000
 80016b4:	40010000 	.word	0x40010000
 80016b8:	40010800 	.word	0x40010800
 80016bc:	40010c00 	.word	0x40010c00
 80016c0:	40011000 	.word	0x40011000
 80016c4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80016c8:	4b0b      	ldr	r3, [pc, #44]	; (80016f8 <HAL_GPIO_Init+0x2f4>)
 80016ca:	681a      	ldr	r2, [r3, #0]
 80016cc:	69bb      	ldr	r3, [r7, #24]
 80016ce:	43db      	mvns	r3, r3
 80016d0:	4909      	ldr	r1, [pc, #36]	; (80016f8 <HAL_GPIO_Init+0x2f4>)
 80016d2:	4013      	ands	r3, r2
 80016d4:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80016d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016d8:	3301      	adds	r3, #1
 80016da:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80016dc:	683b      	ldr	r3, [r7, #0]
 80016de:	681a      	ldr	r2, [r3, #0]
 80016e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016e2:	fa22 f303 	lsr.w	r3, r2, r3
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	f47f ae96 	bne.w	8001418 <HAL_GPIO_Init+0x14>
  }
}
 80016ec:	bf00      	nop
 80016ee:	bf00      	nop
 80016f0:	372c      	adds	r7, #44	; 0x2c
 80016f2:	46bd      	mov	sp, r7
 80016f4:	bc80      	pop	{r7}
 80016f6:	4770      	bx	lr
 80016f8:	40010400 	.word	0x40010400

080016fc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b086      	sub	sp, #24
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	2b00      	cmp	r3, #0
 8001708:	d101      	bne.n	800170e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800170a:	2301      	movs	r3, #1
 800170c:	e272      	b.n	8001bf4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	f003 0301 	and.w	r3, r3, #1
 8001716:	2b00      	cmp	r3, #0
 8001718:	f000 8087 	beq.w	800182a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800171c:	4b92      	ldr	r3, [pc, #584]	; (8001968 <HAL_RCC_OscConfig+0x26c>)
 800171e:	685b      	ldr	r3, [r3, #4]
 8001720:	f003 030c 	and.w	r3, r3, #12
 8001724:	2b04      	cmp	r3, #4
 8001726:	d00c      	beq.n	8001742 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001728:	4b8f      	ldr	r3, [pc, #572]	; (8001968 <HAL_RCC_OscConfig+0x26c>)
 800172a:	685b      	ldr	r3, [r3, #4]
 800172c:	f003 030c 	and.w	r3, r3, #12
 8001730:	2b08      	cmp	r3, #8
 8001732:	d112      	bne.n	800175a <HAL_RCC_OscConfig+0x5e>
 8001734:	4b8c      	ldr	r3, [pc, #560]	; (8001968 <HAL_RCC_OscConfig+0x26c>)
 8001736:	685b      	ldr	r3, [r3, #4]
 8001738:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800173c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001740:	d10b      	bne.n	800175a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001742:	4b89      	ldr	r3, [pc, #548]	; (8001968 <HAL_RCC_OscConfig+0x26c>)
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800174a:	2b00      	cmp	r3, #0
 800174c:	d06c      	beq.n	8001828 <HAL_RCC_OscConfig+0x12c>
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	685b      	ldr	r3, [r3, #4]
 8001752:	2b00      	cmp	r3, #0
 8001754:	d168      	bne.n	8001828 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001756:	2301      	movs	r3, #1
 8001758:	e24c      	b.n	8001bf4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	685b      	ldr	r3, [r3, #4]
 800175e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001762:	d106      	bne.n	8001772 <HAL_RCC_OscConfig+0x76>
 8001764:	4b80      	ldr	r3, [pc, #512]	; (8001968 <HAL_RCC_OscConfig+0x26c>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	4a7f      	ldr	r2, [pc, #508]	; (8001968 <HAL_RCC_OscConfig+0x26c>)
 800176a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800176e:	6013      	str	r3, [r2, #0]
 8001770:	e02e      	b.n	80017d0 <HAL_RCC_OscConfig+0xd4>
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	685b      	ldr	r3, [r3, #4]
 8001776:	2b00      	cmp	r3, #0
 8001778:	d10c      	bne.n	8001794 <HAL_RCC_OscConfig+0x98>
 800177a:	4b7b      	ldr	r3, [pc, #492]	; (8001968 <HAL_RCC_OscConfig+0x26c>)
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	4a7a      	ldr	r2, [pc, #488]	; (8001968 <HAL_RCC_OscConfig+0x26c>)
 8001780:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001784:	6013      	str	r3, [r2, #0]
 8001786:	4b78      	ldr	r3, [pc, #480]	; (8001968 <HAL_RCC_OscConfig+0x26c>)
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	4a77      	ldr	r2, [pc, #476]	; (8001968 <HAL_RCC_OscConfig+0x26c>)
 800178c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001790:	6013      	str	r3, [r2, #0]
 8001792:	e01d      	b.n	80017d0 <HAL_RCC_OscConfig+0xd4>
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	685b      	ldr	r3, [r3, #4]
 8001798:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800179c:	d10c      	bne.n	80017b8 <HAL_RCC_OscConfig+0xbc>
 800179e:	4b72      	ldr	r3, [pc, #456]	; (8001968 <HAL_RCC_OscConfig+0x26c>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	4a71      	ldr	r2, [pc, #452]	; (8001968 <HAL_RCC_OscConfig+0x26c>)
 80017a4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80017a8:	6013      	str	r3, [r2, #0]
 80017aa:	4b6f      	ldr	r3, [pc, #444]	; (8001968 <HAL_RCC_OscConfig+0x26c>)
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	4a6e      	ldr	r2, [pc, #440]	; (8001968 <HAL_RCC_OscConfig+0x26c>)
 80017b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017b4:	6013      	str	r3, [r2, #0]
 80017b6:	e00b      	b.n	80017d0 <HAL_RCC_OscConfig+0xd4>
 80017b8:	4b6b      	ldr	r3, [pc, #428]	; (8001968 <HAL_RCC_OscConfig+0x26c>)
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	4a6a      	ldr	r2, [pc, #424]	; (8001968 <HAL_RCC_OscConfig+0x26c>)
 80017be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80017c2:	6013      	str	r3, [r2, #0]
 80017c4:	4b68      	ldr	r3, [pc, #416]	; (8001968 <HAL_RCC_OscConfig+0x26c>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	4a67      	ldr	r2, [pc, #412]	; (8001968 <HAL_RCC_OscConfig+0x26c>)
 80017ca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80017ce:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	685b      	ldr	r3, [r3, #4]
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d013      	beq.n	8001800 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017d8:	f7ff f828 	bl	800082c <HAL_GetTick>
 80017dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017de:	e008      	b.n	80017f2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80017e0:	f7ff f824 	bl	800082c <HAL_GetTick>
 80017e4:	4602      	mov	r2, r0
 80017e6:	693b      	ldr	r3, [r7, #16]
 80017e8:	1ad3      	subs	r3, r2, r3
 80017ea:	2b64      	cmp	r3, #100	; 0x64
 80017ec:	d901      	bls.n	80017f2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80017ee:	2303      	movs	r3, #3
 80017f0:	e200      	b.n	8001bf4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017f2:	4b5d      	ldr	r3, [pc, #372]	; (8001968 <HAL_RCC_OscConfig+0x26c>)
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d0f0      	beq.n	80017e0 <HAL_RCC_OscConfig+0xe4>
 80017fe:	e014      	b.n	800182a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001800:	f7ff f814 	bl	800082c <HAL_GetTick>
 8001804:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001806:	e008      	b.n	800181a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001808:	f7ff f810 	bl	800082c <HAL_GetTick>
 800180c:	4602      	mov	r2, r0
 800180e:	693b      	ldr	r3, [r7, #16]
 8001810:	1ad3      	subs	r3, r2, r3
 8001812:	2b64      	cmp	r3, #100	; 0x64
 8001814:	d901      	bls.n	800181a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001816:	2303      	movs	r3, #3
 8001818:	e1ec      	b.n	8001bf4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800181a:	4b53      	ldr	r3, [pc, #332]	; (8001968 <HAL_RCC_OscConfig+0x26c>)
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001822:	2b00      	cmp	r3, #0
 8001824:	d1f0      	bne.n	8001808 <HAL_RCC_OscConfig+0x10c>
 8001826:	e000      	b.n	800182a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001828:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	f003 0302 	and.w	r3, r3, #2
 8001832:	2b00      	cmp	r3, #0
 8001834:	d063      	beq.n	80018fe <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001836:	4b4c      	ldr	r3, [pc, #304]	; (8001968 <HAL_RCC_OscConfig+0x26c>)
 8001838:	685b      	ldr	r3, [r3, #4]
 800183a:	f003 030c 	and.w	r3, r3, #12
 800183e:	2b00      	cmp	r3, #0
 8001840:	d00b      	beq.n	800185a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001842:	4b49      	ldr	r3, [pc, #292]	; (8001968 <HAL_RCC_OscConfig+0x26c>)
 8001844:	685b      	ldr	r3, [r3, #4]
 8001846:	f003 030c 	and.w	r3, r3, #12
 800184a:	2b08      	cmp	r3, #8
 800184c:	d11c      	bne.n	8001888 <HAL_RCC_OscConfig+0x18c>
 800184e:	4b46      	ldr	r3, [pc, #280]	; (8001968 <HAL_RCC_OscConfig+0x26c>)
 8001850:	685b      	ldr	r3, [r3, #4]
 8001852:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001856:	2b00      	cmp	r3, #0
 8001858:	d116      	bne.n	8001888 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800185a:	4b43      	ldr	r3, [pc, #268]	; (8001968 <HAL_RCC_OscConfig+0x26c>)
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	f003 0302 	and.w	r3, r3, #2
 8001862:	2b00      	cmp	r3, #0
 8001864:	d005      	beq.n	8001872 <HAL_RCC_OscConfig+0x176>
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	691b      	ldr	r3, [r3, #16]
 800186a:	2b01      	cmp	r3, #1
 800186c:	d001      	beq.n	8001872 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800186e:	2301      	movs	r3, #1
 8001870:	e1c0      	b.n	8001bf4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001872:	4b3d      	ldr	r3, [pc, #244]	; (8001968 <HAL_RCC_OscConfig+0x26c>)
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	695b      	ldr	r3, [r3, #20]
 800187e:	00db      	lsls	r3, r3, #3
 8001880:	4939      	ldr	r1, [pc, #228]	; (8001968 <HAL_RCC_OscConfig+0x26c>)
 8001882:	4313      	orrs	r3, r2
 8001884:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001886:	e03a      	b.n	80018fe <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	691b      	ldr	r3, [r3, #16]
 800188c:	2b00      	cmp	r3, #0
 800188e:	d020      	beq.n	80018d2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001890:	4b36      	ldr	r3, [pc, #216]	; (800196c <HAL_RCC_OscConfig+0x270>)
 8001892:	2201      	movs	r2, #1
 8001894:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001896:	f7fe ffc9 	bl	800082c <HAL_GetTick>
 800189a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800189c:	e008      	b.n	80018b0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800189e:	f7fe ffc5 	bl	800082c <HAL_GetTick>
 80018a2:	4602      	mov	r2, r0
 80018a4:	693b      	ldr	r3, [r7, #16]
 80018a6:	1ad3      	subs	r3, r2, r3
 80018a8:	2b02      	cmp	r3, #2
 80018aa:	d901      	bls.n	80018b0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80018ac:	2303      	movs	r3, #3
 80018ae:	e1a1      	b.n	8001bf4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018b0:	4b2d      	ldr	r3, [pc, #180]	; (8001968 <HAL_RCC_OscConfig+0x26c>)
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	f003 0302 	and.w	r3, r3, #2
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d0f0      	beq.n	800189e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018bc:	4b2a      	ldr	r3, [pc, #168]	; (8001968 <HAL_RCC_OscConfig+0x26c>)
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	695b      	ldr	r3, [r3, #20]
 80018c8:	00db      	lsls	r3, r3, #3
 80018ca:	4927      	ldr	r1, [pc, #156]	; (8001968 <HAL_RCC_OscConfig+0x26c>)
 80018cc:	4313      	orrs	r3, r2
 80018ce:	600b      	str	r3, [r1, #0]
 80018d0:	e015      	b.n	80018fe <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80018d2:	4b26      	ldr	r3, [pc, #152]	; (800196c <HAL_RCC_OscConfig+0x270>)
 80018d4:	2200      	movs	r2, #0
 80018d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018d8:	f7fe ffa8 	bl	800082c <HAL_GetTick>
 80018dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80018de:	e008      	b.n	80018f2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80018e0:	f7fe ffa4 	bl	800082c <HAL_GetTick>
 80018e4:	4602      	mov	r2, r0
 80018e6:	693b      	ldr	r3, [r7, #16]
 80018e8:	1ad3      	subs	r3, r2, r3
 80018ea:	2b02      	cmp	r3, #2
 80018ec:	d901      	bls.n	80018f2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80018ee:	2303      	movs	r3, #3
 80018f0:	e180      	b.n	8001bf4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80018f2:	4b1d      	ldr	r3, [pc, #116]	; (8001968 <HAL_RCC_OscConfig+0x26c>)
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	f003 0302 	and.w	r3, r3, #2
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d1f0      	bne.n	80018e0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	f003 0308 	and.w	r3, r3, #8
 8001906:	2b00      	cmp	r3, #0
 8001908:	d03a      	beq.n	8001980 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	699b      	ldr	r3, [r3, #24]
 800190e:	2b00      	cmp	r3, #0
 8001910:	d019      	beq.n	8001946 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001912:	4b17      	ldr	r3, [pc, #92]	; (8001970 <HAL_RCC_OscConfig+0x274>)
 8001914:	2201      	movs	r2, #1
 8001916:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001918:	f7fe ff88 	bl	800082c <HAL_GetTick>
 800191c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800191e:	e008      	b.n	8001932 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001920:	f7fe ff84 	bl	800082c <HAL_GetTick>
 8001924:	4602      	mov	r2, r0
 8001926:	693b      	ldr	r3, [r7, #16]
 8001928:	1ad3      	subs	r3, r2, r3
 800192a:	2b02      	cmp	r3, #2
 800192c:	d901      	bls.n	8001932 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800192e:	2303      	movs	r3, #3
 8001930:	e160      	b.n	8001bf4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001932:	4b0d      	ldr	r3, [pc, #52]	; (8001968 <HAL_RCC_OscConfig+0x26c>)
 8001934:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001936:	f003 0302 	and.w	r3, r3, #2
 800193a:	2b00      	cmp	r3, #0
 800193c:	d0f0      	beq.n	8001920 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800193e:	2001      	movs	r0, #1
 8001940:	f000 faba 	bl	8001eb8 <RCC_Delay>
 8001944:	e01c      	b.n	8001980 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001946:	4b0a      	ldr	r3, [pc, #40]	; (8001970 <HAL_RCC_OscConfig+0x274>)
 8001948:	2200      	movs	r2, #0
 800194a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800194c:	f7fe ff6e 	bl	800082c <HAL_GetTick>
 8001950:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001952:	e00f      	b.n	8001974 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001954:	f7fe ff6a 	bl	800082c <HAL_GetTick>
 8001958:	4602      	mov	r2, r0
 800195a:	693b      	ldr	r3, [r7, #16]
 800195c:	1ad3      	subs	r3, r2, r3
 800195e:	2b02      	cmp	r3, #2
 8001960:	d908      	bls.n	8001974 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001962:	2303      	movs	r3, #3
 8001964:	e146      	b.n	8001bf4 <HAL_RCC_OscConfig+0x4f8>
 8001966:	bf00      	nop
 8001968:	40021000 	.word	0x40021000
 800196c:	42420000 	.word	0x42420000
 8001970:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001974:	4b92      	ldr	r3, [pc, #584]	; (8001bc0 <HAL_RCC_OscConfig+0x4c4>)
 8001976:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001978:	f003 0302 	and.w	r3, r3, #2
 800197c:	2b00      	cmp	r3, #0
 800197e:	d1e9      	bne.n	8001954 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	f003 0304 	and.w	r3, r3, #4
 8001988:	2b00      	cmp	r3, #0
 800198a:	f000 80a6 	beq.w	8001ada <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800198e:	2300      	movs	r3, #0
 8001990:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001992:	4b8b      	ldr	r3, [pc, #556]	; (8001bc0 <HAL_RCC_OscConfig+0x4c4>)
 8001994:	69db      	ldr	r3, [r3, #28]
 8001996:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800199a:	2b00      	cmp	r3, #0
 800199c:	d10d      	bne.n	80019ba <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800199e:	4b88      	ldr	r3, [pc, #544]	; (8001bc0 <HAL_RCC_OscConfig+0x4c4>)
 80019a0:	69db      	ldr	r3, [r3, #28]
 80019a2:	4a87      	ldr	r2, [pc, #540]	; (8001bc0 <HAL_RCC_OscConfig+0x4c4>)
 80019a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019a8:	61d3      	str	r3, [r2, #28]
 80019aa:	4b85      	ldr	r3, [pc, #532]	; (8001bc0 <HAL_RCC_OscConfig+0x4c4>)
 80019ac:	69db      	ldr	r3, [r3, #28]
 80019ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019b2:	60bb      	str	r3, [r7, #8]
 80019b4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80019b6:	2301      	movs	r3, #1
 80019b8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019ba:	4b82      	ldr	r3, [pc, #520]	; (8001bc4 <HAL_RCC_OscConfig+0x4c8>)
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d118      	bne.n	80019f8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80019c6:	4b7f      	ldr	r3, [pc, #508]	; (8001bc4 <HAL_RCC_OscConfig+0x4c8>)
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	4a7e      	ldr	r2, [pc, #504]	; (8001bc4 <HAL_RCC_OscConfig+0x4c8>)
 80019cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019d0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80019d2:	f7fe ff2b 	bl	800082c <HAL_GetTick>
 80019d6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019d8:	e008      	b.n	80019ec <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80019da:	f7fe ff27 	bl	800082c <HAL_GetTick>
 80019de:	4602      	mov	r2, r0
 80019e0:	693b      	ldr	r3, [r7, #16]
 80019e2:	1ad3      	subs	r3, r2, r3
 80019e4:	2b64      	cmp	r3, #100	; 0x64
 80019e6:	d901      	bls.n	80019ec <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80019e8:	2303      	movs	r3, #3
 80019ea:	e103      	b.n	8001bf4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019ec:	4b75      	ldr	r3, [pc, #468]	; (8001bc4 <HAL_RCC_OscConfig+0x4c8>)
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d0f0      	beq.n	80019da <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	68db      	ldr	r3, [r3, #12]
 80019fc:	2b01      	cmp	r3, #1
 80019fe:	d106      	bne.n	8001a0e <HAL_RCC_OscConfig+0x312>
 8001a00:	4b6f      	ldr	r3, [pc, #444]	; (8001bc0 <HAL_RCC_OscConfig+0x4c4>)
 8001a02:	6a1b      	ldr	r3, [r3, #32]
 8001a04:	4a6e      	ldr	r2, [pc, #440]	; (8001bc0 <HAL_RCC_OscConfig+0x4c4>)
 8001a06:	f043 0301 	orr.w	r3, r3, #1
 8001a0a:	6213      	str	r3, [r2, #32]
 8001a0c:	e02d      	b.n	8001a6a <HAL_RCC_OscConfig+0x36e>
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	68db      	ldr	r3, [r3, #12]
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d10c      	bne.n	8001a30 <HAL_RCC_OscConfig+0x334>
 8001a16:	4b6a      	ldr	r3, [pc, #424]	; (8001bc0 <HAL_RCC_OscConfig+0x4c4>)
 8001a18:	6a1b      	ldr	r3, [r3, #32]
 8001a1a:	4a69      	ldr	r2, [pc, #420]	; (8001bc0 <HAL_RCC_OscConfig+0x4c4>)
 8001a1c:	f023 0301 	bic.w	r3, r3, #1
 8001a20:	6213      	str	r3, [r2, #32]
 8001a22:	4b67      	ldr	r3, [pc, #412]	; (8001bc0 <HAL_RCC_OscConfig+0x4c4>)
 8001a24:	6a1b      	ldr	r3, [r3, #32]
 8001a26:	4a66      	ldr	r2, [pc, #408]	; (8001bc0 <HAL_RCC_OscConfig+0x4c4>)
 8001a28:	f023 0304 	bic.w	r3, r3, #4
 8001a2c:	6213      	str	r3, [r2, #32]
 8001a2e:	e01c      	b.n	8001a6a <HAL_RCC_OscConfig+0x36e>
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	68db      	ldr	r3, [r3, #12]
 8001a34:	2b05      	cmp	r3, #5
 8001a36:	d10c      	bne.n	8001a52 <HAL_RCC_OscConfig+0x356>
 8001a38:	4b61      	ldr	r3, [pc, #388]	; (8001bc0 <HAL_RCC_OscConfig+0x4c4>)
 8001a3a:	6a1b      	ldr	r3, [r3, #32]
 8001a3c:	4a60      	ldr	r2, [pc, #384]	; (8001bc0 <HAL_RCC_OscConfig+0x4c4>)
 8001a3e:	f043 0304 	orr.w	r3, r3, #4
 8001a42:	6213      	str	r3, [r2, #32]
 8001a44:	4b5e      	ldr	r3, [pc, #376]	; (8001bc0 <HAL_RCC_OscConfig+0x4c4>)
 8001a46:	6a1b      	ldr	r3, [r3, #32]
 8001a48:	4a5d      	ldr	r2, [pc, #372]	; (8001bc0 <HAL_RCC_OscConfig+0x4c4>)
 8001a4a:	f043 0301 	orr.w	r3, r3, #1
 8001a4e:	6213      	str	r3, [r2, #32]
 8001a50:	e00b      	b.n	8001a6a <HAL_RCC_OscConfig+0x36e>
 8001a52:	4b5b      	ldr	r3, [pc, #364]	; (8001bc0 <HAL_RCC_OscConfig+0x4c4>)
 8001a54:	6a1b      	ldr	r3, [r3, #32]
 8001a56:	4a5a      	ldr	r2, [pc, #360]	; (8001bc0 <HAL_RCC_OscConfig+0x4c4>)
 8001a58:	f023 0301 	bic.w	r3, r3, #1
 8001a5c:	6213      	str	r3, [r2, #32]
 8001a5e:	4b58      	ldr	r3, [pc, #352]	; (8001bc0 <HAL_RCC_OscConfig+0x4c4>)
 8001a60:	6a1b      	ldr	r3, [r3, #32]
 8001a62:	4a57      	ldr	r2, [pc, #348]	; (8001bc0 <HAL_RCC_OscConfig+0x4c4>)
 8001a64:	f023 0304 	bic.w	r3, r3, #4
 8001a68:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	68db      	ldr	r3, [r3, #12]
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d015      	beq.n	8001a9e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a72:	f7fe fedb 	bl	800082c <HAL_GetTick>
 8001a76:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a78:	e00a      	b.n	8001a90 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a7a:	f7fe fed7 	bl	800082c <HAL_GetTick>
 8001a7e:	4602      	mov	r2, r0
 8001a80:	693b      	ldr	r3, [r7, #16]
 8001a82:	1ad3      	subs	r3, r2, r3
 8001a84:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a88:	4293      	cmp	r3, r2
 8001a8a:	d901      	bls.n	8001a90 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001a8c:	2303      	movs	r3, #3
 8001a8e:	e0b1      	b.n	8001bf4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a90:	4b4b      	ldr	r3, [pc, #300]	; (8001bc0 <HAL_RCC_OscConfig+0x4c4>)
 8001a92:	6a1b      	ldr	r3, [r3, #32]
 8001a94:	f003 0302 	and.w	r3, r3, #2
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d0ee      	beq.n	8001a7a <HAL_RCC_OscConfig+0x37e>
 8001a9c:	e014      	b.n	8001ac8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a9e:	f7fe fec5 	bl	800082c <HAL_GetTick>
 8001aa2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001aa4:	e00a      	b.n	8001abc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001aa6:	f7fe fec1 	bl	800082c <HAL_GetTick>
 8001aaa:	4602      	mov	r2, r0
 8001aac:	693b      	ldr	r3, [r7, #16]
 8001aae:	1ad3      	subs	r3, r2, r3
 8001ab0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ab4:	4293      	cmp	r3, r2
 8001ab6:	d901      	bls.n	8001abc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001ab8:	2303      	movs	r3, #3
 8001aba:	e09b      	b.n	8001bf4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001abc:	4b40      	ldr	r3, [pc, #256]	; (8001bc0 <HAL_RCC_OscConfig+0x4c4>)
 8001abe:	6a1b      	ldr	r3, [r3, #32]
 8001ac0:	f003 0302 	and.w	r3, r3, #2
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d1ee      	bne.n	8001aa6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001ac8:	7dfb      	ldrb	r3, [r7, #23]
 8001aca:	2b01      	cmp	r3, #1
 8001acc:	d105      	bne.n	8001ada <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ace:	4b3c      	ldr	r3, [pc, #240]	; (8001bc0 <HAL_RCC_OscConfig+0x4c4>)
 8001ad0:	69db      	ldr	r3, [r3, #28]
 8001ad2:	4a3b      	ldr	r2, [pc, #236]	; (8001bc0 <HAL_RCC_OscConfig+0x4c4>)
 8001ad4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ad8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	69db      	ldr	r3, [r3, #28]
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	f000 8087 	beq.w	8001bf2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001ae4:	4b36      	ldr	r3, [pc, #216]	; (8001bc0 <HAL_RCC_OscConfig+0x4c4>)
 8001ae6:	685b      	ldr	r3, [r3, #4]
 8001ae8:	f003 030c 	and.w	r3, r3, #12
 8001aec:	2b08      	cmp	r3, #8
 8001aee:	d061      	beq.n	8001bb4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	69db      	ldr	r3, [r3, #28]
 8001af4:	2b02      	cmp	r3, #2
 8001af6:	d146      	bne.n	8001b86 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001af8:	4b33      	ldr	r3, [pc, #204]	; (8001bc8 <HAL_RCC_OscConfig+0x4cc>)
 8001afa:	2200      	movs	r2, #0
 8001afc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001afe:	f7fe fe95 	bl	800082c <HAL_GetTick>
 8001b02:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b04:	e008      	b.n	8001b18 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b06:	f7fe fe91 	bl	800082c <HAL_GetTick>
 8001b0a:	4602      	mov	r2, r0
 8001b0c:	693b      	ldr	r3, [r7, #16]
 8001b0e:	1ad3      	subs	r3, r2, r3
 8001b10:	2b02      	cmp	r3, #2
 8001b12:	d901      	bls.n	8001b18 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001b14:	2303      	movs	r3, #3
 8001b16:	e06d      	b.n	8001bf4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b18:	4b29      	ldr	r3, [pc, #164]	; (8001bc0 <HAL_RCC_OscConfig+0x4c4>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d1f0      	bne.n	8001b06 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	6a1b      	ldr	r3, [r3, #32]
 8001b28:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b2c:	d108      	bne.n	8001b40 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001b2e:	4b24      	ldr	r3, [pc, #144]	; (8001bc0 <HAL_RCC_OscConfig+0x4c4>)
 8001b30:	685b      	ldr	r3, [r3, #4]
 8001b32:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	689b      	ldr	r3, [r3, #8]
 8001b3a:	4921      	ldr	r1, [pc, #132]	; (8001bc0 <HAL_RCC_OscConfig+0x4c4>)
 8001b3c:	4313      	orrs	r3, r2
 8001b3e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001b40:	4b1f      	ldr	r3, [pc, #124]	; (8001bc0 <HAL_RCC_OscConfig+0x4c4>)
 8001b42:	685b      	ldr	r3, [r3, #4]
 8001b44:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	6a19      	ldr	r1, [r3, #32]
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b50:	430b      	orrs	r3, r1
 8001b52:	491b      	ldr	r1, [pc, #108]	; (8001bc0 <HAL_RCC_OscConfig+0x4c4>)
 8001b54:	4313      	orrs	r3, r2
 8001b56:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001b58:	4b1b      	ldr	r3, [pc, #108]	; (8001bc8 <HAL_RCC_OscConfig+0x4cc>)
 8001b5a:	2201      	movs	r2, #1
 8001b5c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b5e:	f7fe fe65 	bl	800082c <HAL_GetTick>
 8001b62:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001b64:	e008      	b.n	8001b78 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b66:	f7fe fe61 	bl	800082c <HAL_GetTick>
 8001b6a:	4602      	mov	r2, r0
 8001b6c:	693b      	ldr	r3, [r7, #16]
 8001b6e:	1ad3      	subs	r3, r2, r3
 8001b70:	2b02      	cmp	r3, #2
 8001b72:	d901      	bls.n	8001b78 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001b74:	2303      	movs	r3, #3
 8001b76:	e03d      	b.n	8001bf4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001b78:	4b11      	ldr	r3, [pc, #68]	; (8001bc0 <HAL_RCC_OscConfig+0x4c4>)
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d0f0      	beq.n	8001b66 <HAL_RCC_OscConfig+0x46a>
 8001b84:	e035      	b.n	8001bf2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b86:	4b10      	ldr	r3, [pc, #64]	; (8001bc8 <HAL_RCC_OscConfig+0x4cc>)
 8001b88:	2200      	movs	r2, #0
 8001b8a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b8c:	f7fe fe4e 	bl	800082c <HAL_GetTick>
 8001b90:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b92:	e008      	b.n	8001ba6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b94:	f7fe fe4a 	bl	800082c <HAL_GetTick>
 8001b98:	4602      	mov	r2, r0
 8001b9a:	693b      	ldr	r3, [r7, #16]
 8001b9c:	1ad3      	subs	r3, r2, r3
 8001b9e:	2b02      	cmp	r3, #2
 8001ba0:	d901      	bls.n	8001ba6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001ba2:	2303      	movs	r3, #3
 8001ba4:	e026      	b.n	8001bf4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ba6:	4b06      	ldr	r3, [pc, #24]	; (8001bc0 <HAL_RCC_OscConfig+0x4c4>)
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d1f0      	bne.n	8001b94 <HAL_RCC_OscConfig+0x498>
 8001bb2:	e01e      	b.n	8001bf2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	69db      	ldr	r3, [r3, #28]
 8001bb8:	2b01      	cmp	r3, #1
 8001bba:	d107      	bne.n	8001bcc <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001bbc:	2301      	movs	r3, #1
 8001bbe:	e019      	b.n	8001bf4 <HAL_RCC_OscConfig+0x4f8>
 8001bc0:	40021000 	.word	0x40021000
 8001bc4:	40007000 	.word	0x40007000
 8001bc8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001bcc:	4b0b      	ldr	r3, [pc, #44]	; (8001bfc <HAL_RCC_OscConfig+0x500>)
 8001bce:	685b      	ldr	r3, [r3, #4]
 8001bd0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	6a1b      	ldr	r3, [r3, #32]
 8001bdc:	429a      	cmp	r2, r3
 8001bde:	d106      	bne.n	8001bee <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bea:	429a      	cmp	r2, r3
 8001bec:	d001      	beq.n	8001bf2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001bee:	2301      	movs	r3, #1
 8001bf0:	e000      	b.n	8001bf4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001bf2:	2300      	movs	r3, #0
}
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	3718      	adds	r7, #24
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	bd80      	pop	{r7, pc}
 8001bfc:	40021000 	.word	0x40021000

08001c00 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b084      	sub	sp, #16
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
 8001c08:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d101      	bne.n	8001c14 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001c10:	2301      	movs	r3, #1
 8001c12:	e0d0      	b.n	8001db6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001c14:	4b6a      	ldr	r3, [pc, #424]	; (8001dc0 <HAL_RCC_ClockConfig+0x1c0>)
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	f003 0307 	and.w	r3, r3, #7
 8001c1c:	683a      	ldr	r2, [r7, #0]
 8001c1e:	429a      	cmp	r2, r3
 8001c20:	d910      	bls.n	8001c44 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c22:	4b67      	ldr	r3, [pc, #412]	; (8001dc0 <HAL_RCC_ClockConfig+0x1c0>)
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f023 0207 	bic.w	r2, r3, #7
 8001c2a:	4965      	ldr	r1, [pc, #404]	; (8001dc0 <HAL_RCC_ClockConfig+0x1c0>)
 8001c2c:	683b      	ldr	r3, [r7, #0]
 8001c2e:	4313      	orrs	r3, r2
 8001c30:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c32:	4b63      	ldr	r3, [pc, #396]	; (8001dc0 <HAL_RCC_ClockConfig+0x1c0>)
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f003 0307 	and.w	r3, r3, #7
 8001c3a:	683a      	ldr	r2, [r7, #0]
 8001c3c:	429a      	cmp	r2, r3
 8001c3e:	d001      	beq.n	8001c44 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001c40:	2301      	movs	r3, #1
 8001c42:	e0b8      	b.n	8001db6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	f003 0302 	and.w	r3, r3, #2
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d020      	beq.n	8001c92 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	f003 0304 	and.w	r3, r3, #4
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d005      	beq.n	8001c68 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001c5c:	4b59      	ldr	r3, [pc, #356]	; (8001dc4 <HAL_RCC_ClockConfig+0x1c4>)
 8001c5e:	685b      	ldr	r3, [r3, #4]
 8001c60:	4a58      	ldr	r2, [pc, #352]	; (8001dc4 <HAL_RCC_ClockConfig+0x1c4>)
 8001c62:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001c66:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	f003 0308 	and.w	r3, r3, #8
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d005      	beq.n	8001c80 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001c74:	4b53      	ldr	r3, [pc, #332]	; (8001dc4 <HAL_RCC_ClockConfig+0x1c4>)
 8001c76:	685b      	ldr	r3, [r3, #4]
 8001c78:	4a52      	ldr	r2, [pc, #328]	; (8001dc4 <HAL_RCC_ClockConfig+0x1c4>)
 8001c7a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001c7e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c80:	4b50      	ldr	r3, [pc, #320]	; (8001dc4 <HAL_RCC_ClockConfig+0x1c4>)
 8001c82:	685b      	ldr	r3, [r3, #4]
 8001c84:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	689b      	ldr	r3, [r3, #8]
 8001c8c:	494d      	ldr	r1, [pc, #308]	; (8001dc4 <HAL_RCC_ClockConfig+0x1c4>)
 8001c8e:	4313      	orrs	r3, r2
 8001c90:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f003 0301 	and.w	r3, r3, #1
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d040      	beq.n	8001d20 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	685b      	ldr	r3, [r3, #4]
 8001ca2:	2b01      	cmp	r3, #1
 8001ca4:	d107      	bne.n	8001cb6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ca6:	4b47      	ldr	r3, [pc, #284]	; (8001dc4 <HAL_RCC_ClockConfig+0x1c4>)
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d115      	bne.n	8001cde <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001cb2:	2301      	movs	r3, #1
 8001cb4:	e07f      	b.n	8001db6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	685b      	ldr	r3, [r3, #4]
 8001cba:	2b02      	cmp	r3, #2
 8001cbc:	d107      	bne.n	8001cce <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001cbe:	4b41      	ldr	r3, [pc, #260]	; (8001dc4 <HAL_RCC_ClockConfig+0x1c4>)
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d109      	bne.n	8001cde <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001cca:	2301      	movs	r3, #1
 8001ccc:	e073      	b.n	8001db6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cce:	4b3d      	ldr	r3, [pc, #244]	; (8001dc4 <HAL_RCC_ClockConfig+0x1c4>)
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f003 0302 	and.w	r3, r3, #2
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d101      	bne.n	8001cde <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001cda:	2301      	movs	r3, #1
 8001cdc:	e06b      	b.n	8001db6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001cde:	4b39      	ldr	r3, [pc, #228]	; (8001dc4 <HAL_RCC_ClockConfig+0x1c4>)
 8001ce0:	685b      	ldr	r3, [r3, #4]
 8001ce2:	f023 0203 	bic.w	r2, r3, #3
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	685b      	ldr	r3, [r3, #4]
 8001cea:	4936      	ldr	r1, [pc, #216]	; (8001dc4 <HAL_RCC_ClockConfig+0x1c4>)
 8001cec:	4313      	orrs	r3, r2
 8001cee:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001cf0:	f7fe fd9c 	bl	800082c <HAL_GetTick>
 8001cf4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001cf6:	e00a      	b.n	8001d0e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001cf8:	f7fe fd98 	bl	800082c <HAL_GetTick>
 8001cfc:	4602      	mov	r2, r0
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	1ad3      	subs	r3, r2, r3
 8001d02:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d06:	4293      	cmp	r3, r2
 8001d08:	d901      	bls.n	8001d0e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001d0a:	2303      	movs	r3, #3
 8001d0c:	e053      	b.n	8001db6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d0e:	4b2d      	ldr	r3, [pc, #180]	; (8001dc4 <HAL_RCC_ClockConfig+0x1c4>)
 8001d10:	685b      	ldr	r3, [r3, #4]
 8001d12:	f003 020c 	and.w	r2, r3, #12
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	685b      	ldr	r3, [r3, #4]
 8001d1a:	009b      	lsls	r3, r3, #2
 8001d1c:	429a      	cmp	r2, r3
 8001d1e:	d1eb      	bne.n	8001cf8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001d20:	4b27      	ldr	r3, [pc, #156]	; (8001dc0 <HAL_RCC_ClockConfig+0x1c0>)
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	f003 0307 	and.w	r3, r3, #7
 8001d28:	683a      	ldr	r2, [r7, #0]
 8001d2a:	429a      	cmp	r2, r3
 8001d2c:	d210      	bcs.n	8001d50 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d2e:	4b24      	ldr	r3, [pc, #144]	; (8001dc0 <HAL_RCC_ClockConfig+0x1c0>)
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f023 0207 	bic.w	r2, r3, #7
 8001d36:	4922      	ldr	r1, [pc, #136]	; (8001dc0 <HAL_RCC_ClockConfig+0x1c0>)
 8001d38:	683b      	ldr	r3, [r7, #0]
 8001d3a:	4313      	orrs	r3, r2
 8001d3c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d3e:	4b20      	ldr	r3, [pc, #128]	; (8001dc0 <HAL_RCC_ClockConfig+0x1c0>)
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f003 0307 	and.w	r3, r3, #7
 8001d46:	683a      	ldr	r2, [r7, #0]
 8001d48:	429a      	cmp	r2, r3
 8001d4a:	d001      	beq.n	8001d50 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001d4c:	2301      	movs	r3, #1
 8001d4e:	e032      	b.n	8001db6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	f003 0304 	and.w	r3, r3, #4
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d008      	beq.n	8001d6e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d5c:	4b19      	ldr	r3, [pc, #100]	; (8001dc4 <HAL_RCC_ClockConfig+0x1c4>)
 8001d5e:	685b      	ldr	r3, [r3, #4]
 8001d60:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	68db      	ldr	r3, [r3, #12]
 8001d68:	4916      	ldr	r1, [pc, #88]	; (8001dc4 <HAL_RCC_ClockConfig+0x1c4>)
 8001d6a:	4313      	orrs	r3, r2
 8001d6c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f003 0308 	and.w	r3, r3, #8
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d009      	beq.n	8001d8e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001d7a:	4b12      	ldr	r3, [pc, #72]	; (8001dc4 <HAL_RCC_ClockConfig+0x1c4>)
 8001d7c:	685b      	ldr	r3, [r3, #4]
 8001d7e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	691b      	ldr	r3, [r3, #16]
 8001d86:	00db      	lsls	r3, r3, #3
 8001d88:	490e      	ldr	r1, [pc, #56]	; (8001dc4 <HAL_RCC_ClockConfig+0x1c4>)
 8001d8a:	4313      	orrs	r3, r2
 8001d8c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001d8e:	f000 f821 	bl	8001dd4 <HAL_RCC_GetSysClockFreq>
 8001d92:	4602      	mov	r2, r0
 8001d94:	4b0b      	ldr	r3, [pc, #44]	; (8001dc4 <HAL_RCC_ClockConfig+0x1c4>)
 8001d96:	685b      	ldr	r3, [r3, #4]
 8001d98:	091b      	lsrs	r3, r3, #4
 8001d9a:	f003 030f 	and.w	r3, r3, #15
 8001d9e:	490a      	ldr	r1, [pc, #40]	; (8001dc8 <HAL_RCC_ClockConfig+0x1c8>)
 8001da0:	5ccb      	ldrb	r3, [r1, r3]
 8001da2:	fa22 f303 	lsr.w	r3, r2, r3
 8001da6:	4a09      	ldr	r2, [pc, #36]	; (8001dcc <HAL_RCC_ClockConfig+0x1cc>)
 8001da8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001daa:	4b09      	ldr	r3, [pc, #36]	; (8001dd0 <HAL_RCC_ClockConfig+0x1d0>)
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	4618      	mov	r0, r3
 8001db0:	f7fe fcfa 	bl	80007a8 <HAL_InitTick>

  return HAL_OK;
 8001db4:	2300      	movs	r3, #0
}
 8001db6:	4618      	mov	r0, r3
 8001db8:	3710      	adds	r7, #16
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	bd80      	pop	{r7, pc}
 8001dbe:	bf00      	nop
 8001dc0:	40022000 	.word	0x40022000
 8001dc4:	40021000 	.word	0x40021000
 8001dc8:	08003a74 	.word	0x08003a74
 8001dcc:	20000000 	.word	0x20000000
 8001dd0:	20000004 	.word	0x20000004

08001dd4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001dd4:	b480      	push	{r7}
 8001dd6:	b087      	sub	sp, #28
 8001dd8:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001dda:	2300      	movs	r3, #0
 8001ddc:	60fb      	str	r3, [r7, #12]
 8001dde:	2300      	movs	r3, #0
 8001de0:	60bb      	str	r3, [r7, #8]
 8001de2:	2300      	movs	r3, #0
 8001de4:	617b      	str	r3, [r7, #20]
 8001de6:	2300      	movs	r3, #0
 8001de8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001dea:	2300      	movs	r3, #0
 8001dec:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001dee:	4b1e      	ldr	r3, [pc, #120]	; (8001e68 <HAL_RCC_GetSysClockFreq+0x94>)
 8001df0:	685b      	ldr	r3, [r3, #4]
 8001df2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	f003 030c 	and.w	r3, r3, #12
 8001dfa:	2b04      	cmp	r3, #4
 8001dfc:	d002      	beq.n	8001e04 <HAL_RCC_GetSysClockFreq+0x30>
 8001dfe:	2b08      	cmp	r3, #8
 8001e00:	d003      	beq.n	8001e0a <HAL_RCC_GetSysClockFreq+0x36>
 8001e02:	e027      	b.n	8001e54 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001e04:	4b19      	ldr	r3, [pc, #100]	; (8001e6c <HAL_RCC_GetSysClockFreq+0x98>)
 8001e06:	613b      	str	r3, [r7, #16]
      break;
 8001e08:	e027      	b.n	8001e5a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	0c9b      	lsrs	r3, r3, #18
 8001e0e:	f003 030f 	and.w	r3, r3, #15
 8001e12:	4a17      	ldr	r2, [pc, #92]	; (8001e70 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001e14:	5cd3      	ldrb	r3, [r2, r3]
 8001e16:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d010      	beq.n	8001e44 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001e22:	4b11      	ldr	r3, [pc, #68]	; (8001e68 <HAL_RCC_GetSysClockFreq+0x94>)
 8001e24:	685b      	ldr	r3, [r3, #4]
 8001e26:	0c5b      	lsrs	r3, r3, #17
 8001e28:	f003 0301 	and.w	r3, r3, #1
 8001e2c:	4a11      	ldr	r2, [pc, #68]	; (8001e74 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001e2e:	5cd3      	ldrb	r3, [r2, r3]
 8001e30:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	4a0d      	ldr	r2, [pc, #52]	; (8001e6c <HAL_RCC_GetSysClockFreq+0x98>)
 8001e36:	fb03 f202 	mul.w	r2, r3, r2
 8001e3a:	68bb      	ldr	r3, [r7, #8]
 8001e3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e40:	617b      	str	r3, [r7, #20]
 8001e42:	e004      	b.n	8001e4e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	4a0c      	ldr	r2, [pc, #48]	; (8001e78 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001e48:	fb02 f303 	mul.w	r3, r2, r3
 8001e4c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001e4e:	697b      	ldr	r3, [r7, #20]
 8001e50:	613b      	str	r3, [r7, #16]
      break;
 8001e52:	e002      	b.n	8001e5a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001e54:	4b05      	ldr	r3, [pc, #20]	; (8001e6c <HAL_RCC_GetSysClockFreq+0x98>)
 8001e56:	613b      	str	r3, [r7, #16]
      break;
 8001e58:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001e5a:	693b      	ldr	r3, [r7, #16]
}
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	371c      	adds	r7, #28
 8001e60:	46bd      	mov	sp, r7
 8001e62:	bc80      	pop	{r7}
 8001e64:	4770      	bx	lr
 8001e66:	bf00      	nop
 8001e68:	40021000 	.word	0x40021000
 8001e6c:	007a1200 	.word	0x007a1200
 8001e70:	08003a8c 	.word	0x08003a8c
 8001e74:	08003a9c 	.word	0x08003a9c
 8001e78:	003d0900 	.word	0x003d0900

08001e7c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001e7c:	b480      	push	{r7}
 8001e7e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001e80:	4b02      	ldr	r3, [pc, #8]	; (8001e8c <HAL_RCC_GetHCLKFreq+0x10>)
 8001e82:	681b      	ldr	r3, [r3, #0]
}
 8001e84:	4618      	mov	r0, r3
 8001e86:	46bd      	mov	sp, r7
 8001e88:	bc80      	pop	{r7}
 8001e8a:	4770      	bx	lr
 8001e8c:	20000000 	.word	0x20000000

08001e90 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001e94:	f7ff fff2 	bl	8001e7c <HAL_RCC_GetHCLKFreq>
 8001e98:	4602      	mov	r2, r0
 8001e9a:	4b05      	ldr	r3, [pc, #20]	; (8001eb0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001e9c:	685b      	ldr	r3, [r3, #4]
 8001e9e:	0adb      	lsrs	r3, r3, #11
 8001ea0:	f003 0307 	and.w	r3, r3, #7
 8001ea4:	4903      	ldr	r1, [pc, #12]	; (8001eb4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001ea6:	5ccb      	ldrb	r3, [r1, r3]
 8001ea8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001eac:	4618      	mov	r0, r3
 8001eae:	bd80      	pop	{r7, pc}
 8001eb0:	40021000 	.word	0x40021000
 8001eb4:	08003a84 	.word	0x08003a84

08001eb8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001eb8:	b480      	push	{r7}
 8001eba:	b085      	sub	sp, #20
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001ec0:	4b0a      	ldr	r3, [pc, #40]	; (8001eec <RCC_Delay+0x34>)
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	4a0a      	ldr	r2, [pc, #40]	; (8001ef0 <RCC_Delay+0x38>)
 8001ec6:	fba2 2303 	umull	r2, r3, r2, r3
 8001eca:	0a5b      	lsrs	r3, r3, #9
 8001ecc:	687a      	ldr	r2, [r7, #4]
 8001ece:	fb02 f303 	mul.w	r3, r2, r3
 8001ed2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001ed4:	bf00      	nop
  }
  while (Delay --);
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	1e5a      	subs	r2, r3, #1
 8001eda:	60fa      	str	r2, [r7, #12]
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d1f9      	bne.n	8001ed4 <RCC_Delay+0x1c>
}
 8001ee0:	bf00      	nop
 8001ee2:	bf00      	nop
 8001ee4:	3714      	adds	r7, #20
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	bc80      	pop	{r7}
 8001eea:	4770      	bx	lr
 8001eec:	20000000 	.word	0x20000000
 8001ef0:	10624dd3 	.word	0x10624dd3

08001ef4 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	b086      	sub	sp, #24
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8001efc:	2300      	movs	r3, #0
 8001efe:	613b      	str	r3, [r7, #16]
 8001f00:	2300      	movs	r3, #0
 8001f02:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f003 0301 	and.w	r3, r3, #1
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d07d      	beq.n	800200c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8001f10:	2300      	movs	r3, #0
 8001f12:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f14:	4b4f      	ldr	r3, [pc, #316]	; (8002054 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001f16:	69db      	ldr	r3, [r3, #28]
 8001f18:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d10d      	bne.n	8001f3c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f20:	4b4c      	ldr	r3, [pc, #304]	; (8002054 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001f22:	69db      	ldr	r3, [r3, #28]
 8001f24:	4a4b      	ldr	r2, [pc, #300]	; (8002054 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001f26:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f2a:	61d3      	str	r3, [r2, #28]
 8001f2c:	4b49      	ldr	r3, [pc, #292]	; (8002054 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001f2e:	69db      	ldr	r3, [r3, #28]
 8001f30:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f34:	60bb      	str	r3, [r7, #8]
 8001f36:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f38:	2301      	movs	r3, #1
 8001f3a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f3c:	4b46      	ldr	r3, [pc, #280]	; (8002058 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d118      	bne.n	8001f7a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001f48:	4b43      	ldr	r3, [pc, #268]	; (8002058 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	4a42      	ldr	r2, [pc, #264]	; (8002058 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001f4e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f52:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f54:	f7fe fc6a 	bl	800082c <HAL_GetTick>
 8001f58:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f5a:	e008      	b.n	8001f6e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f5c:	f7fe fc66 	bl	800082c <HAL_GetTick>
 8001f60:	4602      	mov	r2, r0
 8001f62:	693b      	ldr	r3, [r7, #16]
 8001f64:	1ad3      	subs	r3, r2, r3
 8001f66:	2b64      	cmp	r3, #100	; 0x64
 8001f68:	d901      	bls.n	8001f6e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8001f6a:	2303      	movs	r3, #3
 8001f6c:	e06d      	b.n	800204a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f6e:	4b3a      	ldr	r3, [pc, #232]	; (8002058 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d0f0      	beq.n	8001f5c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001f7a:	4b36      	ldr	r3, [pc, #216]	; (8002054 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001f7c:	6a1b      	ldr	r3, [r3, #32]
 8001f7e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001f82:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d02e      	beq.n	8001fe8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	685b      	ldr	r3, [r3, #4]
 8001f8e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001f92:	68fa      	ldr	r2, [r7, #12]
 8001f94:	429a      	cmp	r2, r3
 8001f96:	d027      	beq.n	8001fe8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001f98:	4b2e      	ldr	r3, [pc, #184]	; (8002054 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001f9a:	6a1b      	ldr	r3, [r3, #32]
 8001f9c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001fa0:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001fa2:	4b2e      	ldr	r3, [pc, #184]	; (800205c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8001fa4:	2201      	movs	r2, #1
 8001fa6:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001fa8:	4b2c      	ldr	r3, [pc, #176]	; (800205c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8001faa:	2200      	movs	r2, #0
 8001fac:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001fae:	4a29      	ldr	r2, [pc, #164]	; (8002054 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	f003 0301 	and.w	r3, r3, #1
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d014      	beq.n	8001fe8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fbe:	f7fe fc35 	bl	800082c <HAL_GetTick>
 8001fc2:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001fc4:	e00a      	b.n	8001fdc <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001fc6:	f7fe fc31 	bl	800082c <HAL_GetTick>
 8001fca:	4602      	mov	r2, r0
 8001fcc:	693b      	ldr	r3, [r7, #16]
 8001fce:	1ad3      	subs	r3, r2, r3
 8001fd0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fd4:	4293      	cmp	r3, r2
 8001fd6:	d901      	bls.n	8001fdc <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8001fd8:	2303      	movs	r3, #3
 8001fda:	e036      	b.n	800204a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001fdc:	4b1d      	ldr	r3, [pc, #116]	; (8002054 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001fde:	6a1b      	ldr	r3, [r3, #32]
 8001fe0:	f003 0302 	and.w	r3, r3, #2
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d0ee      	beq.n	8001fc6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001fe8:	4b1a      	ldr	r3, [pc, #104]	; (8002054 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001fea:	6a1b      	ldr	r3, [r3, #32]
 8001fec:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	685b      	ldr	r3, [r3, #4]
 8001ff4:	4917      	ldr	r1, [pc, #92]	; (8002054 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001ff6:	4313      	orrs	r3, r2
 8001ff8:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001ffa:	7dfb      	ldrb	r3, [r7, #23]
 8001ffc:	2b01      	cmp	r3, #1
 8001ffe:	d105      	bne.n	800200c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002000:	4b14      	ldr	r3, [pc, #80]	; (8002054 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002002:	69db      	ldr	r3, [r3, #28]
 8002004:	4a13      	ldr	r2, [pc, #76]	; (8002054 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002006:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800200a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f003 0302 	and.w	r3, r3, #2
 8002014:	2b00      	cmp	r3, #0
 8002016:	d008      	beq.n	800202a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002018:	4b0e      	ldr	r3, [pc, #56]	; (8002054 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800201a:	685b      	ldr	r3, [r3, #4]
 800201c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	689b      	ldr	r3, [r3, #8]
 8002024:	490b      	ldr	r1, [pc, #44]	; (8002054 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002026:	4313      	orrs	r3, r2
 8002028:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f003 0310 	and.w	r3, r3, #16
 8002032:	2b00      	cmp	r3, #0
 8002034:	d008      	beq.n	8002048 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002036:	4b07      	ldr	r3, [pc, #28]	; (8002054 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002038:	685b      	ldr	r3, [r3, #4]
 800203a:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	68db      	ldr	r3, [r3, #12]
 8002042:	4904      	ldr	r1, [pc, #16]	; (8002054 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002044:	4313      	orrs	r3, r2
 8002046:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002048:	2300      	movs	r3, #0
}
 800204a:	4618      	mov	r0, r3
 800204c:	3718      	adds	r7, #24
 800204e:	46bd      	mov	sp, r7
 8002050:	bd80      	pop	{r7, pc}
 8002052:	bf00      	nop
 8002054:	40021000 	.word	0x40021000
 8002058:	40007000 	.word	0x40007000
 800205c:	42420440 	.word	0x42420440

08002060 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	b088      	sub	sp, #32
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8002068:	2300      	movs	r3, #0
 800206a:	617b      	str	r3, [r7, #20]
 800206c:	2300      	movs	r3, #0
 800206e:	61fb      	str	r3, [r7, #28]
 8002070:	2300      	movs	r3, #0
 8002072:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8002074:	2300      	movs	r3, #0
 8002076:	60fb      	str	r3, [r7, #12]
 8002078:	2300      	movs	r3, #0
 800207a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	2b10      	cmp	r3, #16
 8002080:	d00a      	beq.n	8002098 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	2b10      	cmp	r3, #16
 8002086:	f200 808a 	bhi.w	800219e <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	2b01      	cmp	r3, #1
 800208e:	d045      	beq.n	800211c <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	2b02      	cmp	r3, #2
 8002094:	d075      	beq.n	8002182 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8002096:	e082      	b.n	800219e <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 8002098:	4b46      	ldr	r3, [pc, #280]	; (80021b4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800209a:	685b      	ldr	r3, [r3, #4]
 800209c:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 800209e:	4b45      	ldr	r3, [pc, #276]	; (80021b4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d07b      	beq.n	80021a2 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	0c9b      	lsrs	r3, r3, #18
 80020ae:	f003 030f 	and.w	r3, r3, #15
 80020b2:	4a41      	ldr	r2, [pc, #260]	; (80021b8 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 80020b4:	5cd3      	ldrb	r3, [r2, r3]
 80020b6:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d015      	beq.n	80020ee <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80020c2:	4b3c      	ldr	r3, [pc, #240]	; (80021b4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80020c4:	685b      	ldr	r3, [r3, #4]
 80020c6:	0c5b      	lsrs	r3, r3, #17
 80020c8:	f003 0301 	and.w	r3, r3, #1
 80020cc:	4a3b      	ldr	r2, [pc, #236]	; (80021bc <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 80020ce:	5cd3      	ldrb	r3, [r2, r3]
 80020d0:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d00d      	beq.n	80020f8 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 80020dc:	4a38      	ldr	r2, [pc, #224]	; (80021c0 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 80020de:	697b      	ldr	r3, [r7, #20]
 80020e0:	fbb2 f2f3 	udiv	r2, r2, r3
 80020e4:	693b      	ldr	r3, [r7, #16]
 80020e6:	fb02 f303 	mul.w	r3, r2, r3
 80020ea:	61fb      	str	r3, [r7, #28]
 80020ec:	e004      	b.n	80020f8 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80020ee:	693b      	ldr	r3, [r7, #16]
 80020f0:	4a34      	ldr	r2, [pc, #208]	; (80021c4 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 80020f2:	fb02 f303 	mul.w	r3, r2, r3
 80020f6:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 80020f8:	4b2e      	ldr	r3, [pc, #184]	; (80021b4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80020fa:	685b      	ldr	r3, [r3, #4]
 80020fc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002100:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002104:	d102      	bne.n	800210c <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 8002106:	69fb      	ldr	r3, [r7, #28]
 8002108:	61bb      	str	r3, [r7, #24]
      break;
 800210a:	e04a      	b.n	80021a2 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 800210c:	69fb      	ldr	r3, [r7, #28]
 800210e:	005b      	lsls	r3, r3, #1
 8002110:	4a2d      	ldr	r2, [pc, #180]	; (80021c8 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8002112:	fba2 2303 	umull	r2, r3, r2, r3
 8002116:	085b      	lsrs	r3, r3, #1
 8002118:	61bb      	str	r3, [r7, #24]
      break;
 800211a:	e042      	b.n	80021a2 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 800211c:	4b25      	ldr	r3, [pc, #148]	; (80021b4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800211e:	6a1b      	ldr	r3, [r3, #32]
 8002120:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002128:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800212c:	d108      	bne.n	8002140 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	f003 0302 	and.w	r3, r3, #2
 8002134:	2b00      	cmp	r3, #0
 8002136:	d003      	beq.n	8002140 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 8002138:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800213c:	61bb      	str	r3, [r7, #24]
 800213e:	e01f      	b.n	8002180 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002146:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800214a:	d109      	bne.n	8002160 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 800214c:	4b19      	ldr	r3, [pc, #100]	; (80021b4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800214e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002150:	f003 0302 	and.w	r3, r3, #2
 8002154:	2b00      	cmp	r3, #0
 8002156:	d003      	beq.n	8002160 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 8002158:	f649 4340 	movw	r3, #40000	; 0x9c40
 800215c:	61bb      	str	r3, [r7, #24]
 800215e:	e00f      	b.n	8002180 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002166:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800216a:	d11c      	bne.n	80021a6 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 800216c:	4b11      	ldr	r3, [pc, #68]	; (80021b4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002174:	2b00      	cmp	r3, #0
 8002176:	d016      	beq.n	80021a6 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 8002178:	f24f 4324 	movw	r3, #62500	; 0xf424
 800217c:	61bb      	str	r3, [r7, #24]
      break;
 800217e:	e012      	b.n	80021a6 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8002180:	e011      	b.n	80021a6 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8002182:	f7ff fe85 	bl	8001e90 <HAL_RCC_GetPCLK2Freq>
 8002186:	4602      	mov	r2, r0
 8002188:	4b0a      	ldr	r3, [pc, #40]	; (80021b4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800218a:	685b      	ldr	r3, [r3, #4]
 800218c:	0b9b      	lsrs	r3, r3, #14
 800218e:	f003 0303 	and.w	r3, r3, #3
 8002192:	3301      	adds	r3, #1
 8002194:	005b      	lsls	r3, r3, #1
 8002196:	fbb2 f3f3 	udiv	r3, r2, r3
 800219a:	61bb      	str	r3, [r7, #24]
      break;
 800219c:	e004      	b.n	80021a8 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 800219e:	bf00      	nop
 80021a0:	e002      	b.n	80021a8 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 80021a2:	bf00      	nop
 80021a4:	e000      	b.n	80021a8 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 80021a6:	bf00      	nop
    }
  }
  return (frequency);
 80021a8:	69bb      	ldr	r3, [r7, #24]
}
 80021aa:	4618      	mov	r0, r3
 80021ac:	3720      	adds	r7, #32
 80021ae:	46bd      	mov	sp, r7
 80021b0:	bd80      	pop	{r7, pc}
 80021b2:	bf00      	nop
 80021b4:	40021000 	.word	0x40021000
 80021b8:	08003aa0 	.word	0x08003aa0
 80021bc:	08003ab0 	.word	0x08003ab0
 80021c0:	007a1200 	.word	0x007a1200
 80021c4:	003d0900 	.word	0x003d0900
 80021c8:	aaaaaaab 	.word	0xaaaaaaab

080021cc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b082      	sub	sp, #8
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d101      	bne.n	80021de <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80021da:	2301      	movs	r3, #1
 80021dc:	e041      	b.n	8002262 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80021e4:	b2db      	uxtb	r3, r3
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d106      	bne.n	80021f8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	2200      	movs	r2, #0
 80021ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80021f2:	6878      	ldr	r0, [r7, #4]
 80021f4:	f7fe f984 	bl	8000500 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	2202      	movs	r2, #2
 80021fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681a      	ldr	r2, [r3, #0]
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	3304      	adds	r3, #4
 8002208:	4619      	mov	r1, r3
 800220a:	4610      	mov	r0, r2
 800220c:	f000 fa10 	bl	8002630 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	2201      	movs	r2, #1
 8002214:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	2201      	movs	r2, #1
 800221c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	2201      	movs	r2, #1
 8002224:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	2201      	movs	r2, #1
 800222c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	2201      	movs	r2, #1
 8002234:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	2201      	movs	r2, #1
 800223c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	2201      	movs	r2, #1
 8002244:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	2201      	movs	r2, #1
 800224c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	2201      	movs	r2, #1
 8002254:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	2201      	movs	r2, #1
 800225c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002260:	2300      	movs	r3, #0
}
 8002262:	4618      	mov	r0, r3
 8002264:	3708      	adds	r7, #8
 8002266:	46bd      	mov	sp, r7
 8002268:	bd80      	pop	{r7, pc}

0800226a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800226a:	b580      	push	{r7, lr}
 800226c:	b082      	sub	sp, #8
 800226e:	af00      	add	r7, sp, #0
 8002270:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	2b00      	cmp	r3, #0
 8002276:	d101      	bne.n	800227c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002278:	2301      	movs	r3, #1
 800227a:	e041      	b.n	8002300 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002282:	b2db      	uxtb	r3, r3
 8002284:	2b00      	cmp	r3, #0
 8002286:	d106      	bne.n	8002296 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	2200      	movs	r2, #0
 800228c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002290:	6878      	ldr	r0, [r7, #4]
 8002292:	f000 f839 	bl	8002308 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	2202      	movs	r2, #2
 800229a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681a      	ldr	r2, [r3, #0]
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	3304      	adds	r3, #4
 80022a6:	4619      	mov	r1, r3
 80022a8:	4610      	mov	r0, r2
 80022aa:	f000 f9c1 	bl	8002630 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	2201      	movs	r2, #1
 80022b2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	2201      	movs	r2, #1
 80022ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	2201      	movs	r2, #1
 80022c2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	2201      	movs	r2, #1
 80022ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	2201      	movs	r2, #1
 80022d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	2201      	movs	r2, #1
 80022da:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	2201      	movs	r2, #1
 80022e2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	2201      	movs	r2, #1
 80022ea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	2201      	movs	r2, #1
 80022f2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	2201      	movs	r2, #1
 80022fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80022fe:	2300      	movs	r3, #0
}
 8002300:	4618      	mov	r0, r3
 8002302:	3708      	adds	r7, #8
 8002304:	46bd      	mov	sp, r7
 8002306:	bd80      	pop	{r7, pc}

08002308 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002308:	b480      	push	{r7}
 800230a:	b083      	sub	sp, #12
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002310:	bf00      	nop
 8002312:	370c      	adds	r7, #12
 8002314:	46bd      	mov	sp, r7
 8002316:	bc80      	pop	{r7}
 8002318:	4770      	bx	lr
	...

0800231c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800231c:	b580      	push	{r7, lr}
 800231e:	b086      	sub	sp, #24
 8002320:	af00      	add	r7, sp, #0
 8002322:	60f8      	str	r0, [r7, #12]
 8002324:	60b9      	str	r1, [r7, #8]
 8002326:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002328:	2300      	movs	r3, #0
 800232a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002332:	2b01      	cmp	r3, #1
 8002334:	d101      	bne.n	800233a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002336:	2302      	movs	r3, #2
 8002338:	e0ae      	b.n	8002498 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	2201      	movs	r2, #1
 800233e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	2b0c      	cmp	r3, #12
 8002346:	f200 809f 	bhi.w	8002488 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800234a:	a201      	add	r2, pc, #4	; (adr r2, 8002350 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800234c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002350:	08002385 	.word	0x08002385
 8002354:	08002489 	.word	0x08002489
 8002358:	08002489 	.word	0x08002489
 800235c:	08002489 	.word	0x08002489
 8002360:	080023c5 	.word	0x080023c5
 8002364:	08002489 	.word	0x08002489
 8002368:	08002489 	.word	0x08002489
 800236c:	08002489 	.word	0x08002489
 8002370:	08002407 	.word	0x08002407
 8002374:	08002489 	.word	0x08002489
 8002378:	08002489 	.word	0x08002489
 800237c:	08002489 	.word	0x08002489
 8002380:	08002447 	.word	0x08002447
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	68b9      	ldr	r1, [r7, #8]
 800238a:	4618      	mov	r0, r3
 800238c:	f000 f9a8 	bl	80026e0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	699a      	ldr	r2, [r3, #24]
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f042 0208 	orr.w	r2, r2, #8
 800239e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	699a      	ldr	r2, [r3, #24]
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f022 0204 	bic.w	r2, r2, #4
 80023ae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	6999      	ldr	r1, [r3, #24]
 80023b6:	68bb      	ldr	r3, [r7, #8]
 80023b8:	691a      	ldr	r2, [r3, #16]
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	430a      	orrs	r2, r1
 80023c0:	619a      	str	r2, [r3, #24]
      break;
 80023c2:	e064      	b.n	800248e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	68b9      	ldr	r1, [r7, #8]
 80023ca:	4618      	mov	r0, r3
 80023cc:	f000 f9ee 	bl	80027ac <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	699a      	ldr	r2, [r3, #24]
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80023de:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	699a      	ldr	r2, [r3, #24]
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80023ee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	6999      	ldr	r1, [r3, #24]
 80023f6:	68bb      	ldr	r3, [r7, #8]
 80023f8:	691b      	ldr	r3, [r3, #16]
 80023fa:	021a      	lsls	r2, r3, #8
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	430a      	orrs	r2, r1
 8002402:	619a      	str	r2, [r3, #24]
      break;
 8002404:	e043      	b.n	800248e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	68b9      	ldr	r1, [r7, #8]
 800240c:	4618      	mov	r0, r3
 800240e:	f000 fa37 	bl	8002880 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	69da      	ldr	r2, [r3, #28]
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f042 0208 	orr.w	r2, r2, #8
 8002420:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	69da      	ldr	r2, [r3, #28]
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f022 0204 	bic.w	r2, r2, #4
 8002430:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	69d9      	ldr	r1, [r3, #28]
 8002438:	68bb      	ldr	r3, [r7, #8]
 800243a:	691a      	ldr	r2, [r3, #16]
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	430a      	orrs	r2, r1
 8002442:	61da      	str	r2, [r3, #28]
      break;
 8002444:	e023      	b.n	800248e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	68b9      	ldr	r1, [r7, #8]
 800244c:	4618      	mov	r0, r3
 800244e:	f000 fa81 	bl	8002954 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	69da      	ldr	r2, [r3, #28]
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002460:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	69da      	ldr	r2, [r3, #28]
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002470:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	69d9      	ldr	r1, [r3, #28]
 8002478:	68bb      	ldr	r3, [r7, #8]
 800247a:	691b      	ldr	r3, [r3, #16]
 800247c:	021a      	lsls	r2, r3, #8
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	430a      	orrs	r2, r1
 8002484:	61da      	str	r2, [r3, #28]
      break;
 8002486:	e002      	b.n	800248e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8002488:	2301      	movs	r3, #1
 800248a:	75fb      	strb	r3, [r7, #23]
      break;
 800248c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	2200      	movs	r2, #0
 8002492:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002496:	7dfb      	ldrb	r3, [r7, #23]
}
 8002498:	4618      	mov	r0, r3
 800249a:	3718      	adds	r7, #24
 800249c:	46bd      	mov	sp, r7
 800249e:	bd80      	pop	{r7, pc}

080024a0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	b084      	sub	sp, #16
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]
 80024a8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80024aa:	2300      	movs	r3, #0
 80024ac:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80024b4:	2b01      	cmp	r3, #1
 80024b6:	d101      	bne.n	80024bc <HAL_TIM_ConfigClockSource+0x1c>
 80024b8:	2302      	movs	r3, #2
 80024ba:	e0b4      	b.n	8002626 <HAL_TIM_ConfigClockSource+0x186>
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	2201      	movs	r2, #1
 80024c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	2202      	movs	r2, #2
 80024c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	689b      	ldr	r3, [r3, #8]
 80024d2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80024d4:	68bb      	ldr	r3, [r7, #8]
 80024d6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80024da:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80024dc:	68bb      	ldr	r3, [r7, #8]
 80024de:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80024e2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	68ba      	ldr	r2, [r7, #8]
 80024ea:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80024ec:	683b      	ldr	r3, [r7, #0]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80024f4:	d03e      	beq.n	8002574 <HAL_TIM_ConfigClockSource+0xd4>
 80024f6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80024fa:	f200 8087 	bhi.w	800260c <HAL_TIM_ConfigClockSource+0x16c>
 80024fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002502:	f000 8086 	beq.w	8002612 <HAL_TIM_ConfigClockSource+0x172>
 8002506:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800250a:	d87f      	bhi.n	800260c <HAL_TIM_ConfigClockSource+0x16c>
 800250c:	2b70      	cmp	r3, #112	; 0x70
 800250e:	d01a      	beq.n	8002546 <HAL_TIM_ConfigClockSource+0xa6>
 8002510:	2b70      	cmp	r3, #112	; 0x70
 8002512:	d87b      	bhi.n	800260c <HAL_TIM_ConfigClockSource+0x16c>
 8002514:	2b60      	cmp	r3, #96	; 0x60
 8002516:	d050      	beq.n	80025ba <HAL_TIM_ConfigClockSource+0x11a>
 8002518:	2b60      	cmp	r3, #96	; 0x60
 800251a:	d877      	bhi.n	800260c <HAL_TIM_ConfigClockSource+0x16c>
 800251c:	2b50      	cmp	r3, #80	; 0x50
 800251e:	d03c      	beq.n	800259a <HAL_TIM_ConfigClockSource+0xfa>
 8002520:	2b50      	cmp	r3, #80	; 0x50
 8002522:	d873      	bhi.n	800260c <HAL_TIM_ConfigClockSource+0x16c>
 8002524:	2b40      	cmp	r3, #64	; 0x40
 8002526:	d058      	beq.n	80025da <HAL_TIM_ConfigClockSource+0x13a>
 8002528:	2b40      	cmp	r3, #64	; 0x40
 800252a:	d86f      	bhi.n	800260c <HAL_TIM_ConfigClockSource+0x16c>
 800252c:	2b30      	cmp	r3, #48	; 0x30
 800252e:	d064      	beq.n	80025fa <HAL_TIM_ConfigClockSource+0x15a>
 8002530:	2b30      	cmp	r3, #48	; 0x30
 8002532:	d86b      	bhi.n	800260c <HAL_TIM_ConfigClockSource+0x16c>
 8002534:	2b20      	cmp	r3, #32
 8002536:	d060      	beq.n	80025fa <HAL_TIM_ConfigClockSource+0x15a>
 8002538:	2b20      	cmp	r3, #32
 800253a:	d867      	bhi.n	800260c <HAL_TIM_ConfigClockSource+0x16c>
 800253c:	2b00      	cmp	r3, #0
 800253e:	d05c      	beq.n	80025fa <HAL_TIM_ConfigClockSource+0x15a>
 8002540:	2b10      	cmp	r3, #16
 8002542:	d05a      	beq.n	80025fa <HAL_TIM_ConfigClockSource+0x15a>
 8002544:	e062      	b.n	800260c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800254a:	683b      	ldr	r3, [r7, #0]
 800254c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800254e:	683b      	ldr	r3, [r7, #0]
 8002550:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002552:	683b      	ldr	r3, [r7, #0]
 8002554:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002556:	f000 fac2 	bl	8002ade <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	689b      	ldr	r3, [r3, #8]
 8002560:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002562:	68bb      	ldr	r3, [r7, #8]
 8002564:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002568:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	68ba      	ldr	r2, [r7, #8]
 8002570:	609a      	str	r2, [r3, #8]
      break;
 8002572:	e04f      	b.n	8002614 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002578:	683b      	ldr	r3, [r7, #0]
 800257a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800257c:	683b      	ldr	r3, [r7, #0]
 800257e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002580:	683b      	ldr	r3, [r7, #0]
 8002582:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002584:	f000 faab 	bl	8002ade <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	689a      	ldr	r2, [r3, #8]
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002596:	609a      	str	r2, [r3, #8]
      break;
 8002598:	e03c      	b.n	8002614 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800259e:	683b      	ldr	r3, [r7, #0]
 80025a0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80025a2:	683b      	ldr	r3, [r7, #0]
 80025a4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80025a6:	461a      	mov	r2, r3
 80025a8:	f000 fa22 	bl	80029f0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	2150      	movs	r1, #80	; 0x50
 80025b2:	4618      	mov	r0, r3
 80025b4:	f000 fa79 	bl	8002aaa <TIM_ITRx_SetConfig>
      break;
 80025b8:	e02c      	b.n	8002614 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80025be:	683b      	ldr	r3, [r7, #0]
 80025c0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80025c2:	683b      	ldr	r3, [r7, #0]
 80025c4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80025c6:	461a      	mov	r2, r3
 80025c8:	f000 fa40 	bl	8002a4c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	2160      	movs	r1, #96	; 0x60
 80025d2:	4618      	mov	r0, r3
 80025d4:	f000 fa69 	bl	8002aaa <TIM_ITRx_SetConfig>
      break;
 80025d8:	e01c      	b.n	8002614 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80025de:	683b      	ldr	r3, [r7, #0]
 80025e0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80025e2:	683b      	ldr	r3, [r7, #0]
 80025e4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80025e6:	461a      	mov	r2, r3
 80025e8:	f000 fa02 	bl	80029f0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	2140      	movs	r1, #64	; 0x40
 80025f2:	4618      	mov	r0, r3
 80025f4:	f000 fa59 	bl	8002aaa <TIM_ITRx_SetConfig>
      break;
 80025f8:	e00c      	b.n	8002614 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681a      	ldr	r2, [r3, #0]
 80025fe:	683b      	ldr	r3, [r7, #0]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	4619      	mov	r1, r3
 8002604:	4610      	mov	r0, r2
 8002606:	f000 fa50 	bl	8002aaa <TIM_ITRx_SetConfig>
      break;
 800260a:	e003      	b.n	8002614 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800260c:	2301      	movs	r3, #1
 800260e:	73fb      	strb	r3, [r7, #15]
      break;
 8002610:	e000      	b.n	8002614 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002612:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	2201      	movs	r2, #1
 8002618:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	2200      	movs	r2, #0
 8002620:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002624:	7bfb      	ldrb	r3, [r7, #15]
}
 8002626:	4618      	mov	r0, r3
 8002628:	3710      	adds	r7, #16
 800262a:	46bd      	mov	sp, r7
 800262c:	bd80      	pop	{r7, pc}
	...

08002630 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002630:	b480      	push	{r7}
 8002632:	b085      	sub	sp, #20
 8002634:	af00      	add	r7, sp, #0
 8002636:	6078      	str	r0, [r7, #4]
 8002638:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	4a25      	ldr	r2, [pc, #148]	; (80026d8 <TIM_Base_SetConfig+0xa8>)
 8002644:	4293      	cmp	r3, r2
 8002646:	d007      	beq.n	8002658 <TIM_Base_SetConfig+0x28>
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800264e:	d003      	beq.n	8002658 <TIM_Base_SetConfig+0x28>
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	4a22      	ldr	r2, [pc, #136]	; (80026dc <TIM_Base_SetConfig+0xac>)
 8002654:	4293      	cmp	r3, r2
 8002656:	d108      	bne.n	800266a <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800265e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002660:	683b      	ldr	r3, [r7, #0]
 8002662:	685b      	ldr	r3, [r3, #4]
 8002664:	68fa      	ldr	r2, [r7, #12]
 8002666:	4313      	orrs	r3, r2
 8002668:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	4a1a      	ldr	r2, [pc, #104]	; (80026d8 <TIM_Base_SetConfig+0xa8>)
 800266e:	4293      	cmp	r3, r2
 8002670:	d007      	beq.n	8002682 <TIM_Base_SetConfig+0x52>
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002678:	d003      	beq.n	8002682 <TIM_Base_SetConfig+0x52>
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	4a17      	ldr	r2, [pc, #92]	; (80026dc <TIM_Base_SetConfig+0xac>)
 800267e:	4293      	cmp	r3, r2
 8002680:	d108      	bne.n	8002694 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002688:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800268a:	683b      	ldr	r3, [r7, #0]
 800268c:	68db      	ldr	r3, [r3, #12]
 800268e:	68fa      	ldr	r2, [r7, #12]
 8002690:	4313      	orrs	r3, r2
 8002692:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800269a:	683b      	ldr	r3, [r7, #0]
 800269c:	695b      	ldr	r3, [r3, #20]
 800269e:	4313      	orrs	r3, r2
 80026a0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	68fa      	ldr	r2, [r7, #12]
 80026a6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80026a8:	683b      	ldr	r3, [r7, #0]
 80026aa:	689a      	ldr	r2, [r3, #8]
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80026b0:	683b      	ldr	r3, [r7, #0]
 80026b2:	681a      	ldr	r2, [r3, #0]
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	4a07      	ldr	r2, [pc, #28]	; (80026d8 <TIM_Base_SetConfig+0xa8>)
 80026bc:	4293      	cmp	r3, r2
 80026be:	d103      	bne.n	80026c8 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80026c0:	683b      	ldr	r3, [r7, #0]
 80026c2:	691a      	ldr	r2, [r3, #16]
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	2201      	movs	r2, #1
 80026cc:	615a      	str	r2, [r3, #20]
}
 80026ce:	bf00      	nop
 80026d0:	3714      	adds	r7, #20
 80026d2:	46bd      	mov	sp, r7
 80026d4:	bc80      	pop	{r7}
 80026d6:	4770      	bx	lr
 80026d8:	40012c00 	.word	0x40012c00
 80026dc:	40000400 	.word	0x40000400

080026e0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80026e0:	b480      	push	{r7}
 80026e2:	b087      	sub	sp, #28
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	6078      	str	r0, [r7, #4]
 80026e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	6a1b      	ldr	r3, [r3, #32]
 80026ee:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	6a1b      	ldr	r3, [r3, #32]
 80026f4:	f023 0201 	bic.w	r2, r3, #1
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	685b      	ldr	r3, [r3, #4]
 8002700:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	699b      	ldr	r3, [r3, #24]
 8002706:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800270e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	f023 0303 	bic.w	r3, r3, #3
 8002716:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002718:	683b      	ldr	r3, [r7, #0]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	68fa      	ldr	r2, [r7, #12]
 800271e:	4313      	orrs	r3, r2
 8002720:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002722:	697b      	ldr	r3, [r7, #20]
 8002724:	f023 0302 	bic.w	r3, r3, #2
 8002728:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800272a:	683b      	ldr	r3, [r7, #0]
 800272c:	689b      	ldr	r3, [r3, #8]
 800272e:	697a      	ldr	r2, [r7, #20]
 8002730:	4313      	orrs	r3, r2
 8002732:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	4a1c      	ldr	r2, [pc, #112]	; (80027a8 <TIM_OC1_SetConfig+0xc8>)
 8002738:	4293      	cmp	r3, r2
 800273a:	d10c      	bne.n	8002756 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800273c:	697b      	ldr	r3, [r7, #20]
 800273e:	f023 0308 	bic.w	r3, r3, #8
 8002742:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002744:	683b      	ldr	r3, [r7, #0]
 8002746:	68db      	ldr	r3, [r3, #12]
 8002748:	697a      	ldr	r2, [r7, #20]
 800274a:	4313      	orrs	r3, r2
 800274c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800274e:	697b      	ldr	r3, [r7, #20]
 8002750:	f023 0304 	bic.w	r3, r3, #4
 8002754:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	4a13      	ldr	r2, [pc, #76]	; (80027a8 <TIM_OC1_SetConfig+0xc8>)
 800275a:	4293      	cmp	r3, r2
 800275c:	d111      	bne.n	8002782 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800275e:	693b      	ldr	r3, [r7, #16]
 8002760:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002764:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002766:	693b      	ldr	r3, [r7, #16]
 8002768:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800276c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800276e:	683b      	ldr	r3, [r7, #0]
 8002770:	695b      	ldr	r3, [r3, #20]
 8002772:	693a      	ldr	r2, [r7, #16]
 8002774:	4313      	orrs	r3, r2
 8002776:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002778:	683b      	ldr	r3, [r7, #0]
 800277a:	699b      	ldr	r3, [r3, #24]
 800277c:	693a      	ldr	r2, [r7, #16]
 800277e:	4313      	orrs	r3, r2
 8002780:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	693a      	ldr	r2, [r7, #16]
 8002786:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	68fa      	ldr	r2, [r7, #12]
 800278c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800278e:	683b      	ldr	r3, [r7, #0]
 8002790:	685a      	ldr	r2, [r3, #4]
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	697a      	ldr	r2, [r7, #20]
 800279a:	621a      	str	r2, [r3, #32]
}
 800279c:	bf00      	nop
 800279e:	371c      	adds	r7, #28
 80027a0:	46bd      	mov	sp, r7
 80027a2:	bc80      	pop	{r7}
 80027a4:	4770      	bx	lr
 80027a6:	bf00      	nop
 80027a8:	40012c00 	.word	0x40012c00

080027ac <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80027ac:	b480      	push	{r7}
 80027ae:	b087      	sub	sp, #28
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	6078      	str	r0, [r7, #4]
 80027b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	6a1b      	ldr	r3, [r3, #32]
 80027ba:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	6a1b      	ldr	r3, [r3, #32]
 80027c0:	f023 0210 	bic.w	r2, r3, #16
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	685b      	ldr	r3, [r3, #4]
 80027cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	699b      	ldr	r3, [r3, #24]
 80027d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80027da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80027e2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80027e4:	683b      	ldr	r3, [r7, #0]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	021b      	lsls	r3, r3, #8
 80027ea:	68fa      	ldr	r2, [r7, #12]
 80027ec:	4313      	orrs	r3, r2
 80027ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80027f0:	697b      	ldr	r3, [r7, #20]
 80027f2:	f023 0320 	bic.w	r3, r3, #32
 80027f6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80027f8:	683b      	ldr	r3, [r7, #0]
 80027fa:	689b      	ldr	r3, [r3, #8]
 80027fc:	011b      	lsls	r3, r3, #4
 80027fe:	697a      	ldr	r2, [r7, #20]
 8002800:	4313      	orrs	r3, r2
 8002802:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	4a1d      	ldr	r2, [pc, #116]	; (800287c <TIM_OC2_SetConfig+0xd0>)
 8002808:	4293      	cmp	r3, r2
 800280a:	d10d      	bne.n	8002828 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800280c:	697b      	ldr	r3, [r7, #20]
 800280e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002812:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002814:	683b      	ldr	r3, [r7, #0]
 8002816:	68db      	ldr	r3, [r3, #12]
 8002818:	011b      	lsls	r3, r3, #4
 800281a:	697a      	ldr	r2, [r7, #20]
 800281c:	4313      	orrs	r3, r2
 800281e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002820:	697b      	ldr	r3, [r7, #20]
 8002822:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002826:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	4a14      	ldr	r2, [pc, #80]	; (800287c <TIM_OC2_SetConfig+0xd0>)
 800282c:	4293      	cmp	r3, r2
 800282e:	d113      	bne.n	8002858 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002830:	693b      	ldr	r3, [r7, #16]
 8002832:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002836:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002838:	693b      	ldr	r3, [r7, #16]
 800283a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800283e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	695b      	ldr	r3, [r3, #20]
 8002844:	009b      	lsls	r3, r3, #2
 8002846:	693a      	ldr	r2, [r7, #16]
 8002848:	4313      	orrs	r3, r2
 800284a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800284c:	683b      	ldr	r3, [r7, #0]
 800284e:	699b      	ldr	r3, [r3, #24]
 8002850:	009b      	lsls	r3, r3, #2
 8002852:	693a      	ldr	r2, [r7, #16]
 8002854:	4313      	orrs	r3, r2
 8002856:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	693a      	ldr	r2, [r7, #16]
 800285c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	68fa      	ldr	r2, [r7, #12]
 8002862:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002864:	683b      	ldr	r3, [r7, #0]
 8002866:	685a      	ldr	r2, [r3, #4]
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	697a      	ldr	r2, [r7, #20]
 8002870:	621a      	str	r2, [r3, #32]
}
 8002872:	bf00      	nop
 8002874:	371c      	adds	r7, #28
 8002876:	46bd      	mov	sp, r7
 8002878:	bc80      	pop	{r7}
 800287a:	4770      	bx	lr
 800287c:	40012c00 	.word	0x40012c00

08002880 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002880:	b480      	push	{r7}
 8002882:	b087      	sub	sp, #28
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]
 8002888:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	6a1b      	ldr	r3, [r3, #32]
 800288e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	6a1b      	ldr	r3, [r3, #32]
 8002894:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	685b      	ldr	r3, [r3, #4]
 80028a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	69db      	ldr	r3, [r3, #28]
 80028a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80028ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	f023 0303 	bic.w	r3, r3, #3
 80028b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80028b8:	683b      	ldr	r3, [r7, #0]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	68fa      	ldr	r2, [r7, #12]
 80028be:	4313      	orrs	r3, r2
 80028c0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80028c2:	697b      	ldr	r3, [r7, #20]
 80028c4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80028c8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80028ca:	683b      	ldr	r3, [r7, #0]
 80028cc:	689b      	ldr	r3, [r3, #8]
 80028ce:	021b      	lsls	r3, r3, #8
 80028d0:	697a      	ldr	r2, [r7, #20]
 80028d2:	4313      	orrs	r3, r2
 80028d4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	4a1d      	ldr	r2, [pc, #116]	; (8002950 <TIM_OC3_SetConfig+0xd0>)
 80028da:	4293      	cmp	r3, r2
 80028dc:	d10d      	bne.n	80028fa <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80028de:	697b      	ldr	r3, [r7, #20]
 80028e0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80028e4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80028e6:	683b      	ldr	r3, [r7, #0]
 80028e8:	68db      	ldr	r3, [r3, #12]
 80028ea:	021b      	lsls	r3, r3, #8
 80028ec:	697a      	ldr	r2, [r7, #20]
 80028ee:	4313      	orrs	r3, r2
 80028f0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80028f2:	697b      	ldr	r3, [r7, #20]
 80028f4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80028f8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	4a14      	ldr	r2, [pc, #80]	; (8002950 <TIM_OC3_SetConfig+0xd0>)
 80028fe:	4293      	cmp	r3, r2
 8002900:	d113      	bne.n	800292a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002902:	693b      	ldr	r3, [r7, #16]
 8002904:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002908:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800290a:	693b      	ldr	r3, [r7, #16]
 800290c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002910:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002912:	683b      	ldr	r3, [r7, #0]
 8002914:	695b      	ldr	r3, [r3, #20]
 8002916:	011b      	lsls	r3, r3, #4
 8002918:	693a      	ldr	r2, [r7, #16]
 800291a:	4313      	orrs	r3, r2
 800291c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800291e:	683b      	ldr	r3, [r7, #0]
 8002920:	699b      	ldr	r3, [r3, #24]
 8002922:	011b      	lsls	r3, r3, #4
 8002924:	693a      	ldr	r2, [r7, #16]
 8002926:	4313      	orrs	r3, r2
 8002928:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	693a      	ldr	r2, [r7, #16]
 800292e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	68fa      	ldr	r2, [r7, #12]
 8002934:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002936:	683b      	ldr	r3, [r7, #0]
 8002938:	685a      	ldr	r2, [r3, #4]
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	697a      	ldr	r2, [r7, #20]
 8002942:	621a      	str	r2, [r3, #32]
}
 8002944:	bf00      	nop
 8002946:	371c      	adds	r7, #28
 8002948:	46bd      	mov	sp, r7
 800294a:	bc80      	pop	{r7}
 800294c:	4770      	bx	lr
 800294e:	bf00      	nop
 8002950:	40012c00 	.word	0x40012c00

08002954 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002954:	b480      	push	{r7}
 8002956:	b087      	sub	sp, #28
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]
 800295c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	6a1b      	ldr	r3, [r3, #32]
 8002962:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	6a1b      	ldr	r3, [r3, #32]
 8002968:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	685b      	ldr	r3, [r3, #4]
 8002974:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	69db      	ldr	r3, [r3, #28]
 800297a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002982:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800298a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800298c:	683b      	ldr	r3, [r7, #0]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	021b      	lsls	r3, r3, #8
 8002992:	68fa      	ldr	r2, [r7, #12]
 8002994:	4313      	orrs	r3, r2
 8002996:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002998:	693b      	ldr	r3, [r7, #16]
 800299a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800299e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80029a0:	683b      	ldr	r3, [r7, #0]
 80029a2:	689b      	ldr	r3, [r3, #8]
 80029a4:	031b      	lsls	r3, r3, #12
 80029a6:	693a      	ldr	r2, [r7, #16]
 80029a8:	4313      	orrs	r3, r2
 80029aa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	4a0f      	ldr	r2, [pc, #60]	; (80029ec <TIM_OC4_SetConfig+0x98>)
 80029b0:	4293      	cmp	r3, r2
 80029b2:	d109      	bne.n	80029c8 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80029b4:	697b      	ldr	r3, [r7, #20]
 80029b6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80029ba:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80029bc:	683b      	ldr	r3, [r7, #0]
 80029be:	695b      	ldr	r3, [r3, #20]
 80029c0:	019b      	lsls	r3, r3, #6
 80029c2:	697a      	ldr	r2, [r7, #20]
 80029c4:	4313      	orrs	r3, r2
 80029c6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	697a      	ldr	r2, [r7, #20]
 80029cc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	68fa      	ldr	r2, [r7, #12]
 80029d2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80029d4:	683b      	ldr	r3, [r7, #0]
 80029d6:	685a      	ldr	r2, [r3, #4]
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	693a      	ldr	r2, [r7, #16]
 80029e0:	621a      	str	r2, [r3, #32]
}
 80029e2:	bf00      	nop
 80029e4:	371c      	adds	r7, #28
 80029e6:	46bd      	mov	sp, r7
 80029e8:	bc80      	pop	{r7}
 80029ea:	4770      	bx	lr
 80029ec:	40012c00 	.word	0x40012c00

080029f0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80029f0:	b480      	push	{r7}
 80029f2:	b087      	sub	sp, #28
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	60f8      	str	r0, [r7, #12]
 80029f8:	60b9      	str	r1, [r7, #8]
 80029fa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	6a1b      	ldr	r3, [r3, #32]
 8002a00:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	6a1b      	ldr	r3, [r3, #32]
 8002a06:	f023 0201 	bic.w	r2, r3, #1
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	699b      	ldr	r3, [r3, #24]
 8002a12:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002a14:	693b      	ldr	r3, [r7, #16]
 8002a16:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002a1a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	011b      	lsls	r3, r3, #4
 8002a20:	693a      	ldr	r2, [r7, #16]
 8002a22:	4313      	orrs	r3, r2
 8002a24:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002a26:	697b      	ldr	r3, [r7, #20]
 8002a28:	f023 030a 	bic.w	r3, r3, #10
 8002a2c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002a2e:	697a      	ldr	r2, [r7, #20]
 8002a30:	68bb      	ldr	r3, [r7, #8]
 8002a32:	4313      	orrs	r3, r2
 8002a34:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	693a      	ldr	r2, [r7, #16]
 8002a3a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	697a      	ldr	r2, [r7, #20]
 8002a40:	621a      	str	r2, [r3, #32]
}
 8002a42:	bf00      	nop
 8002a44:	371c      	adds	r7, #28
 8002a46:	46bd      	mov	sp, r7
 8002a48:	bc80      	pop	{r7}
 8002a4a:	4770      	bx	lr

08002a4c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002a4c:	b480      	push	{r7}
 8002a4e:	b087      	sub	sp, #28
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	60f8      	str	r0, [r7, #12]
 8002a54:	60b9      	str	r1, [r7, #8]
 8002a56:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	6a1b      	ldr	r3, [r3, #32]
 8002a5c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	6a1b      	ldr	r3, [r3, #32]
 8002a62:	f023 0210 	bic.w	r2, r3, #16
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	699b      	ldr	r3, [r3, #24]
 8002a6e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002a70:	693b      	ldr	r3, [r7, #16]
 8002a72:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002a76:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	031b      	lsls	r3, r3, #12
 8002a7c:	693a      	ldr	r2, [r7, #16]
 8002a7e:	4313      	orrs	r3, r2
 8002a80:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002a82:	697b      	ldr	r3, [r7, #20]
 8002a84:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002a88:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002a8a:	68bb      	ldr	r3, [r7, #8]
 8002a8c:	011b      	lsls	r3, r3, #4
 8002a8e:	697a      	ldr	r2, [r7, #20]
 8002a90:	4313      	orrs	r3, r2
 8002a92:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	693a      	ldr	r2, [r7, #16]
 8002a98:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	697a      	ldr	r2, [r7, #20]
 8002a9e:	621a      	str	r2, [r3, #32]
}
 8002aa0:	bf00      	nop
 8002aa2:	371c      	adds	r7, #28
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	bc80      	pop	{r7}
 8002aa8:	4770      	bx	lr

08002aaa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002aaa:	b480      	push	{r7}
 8002aac:	b085      	sub	sp, #20
 8002aae:	af00      	add	r7, sp, #0
 8002ab0:	6078      	str	r0, [r7, #4]
 8002ab2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	689b      	ldr	r3, [r3, #8]
 8002ab8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ac0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002ac2:	683a      	ldr	r2, [r7, #0]
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	4313      	orrs	r3, r2
 8002ac8:	f043 0307 	orr.w	r3, r3, #7
 8002acc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	68fa      	ldr	r2, [r7, #12]
 8002ad2:	609a      	str	r2, [r3, #8]
}
 8002ad4:	bf00      	nop
 8002ad6:	3714      	adds	r7, #20
 8002ad8:	46bd      	mov	sp, r7
 8002ada:	bc80      	pop	{r7}
 8002adc:	4770      	bx	lr

08002ade <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002ade:	b480      	push	{r7}
 8002ae0:	b087      	sub	sp, #28
 8002ae2:	af00      	add	r7, sp, #0
 8002ae4:	60f8      	str	r0, [r7, #12]
 8002ae6:	60b9      	str	r1, [r7, #8]
 8002ae8:	607a      	str	r2, [r7, #4]
 8002aea:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	689b      	ldr	r3, [r3, #8]
 8002af0:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002af2:	697b      	ldr	r3, [r7, #20]
 8002af4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002af8:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002afa:	683b      	ldr	r3, [r7, #0]
 8002afc:	021a      	lsls	r2, r3, #8
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	431a      	orrs	r2, r3
 8002b02:	68bb      	ldr	r3, [r7, #8]
 8002b04:	4313      	orrs	r3, r2
 8002b06:	697a      	ldr	r2, [r7, #20]
 8002b08:	4313      	orrs	r3, r2
 8002b0a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	697a      	ldr	r2, [r7, #20]
 8002b10:	609a      	str	r2, [r3, #8]
}
 8002b12:	bf00      	nop
 8002b14:	371c      	adds	r7, #28
 8002b16:	46bd      	mov	sp, r7
 8002b18:	bc80      	pop	{r7}
 8002b1a:	4770      	bx	lr

08002b1c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002b1c:	b480      	push	{r7}
 8002b1e:	b085      	sub	sp, #20
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]
 8002b24:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b2c:	2b01      	cmp	r3, #1
 8002b2e:	d101      	bne.n	8002b34 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002b30:	2302      	movs	r3, #2
 8002b32:	e041      	b.n	8002bb8 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	2201      	movs	r2, #1
 8002b38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	2202      	movs	r2, #2
 8002b40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	685b      	ldr	r3, [r3, #4]
 8002b4a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	689b      	ldr	r3, [r3, #8]
 8002b52:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b5a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002b5c:	683b      	ldr	r3, [r7, #0]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	68fa      	ldr	r2, [r7, #12]
 8002b62:	4313      	orrs	r3, r2
 8002b64:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	68fa      	ldr	r2, [r7, #12]
 8002b6c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	4a14      	ldr	r2, [pc, #80]	; (8002bc4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002b74:	4293      	cmp	r3, r2
 8002b76:	d009      	beq.n	8002b8c <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b80:	d004      	beq.n	8002b8c <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	4a10      	ldr	r2, [pc, #64]	; (8002bc8 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002b88:	4293      	cmp	r3, r2
 8002b8a:	d10c      	bne.n	8002ba6 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002b8c:	68bb      	ldr	r3, [r7, #8]
 8002b8e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002b92:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002b94:	683b      	ldr	r3, [r7, #0]
 8002b96:	685b      	ldr	r3, [r3, #4]
 8002b98:	68ba      	ldr	r2, [r7, #8]
 8002b9a:	4313      	orrs	r3, r2
 8002b9c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	68ba      	ldr	r2, [r7, #8]
 8002ba4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	2201      	movs	r2, #1
 8002baa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002bb6:	2300      	movs	r3, #0
}
 8002bb8:	4618      	mov	r0, r3
 8002bba:	3714      	adds	r7, #20
 8002bbc:	46bd      	mov	sp, r7
 8002bbe:	bc80      	pop	{r7}
 8002bc0:	4770      	bx	lr
 8002bc2:	bf00      	nop
 8002bc4:	40012c00 	.word	0x40012c00
 8002bc8:	40000400 	.word	0x40000400

08002bcc <std>:
 8002bcc:	2300      	movs	r3, #0
 8002bce:	b510      	push	{r4, lr}
 8002bd0:	4604      	mov	r4, r0
 8002bd2:	e9c0 3300 	strd	r3, r3, [r0]
 8002bd6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002bda:	6083      	str	r3, [r0, #8]
 8002bdc:	8181      	strh	r1, [r0, #12]
 8002bde:	6643      	str	r3, [r0, #100]	; 0x64
 8002be0:	81c2      	strh	r2, [r0, #14]
 8002be2:	6183      	str	r3, [r0, #24]
 8002be4:	4619      	mov	r1, r3
 8002be6:	2208      	movs	r2, #8
 8002be8:	305c      	adds	r0, #92	; 0x5c
 8002bea:	f000 f906 	bl	8002dfa <memset>
 8002bee:	4b0d      	ldr	r3, [pc, #52]	; (8002c24 <std+0x58>)
 8002bf0:	6224      	str	r4, [r4, #32]
 8002bf2:	6263      	str	r3, [r4, #36]	; 0x24
 8002bf4:	4b0c      	ldr	r3, [pc, #48]	; (8002c28 <std+0x5c>)
 8002bf6:	62a3      	str	r3, [r4, #40]	; 0x28
 8002bf8:	4b0c      	ldr	r3, [pc, #48]	; (8002c2c <std+0x60>)
 8002bfa:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002bfc:	4b0c      	ldr	r3, [pc, #48]	; (8002c30 <std+0x64>)
 8002bfe:	6323      	str	r3, [r4, #48]	; 0x30
 8002c00:	4b0c      	ldr	r3, [pc, #48]	; (8002c34 <std+0x68>)
 8002c02:	429c      	cmp	r4, r3
 8002c04:	d006      	beq.n	8002c14 <std+0x48>
 8002c06:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8002c0a:	4294      	cmp	r4, r2
 8002c0c:	d002      	beq.n	8002c14 <std+0x48>
 8002c0e:	33d0      	adds	r3, #208	; 0xd0
 8002c10:	429c      	cmp	r4, r3
 8002c12:	d105      	bne.n	8002c20 <std+0x54>
 8002c14:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8002c18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002c1c:	f000 b966 	b.w	8002eec <__retarget_lock_init_recursive>
 8002c20:	bd10      	pop	{r4, pc}
 8002c22:	bf00      	nop
 8002c24:	08002d75 	.word	0x08002d75
 8002c28:	08002d97 	.word	0x08002d97
 8002c2c:	08002dcf 	.word	0x08002dcf
 8002c30:	08002df3 	.word	0x08002df3
 8002c34:	20000104 	.word	0x20000104

08002c38 <stdio_exit_handler>:
 8002c38:	4a02      	ldr	r2, [pc, #8]	; (8002c44 <stdio_exit_handler+0xc>)
 8002c3a:	4903      	ldr	r1, [pc, #12]	; (8002c48 <stdio_exit_handler+0x10>)
 8002c3c:	4803      	ldr	r0, [pc, #12]	; (8002c4c <stdio_exit_handler+0x14>)
 8002c3e:	f000 b869 	b.w	8002d14 <_fwalk_sglue>
 8002c42:	bf00      	nop
 8002c44:	2000000c 	.word	0x2000000c
 8002c48:	0800378d 	.word	0x0800378d
 8002c4c:	20000018 	.word	0x20000018

08002c50 <cleanup_stdio>:
 8002c50:	6841      	ldr	r1, [r0, #4]
 8002c52:	4b0c      	ldr	r3, [pc, #48]	; (8002c84 <cleanup_stdio+0x34>)
 8002c54:	b510      	push	{r4, lr}
 8002c56:	4299      	cmp	r1, r3
 8002c58:	4604      	mov	r4, r0
 8002c5a:	d001      	beq.n	8002c60 <cleanup_stdio+0x10>
 8002c5c:	f000 fd96 	bl	800378c <_fflush_r>
 8002c60:	68a1      	ldr	r1, [r4, #8]
 8002c62:	4b09      	ldr	r3, [pc, #36]	; (8002c88 <cleanup_stdio+0x38>)
 8002c64:	4299      	cmp	r1, r3
 8002c66:	d002      	beq.n	8002c6e <cleanup_stdio+0x1e>
 8002c68:	4620      	mov	r0, r4
 8002c6a:	f000 fd8f 	bl	800378c <_fflush_r>
 8002c6e:	68e1      	ldr	r1, [r4, #12]
 8002c70:	4b06      	ldr	r3, [pc, #24]	; (8002c8c <cleanup_stdio+0x3c>)
 8002c72:	4299      	cmp	r1, r3
 8002c74:	d004      	beq.n	8002c80 <cleanup_stdio+0x30>
 8002c76:	4620      	mov	r0, r4
 8002c78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002c7c:	f000 bd86 	b.w	800378c <_fflush_r>
 8002c80:	bd10      	pop	{r4, pc}
 8002c82:	bf00      	nop
 8002c84:	20000104 	.word	0x20000104
 8002c88:	2000016c 	.word	0x2000016c
 8002c8c:	200001d4 	.word	0x200001d4

08002c90 <global_stdio_init.part.0>:
 8002c90:	b510      	push	{r4, lr}
 8002c92:	4b0b      	ldr	r3, [pc, #44]	; (8002cc0 <global_stdio_init.part.0+0x30>)
 8002c94:	4c0b      	ldr	r4, [pc, #44]	; (8002cc4 <global_stdio_init.part.0+0x34>)
 8002c96:	4a0c      	ldr	r2, [pc, #48]	; (8002cc8 <global_stdio_init.part.0+0x38>)
 8002c98:	4620      	mov	r0, r4
 8002c9a:	601a      	str	r2, [r3, #0]
 8002c9c:	2104      	movs	r1, #4
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	f7ff ff94 	bl	8002bcc <std>
 8002ca4:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8002ca8:	2201      	movs	r2, #1
 8002caa:	2109      	movs	r1, #9
 8002cac:	f7ff ff8e 	bl	8002bcc <std>
 8002cb0:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8002cb4:	2202      	movs	r2, #2
 8002cb6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002cba:	2112      	movs	r1, #18
 8002cbc:	f7ff bf86 	b.w	8002bcc <std>
 8002cc0:	2000023c 	.word	0x2000023c
 8002cc4:	20000104 	.word	0x20000104
 8002cc8:	08002c39 	.word	0x08002c39

08002ccc <__sfp_lock_acquire>:
 8002ccc:	4801      	ldr	r0, [pc, #4]	; (8002cd4 <__sfp_lock_acquire+0x8>)
 8002cce:	f000 b90e 	b.w	8002eee <__retarget_lock_acquire_recursive>
 8002cd2:	bf00      	nop
 8002cd4:	20000245 	.word	0x20000245

08002cd8 <__sfp_lock_release>:
 8002cd8:	4801      	ldr	r0, [pc, #4]	; (8002ce0 <__sfp_lock_release+0x8>)
 8002cda:	f000 b909 	b.w	8002ef0 <__retarget_lock_release_recursive>
 8002cde:	bf00      	nop
 8002ce0:	20000245 	.word	0x20000245

08002ce4 <__sinit>:
 8002ce4:	b510      	push	{r4, lr}
 8002ce6:	4604      	mov	r4, r0
 8002ce8:	f7ff fff0 	bl	8002ccc <__sfp_lock_acquire>
 8002cec:	6a23      	ldr	r3, [r4, #32]
 8002cee:	b11b      	cbz	r3, 8002cf8 <__sinit+0x14>
 8002cf0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002cf4:	f7ff bff0 	b.w	8002cd8 <__sfp_lock_release>
 8002cf8:	4b04      	ldr	r3, [pc, #16]	; (8002d0c <__sinit+0x28>)
 8002cfa:	6223      	str	r3, [r4, #32]
 8002cfc:	4b04      	ldr	r3, [pc, #16]	; (8002d10 <__sinit+0x2c>)
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d1f5      	bne.n	8002cf0 <__sinit+0xc>
 8002d04:	f7ff ffc4 	bl	8002c90 <global_stdio_init.part.0>
 8002d08:	e7f2      	b.n	8002cf0 <__sinit+0xc>
 8002d0a:	bf00      	nop
 8002d0c:	08002c51 	.word	0x08002c51
 8002d10:	2000023c 	.word	0x2000023c

08002d14 <_fwalk_sglue>:
 8002d14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002d18:	4607      	mov	r7, r0
 8002d1a:	4688      	mov	r8, r1
 8002d1c:	4614      	mov	r4, r2
 8002d1e:	2600      	movs	r6, #0
 8002d20:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8002d24:	f1b9 0901 	subs.w	r9, r9, #1
 8002d28:	d505      	bpl.n	8002d36 <_fwalk_sglue+0x22>
 8002d2a:	6824      	ldr	r4, [r4, #0]
 8002d2c:	2c00      	cmp	r4, #0
 8002d2e:	d1f7      	bne.n	8002d20 <_fwalk_sglue+0xc>
 8002d30:	4630      	mov	r0, r6
 8002d32:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002d36:	89ab      	ldrh	r3, [r5, #12]
 8002d38:	2b01      	cmp	r3, #1
 8002d3a:	d907      	bls.n	8002d4c <_fwalk_sglue+0x38>
 8002d3c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002d40:	3301      	adds	r3, #1
 8002d42:	d003      	beq.n	8002d4c <_fwalk_sglue+0x38>
 8002d44:	4629      	mov	r1, r5
 8002d46:	4638      	mov	r0, r7
 8002d48:	47c0      	blx	r8
 8002d4a:	4306      	orrs	r6, r0
 8002d4c:	3568      	adds	r5, #104	; 0x68
 8002d4e:	e7e9      	b.n	8002d24 <_fwalk_sglue+0x10>

08002d50 <iprintf>:
 8002d50:	b40f      	push	{r0, r1, r2, r3}
 8002d52:	b507      	push	{r0, r1, r2, lr}
 8002d54:	4906      	ldr	r1, [pc, #24]	; (8002d70 <iprintf+0x20>)
 8002d56:	ab04      	add	r3, sp, #16
 8002d58:	6808      	ldr	r0, [r1, #0]
 8002d5a:	f853 2b04 	ldr.w	r2, [r3], #4
 8002d5e:	6881      	ldr	r1, [r0, #8]
 8002d60:	9301      	str	r3, [sp, #4]
 8002d62:	f000 f9e3 	bl	800312c <_vfiprintf_r>
 8002d66:	b003      	add	sp, #12
 8002d68:	f85d eb04 	ldr.w	lr, [sp], #4
 8002d6c:	b004      	add	sp, #16
 8002d6e:	4770      	bx	lr
 8002d70:	20000064 	.word	0x20000064

08002d74 <__sread>:
 8002d74:	b510      	push	{r4, lr}
 8002d76:	460c      	mov	r4, r1
 8002d78:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002d7c:	f000 f868 	bl	8002e50 <_read_r>
 8002d80:	2800      	cmp	r0, #0
 8002d82:	bfab      	itete	ge
 8002d84:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8002d86:	89a3      	ldrhlt	r3, [r4, #12]
 8002d88:	181b      	addge	r3, r3, r0
 8002d8a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8002d8e:	bfac      	ite	ge
 8002d90:	6563      	strge	r3, [r4, #84]	; 0x54
 8002d92:	81a3      	strhlt	r3, [r4, #12]
 8002d94:	bd10      	pop	{r4, pc}

08002d96 <__swrite>:
 8002d96:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002d9a:	461f      	mov	r7, r3
 8002d9c:	898b      	ldrh	r3, [r1, #12]
 8002d9e:	4605      	mov	r5, r0
 8002da0:	05db      	lsls	r3, r3, #23
 8002da2:	460c      	mov	r4, r1
 8002da4:	4616      	mov	r6, r2
 8002da6:	d505      	bpl.n	8002db4 <__swrite+0x1e>
 8002da8:	2302      	movs	r3, #2
 8002daa:	2200      	movs	r2, #0
 8002dac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002db0:	f000 f83c 	bl	8002e2c <_lseek_r>
 8002db4:	89a3      	ldrh	r3, [r4, #12]
 8002db6:	4632      	mov	r2, r6
 8002db8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002dbc:	81a3      	strh	r3, [r4, #12]
 8002dbe:	4628      	mov	r0, r5
 8002dc0:	463b      	mov	r3, r7
 8002dc2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002dc6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002dca:	f000 b853 	b.w	8002e74 <_write_r>

08002dce <__sseek>:
 8002dce:	b510      	push	{r4, lr}
 8002dd0:	460c      	mov	r4, r1
 8002dd2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002dd6:	f000 f829 	bl	8002e2c <_lseek_r>
 8002dda:	1c43      	adds	r3, r0, #1
 8002ddc:	89a3      	ldrh	r3, [r4, #12]
 8002dde:	bf15      	itete	ne
 8002de0:	6560      	strne	r0, [r4, #84]	; 0x54
 8002de2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8002de6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8002dea:	81a3      	strheq	r3, [r4, #12]
 8002dec:	bf18      	it	ne
 8002dee:	81a3      	strhne	r3, [r4, #12]
 8002df0:	bd10      	pop	{r4, pc}

08002df2 <__sclose>:
 8002df2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002df6:	f000 b809 	b.w	8002e0c <_close_r>

08002dfa <memset>:
 8002dfa:	4603      	mov	r3, r0
 8002dfc:	4402      	add	r2, r0
 8002dfe:	4293      	cmp	r3, r2
 8002e00:	d100      	bne.n	8002e04 <memset+0xa>
 8002e02:	4770      	bx	lr
 8002e04:	f803 1b01 	strb.w	r1, [r3], #1
 8002e08:	e7f9      	b.n	8002dfe <memset+0x4>
	...

08002e0c <_close_r>:
 8002e0c:	b538      	push	{r3, r4, r5, lr}
 8002e0e:	2300      	movs	r3, #0
 8002e10:	4d05      	ldr	r5, [pc, #20]	; (8002e28 <_close_r+0x1c>)
 8002e12:	4604      	mov	r4, r0
 8002e14:	4608      	mov	r0, r1
 8002e16:	602b      	str	r3, [r5, #0]
 8002e18:	f7fd fc1e 	bl	8000658 <_close>
 8002e1c:	1c43      	adds	r3, r0, #1
 8002e1e:	d102      	bne.n	8002e26 <_close_r+0x1a>
 8002e20:	682b      	ldr	r3, [r5, #0]
 8002e22:	b103      	cbz	r3, 8002e26 <_close_r+0x1a>
 8002e24:	6023      	str	r3, [r4, #0]
 8002e26:	bd38      	pop	{r3, r4, r5, pc}
 8002e28:	20000240 	.word	0x20000240

08002e2c <_lseek_r>:
 8002e2c:	b538      	push	{r3, r4, r5, lr}
 8002e2e:	4604      	mov	r4, r0
 8002e30:	4608      	mov	r0, r1
 8002e32:	4611      	mov	r1, r2
 8002e34:	2200      	movs	r2, #0
 8002e36:	4d05      	ldr	r5, [pc, #20]	; (8002e4c <_lseek_r+0x20>)
 8002e38:	602a      	str	r2, [r5, #0]
 8002e3a:	461a      	mov	r2, r3
 8002e3c:	f7fd fc30 	bl	80006a0 <_lseek>
 8002e40:	1c43      	adds	r3, r0, #1
 8002e42:	d102      	bne.n	8002e4a <_lseek_r+0x1e>
 8002e44:	682b      	ldr	r3, [r5, #0]
 8002e46:	b103      	cbz	r3, 8002e4a <_lseek_r+0x1e>
 8002e48:	6023      	str	r3, [r4, #0]
 8002e4a:	bd38      	pop	{r3, r4, r5, pc}
 8002e4c:	20000240 	.word	0x20000240

08002e50 <_read_r>:
 8002e50:	b538      	push	{r3, r4, r5, lr}
 8002e52:	4604      	mov	r4, r0
 8002e54:	4608      	mov	r0, r1
 8002e56:	4611      	mov	r1, r2
 8002e58:	2200      	movs	r2, #0
 8002e5a:	4d05      	ldr	r5, [pc, #20]	; (8002e70 <_read_r+0x20>)
 8002e5c:	602a      	str	r2, [r5, #0]
 8002e5e:	461a      	mov	r2, r3
 8002e60:	f7fd fbc1 	bl	80005e6 <_read>
 8002e64:	1c43      	adds	r3, r0, #1
 8002e66:	d102      	bne.n	8002e6e <_read_r+0x1e>
 8002e68:	682b      	ldr	r3, [r5, #0]
 8002e6a:	b103      	cbz	r3, 8002e6e <_read_r+0x1e>
 8002e6c:	6023      	str	r3, [r4, #0]
 8002e6e:	bd38      	pop	{r3, r4, r5, pc}
 8002e70:	20000240 	.word	0x20000240

08002e74 <_write_r>:
 8002e74:	b538      	push	{r3, r4, r5, lr}
 8002e76:	4604      	mov	r4, r0
 8002e78:	4608      	mov	r0, r1
 8002e7a:	4611      	mov	r1, r2
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	4d05      	ldr	r5, [pc, #20]	; (8002e94 <_write_r+0x20>)
 8002e80:	602a      	str	r2, [r5, #0]
 8002e82:	461a      	mov	r2, r3
 8002e84:	f7fd fbcc 	bl	8000620 <_write>
 8002e88:	1c43      	adds	r3, r0, #1
 8002e8a:	d102      	bne.n	8002e92 <_write_r+0x1e>
 8002e8c:	682b      	ldr	r3, [r5, #0]
 8002e8e:	b103      	cbz	r3, 8002e92 <_write_r+0x1e>
 8002e90:	6023      	str	r3, [r4, #0]
 8002e92:	bd38      	pop	{r3, r4, r5, pc}
 8002e94:	20000240 	.word	0x20000240

08002e98 <__errno>:
 8002e98:	4b01      	ldr	r3, [pc, #4]	; (8002ea0 <__errno+0x8>)
 8002e9a:	6818      	ldr	r0, [r3, #0]
 8002e9c:	4770      	bx	lr
 8002e9e:	bf00      	nop
 8002ea0:	20000064 	.word	0x20000064

08002ea4 <__libc_init_array>:
 8002ea4:	b570      	push	{r4, r5, r6, lr}
 8002ea6:	2600      	movs	r6, #0
 8002ea8:	4d0c      	ldr	r5, [pc, #48]	; (8002edc <__libc_init_array+0x38>)
 8002eaa:	4c0d      	ldr	r4, [pc, #52]	; (8002ee0 <__libc_init_array+0x3c>)
 8002eac:	1b64      	subs	r4, r4, r5
 8002eae:	10a4      	asrs	r4, r4, #2
 8002eb0:	42a6      	cmp	r6, r4
 8002eb2:	d109      	bne.n	8002ec8 <__libc_init_array+0x24>
 8002eb4:	f000 fdca 	bl	8003a4c <_init>
 8002eb8:	2600      	movs	r6, #0
 8002eba:	4d0a      	ldr	r5, [pc, #40]	; (8002ee4 <__libc_init_array+0x40>)
 8002ebc:	4c0a      	ldr	r4, [pc, #40]	; (8002ee8 <__libc_init_array+0x44>)
 8002ebe:	1b64      	subs	r4, r4, r5
 8002ec0:	10a4      	asrs	r4, r4, #2
 8002ec2:	42a6      	cmp	r6, r4
 8002ec4:	d105      	bne.n	8002ed2 <__libc_init_array+0x2e>
 8002ec6:	bd70      	pop	{r4, r5, r6, pc}
 8002ec8:	f855 3b04 	ldr.w	r3, [r5], #4
 8002ecc:	4798      	blx	r3
 8002ece:	3601      	adds	r6, #1
 8002ed0:	e7ee      	b.n	8002eb0 <__libc_init_array+0xc>
 8002ed2:	f855 3b04 	ldr.w	r3, [r5], #4
 8002ed6:	4798      	blx	r3
 8002ed8:	3601      	adds	r6, #1
 8002eda:	e7f2      	b.n	8002ec2 <__libc_init_array+0x1e>
 8002edc:	08003ae8 	.word	0x08003ae8
 8002ee0:	08003ae8 	.word	0x08003ae8
 8002ee4:	08003ae8 	.word	0x08003ae8
 8002ee8:	08003aec 	.word	0x08003aec

08002eec <__retarget_lock_init_recursive>:
 8002eec:	4770      	bx	lr

08002eee <__retarget_lock_acquire_recursive>:
 8002eee:	4770      	bx	lr

08002ef0 <__retarget_lock_release_recursive>:
 8002ef0:	4770      	bx	lr
	...

08002ef4 <_free_r>:
 8002ef4:	b538      	push	{r3, r4, r5, lr}
 8002ef6:	4605      	mov	r5, r0
 8002ef8:	2900      	cmp	r1, #0
 8002efa:	d040      	beq.n	8002f7e <_free_r+0x8a>
 8002efc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002f00:	1f0c      	subs	r4, r1, #4
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	bfb8      	it	lt
 8002f06:	18e4      	addlt	r4, r4, r3
 8002f08:	f000 f8dc 	bl	80030c4 <__malloc_lock>
 8002f0c:	4a1c      	ldr	r2, [pc, #112]	; (8002f80 <_free_r+0x8c>)
 8002f0e:	6813      	ldr	r3, [r2, #0]
 8002f10:	b933      	cbnz	r3, 8002f20 <_free_r+0x2c>
 8002f12:	6063      	str	r3, [r4, #4]
 8002f14:	6014      	str	r4, [r2, #0]
 8002f16:	4628      	mov	r0, r5
 8002f18:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002f1c:	f000 b8d8 	b.w	80030d0 <__malloc_unlock>
 8002f20:	42a3      	cmp	r3, r4
 8002f22:	d908      	bls.n	8002f36 <_free_r+0x42>
 8002f24:	6820      	ldr	r0, [r4, #0]
 8002f26:	1821      	adds	r1, r4, r0
 8002f28:	428b      	cmp	r3, r1
 8002f2a:	bf01      	itttt	eq
 8002f2c:	6819      	ldreq	r1, [r3, #0]
 8002f2e:	685b      	ldreq	r3, [r3, #4]
 8002f30:	1809      	addeq	r1, r1, r0
 8002f32:	6021      	streq	r1, [r4, #0]
 8002f34:	e7ed      	b.n	8002f12 <_free_r+0x1e>
 8002f36:	461a      	mov	r2, r3
 8002f38:	685b      	ldr	r3, [r3, #4]
 8002f3a:	b10b      	cbz	r3, 8002f40 <_free_r+0x4c>
 8002f3c:	42a3      	cmp	r3, r4
 8002f3e:	d9fa      	bls.n	8002f36 <_free_r+0x42>
 8002f40:	6811      	ldr	r1, [r2, #0]
 8002f42:	1850      	adds	r0, r2, r1
 8002f44:	42a0      	cmp	r0, r4
 8002f46:	d10b      	bne.n	8002f60 <_free_r+0x6c>
 8002f48:	6820      	ldr	r0, [r4, #0]
 8002f4a:	4401      	add	r1, r0
 8002f4c:	1850      	adds	r0, r2, r1
 8002f4e:	4283      	cmp	r3, r0
 8002f50:	6011      	str	r1, [r2, #0]
 8002f52:	d1e0      	bne.n	8002f16 <_free_r+0x22>
 8002f54:	6818      	ldr	r0, [r3, #0]
 8002f56:	685b      	ldr	r3, [r3, #4]
 8002f58:	4408      	add	r0, r1
 8002f5a:	6010      	str	r0, [r2, #0]
 8002f5c:	6053      	str	r3, [r2, #4]
 8002f5e:	e7da      	b.n	8002f16 <_free_r+0x22>
 8002f60:	d902      	bls.n	8002f68 <_free_r+0x74>
 8002f62:	230c      	movs	r3, #12
 8002f64:	602b      	str	r3, [r5, #0]
 8002f66:	e7d6      	b.n	8002f16 <_free_r+0x22>
 8002f68:	6820      	ldr	r0, [r4, #0]
 8002f6a:	1821      	adds	r1, r4, r0
 8002f6c:	428b      	cmp	r3, r1
 8002f6e:	bf01      	itttt	eq
 8002f70:	6819      	ldreq	r1, [r3, #0]
 8002f72:	685b      	ldreq	r3, [r3, #4]
 8002f74:	1809      	addeq	r1, r1, r0
 8002f76:	6021      	streq	r1, [r4, #0]
 8002f78:	6063      	str	r3, [r4, #4]
 8002f7a:	6054      	str	r4, [r2, #4]
 8002f7c:	e7cb      	b.n	8002f16 <_free_r+0x22>
 8002f7e:	bd38      	pop	{r3, r4, r5, pc}
 8002f80:	20000248 	.word	0x20000248

08002f84 <sbrk_aligned>:
 8002f84:	b570      	push	{r4, r5, r6, lr}
 8002f86:	4e0e      	ldr	r6, [pc, #56]	; (8002fc0 <sbrk_aligned+0x3c>)
 8002f88:	460c      	mov	r4, r1
 8002f8a:	6831      	ldr	r1, [r6, #0]
 8002f8c:	4605      	mov	r5, r0
 8002f8e:	b911      	cbnz	r1, 8002f96 <sbrk_aligned+0x12>
 8002f90:	f000 fcba 	bl	8003908 <_sbrk_r>
 8002f94:	6030      	str	r0, [r6, #0]
 8002f96:	4621      	mov	r1, r4
 8002f98:	4628      	mov	r0, r5
 8002f9a:	f000 fcb5 	bl	8003908 <_sbrk_r>
 8002f9e:	1c43      	adds	r3, r0, #1
 8002fa0:	d00a      	beq.n	8002fb8 <sbrk_aligned+0x34>
 8002fa2:	1cc4      	adds	r4, r0, #3
 8002fa4:	f024 0403 	bic.w	r4, r4, #3
 8002fa8:	42a0      	cmp	r0, r4
 8002faa:	d007      	beq.n	8002fbc <sbrk_aligned+0x38>
 8002fac:	1a21      	subs	r1, r4, r0
 8002fae:	4628      	mov	r0, r5
 8002fb0:	f000 fcaa 	bl	8003908 <_sbrk_r>
 8002fb4:	3001      	adds	r0, #1
 8002fb6:	d101      	bne.n	8002fbc <sbrk_aligned+0x38>
 8002fb8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8002fbc:	4620      	mov	r0, r4
 8002fbe:	bd70      	pop	{r4, r5, r6, pc}
 8002fc0:	2000024c 	.word	0x2000024c

08002fc4 <_malloc_r>:
 8002fc4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002fc8:	1ccd      	adds	r5, r1, #3
 8002fca:	f025 0503 	bic.w	r5, r5, #3
 8002fce:	3508      	adds	r5, #8
 8002fd0:	2d0c      	cmp	r5, #12
 8002fd2:	bf38      	it	cc
 8002fd4:	250c      	movcc	r5, #12
 8002fd6:	2d00      	cmp	r5, #0
 8002fd8:	4607      	mov	r7, r0
 8002fda:	db01      	blt.n	8002fe0 <_malloc_r+0x1c>
 8002fdc:	42a9      	cmp	r1, r5
 8002fde:	d905      	bls.n	8002fec <_malloc_r+0x28>
 8002fe0:	230c      	movs	r3, #12
 8002fe2:	2600      	movs	r6, #0
 8002fe4:	603b      	str	r3, [r7, #0]
 8002fe6:	4630      	mov	r0, r6
 8002fe8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002fec:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80030c0 <_malloc_r+0xfc>
 8002ff0:	f000 f868 	bl	80030c4 <__malloc_lock>
 8002ff4:	f8d8 3000 	ldr.w	r3, [r8]
 8002ff8:	461c      	mov	r4, r3
 8002ffa:	bb5c      	cbnz	r4, 8003054 <_malloc_r+0x90>
 8002ffc:	4629      	mov	r1, r5
 8002ffe:	4638      	mov	r0, r7
 8003000:	f7ff ffc0 	bl	8002f84 <sbrk_aligned>
 8003004:	1c43      	adds	r3, r0, #1
 8003006:	4604      	mov	r4, r0
 8003008:	d155      	bne.n	80030b6 <_malloc_r+0xf2>
 800300a:	f8d8 4000 	ldr.w	r4, [r8]
 800300e:	4626      	mov	r6, r4
 8003010:	2e00      	cmp	r6, #0
 8003012:	d145      	bne.n	80030a0 <_malloc_r+0xdc>
 8003014:	2c00      	cmp	r4, #0
 8003016:	d048      	beq.n	80030aa <_malloc_r+0xe6>
 8003018:	6823      	ldr	r3, [r4, #0]
 800301a:	4631      	mov	r1, r6
 800301c:	4638      	mov	r0, r7
 800301e:	eb04 0903 	add.w	r9, r4, r3
 8003022:	f000 fc71 	bl	8003908 <_sbrk_r>
 8003026:	4581      	cmp	r9, r0
 8003028:	d13f      	bne.n	80030aa <_malloc_r+0xe6>
 800302a:	6821      	ldr	r1, [r4, #0]
 800302c:	4638      	mov	r0, r7
 800302e:	1a6d      	subs	r5, r5, r1
 8003030:	4629      	mov	r1, r5
 8003032:	f7ff ffa7 	bl	8002f84 <sbrk_aligned>
 8003036:	3001      	adds	r0, #1
 8003038:	d037      	beq.n	80030aa <_malloc_r+0xe6>
 800303a:	6823      	ldr	r3, [r4, #0]
 800303c:	442b      	add	r3, r5
 800303e:	6023      	str	r3, [r4, #0]
 8003040:	f8d8 3000 	ldr.w	r3, [r8]
 8003044:	2b00      	cmp	r3, #0
 8003046:	d038      	beq.n	80030ba <_malloc_r+0xf6>
 8003048:	685a      	ldr	r2, [r3, #4]
 800304a:	42a2      	cmp	r2, r4
 800304c:	d12b      	bne.n	80030a6 <_malloc_r+0xe2>
 800304e:	2200      	movs	r2, #0
 8003050:	605a      	str	r2, [r3, #4]
 8003052:	e00f      	b.n	8003074 <_malloc_r+0xb0>
 8003054:	6822      	ldr	r2, [r4, #0]
 8003056:	1b52      	subs	r2, r2, r5
 8003058:	d41f      	bmi.n	800309a <_malloc_r+0xd6>
 800305a:	2a0b      	cmp	r2, #11
 800305c:	d917      	bls.n	800308e <_malloc_r+0xca>
 800305e:	1961      	adds	r1, r4, r5
 8003060:	42a3      	cmp	r3, r4
 8003062:	6025      	str	r5, [r4, #0]
 8003064:	bf18      	it	ne
 8003066:	6059      	strne	r1, [r3, #4]
 8003068:	6863      	ldr	r3, [r4, #4]
 800306a:	bf08      	it	eq
 800306c:	f8c8 1000 	streq.w	r1, [r8]
 8003070:	5162      	str	r2, [r4, r5]
 8003072:	604b      	str	r3, [r1, #4]
 8003074:	4638      	mov	r0, r7
 8003076:	f104 060b 	add.w	r6, r4, #11
 800307a:	f000 f829 	bl	80030d0 <__malloc_unlock>
 800307e:	f026 0607 	bic.w	r6, r6, #7
 8003082:	1d23      	adds	r3, r4, #4
 8003084:	1af2      	subs	r2, r6, r3
 8003086:	d0ae      	beq.n	8002fe6 <_malloc_r+0x22>
 8003088:	1b9b      	subs	r3, r3, r6
 800308a:	50a3      	str	r3, [r4, r2]
 800308c:	e7ab      	b.n	8002fe6 <_malloc_r+0x22>
 800308e:	42a3      	cmp	r3, r4
 8003090:	6862      	ldr	r2, [r4, #4]
 8003092:	d1dd      	bne.n	8003050 <_malloc_r+0x8c>
 8003094:	f8c8 2000 	str.w	r2, [r8]
 8003098:	e7ec      	b.n	8003074 <_malloc_r+0xb0>
 800309a:	4623      	mov	r3, r4
 800309c:	6864      	ldr	r4, [r4, #4]
 800309e:	e7ac      	b.n	8002ffa <_malloc_r+0x36>
 80030a0:	4634      	mov	r4, r6
 80030a2:	6876      	ldr	r6, [r6, #4]
 80030a4:	e7b4      	b.n	8003010 <_malloc_r+0x4c>
 80030a6:	4613      	mov	r3, r2
 80030a8:	e7cc      	b.n	8003044 <_malloc_r+0x80>
 80030aa:	230c      	movs	r3, #12
 80030ac:	4638      	mov	r0, r7
 80030ae:	603b      	str	r3, [r7, #0]
 80030b0:	f000 f80e 	bl	80030d0 <__malloc_unlock>
 80030b4:	e797      	b.n	8002fe6 <_malloc_r+0x22>
 80030b6:	6025      	str	r5, [r4, #0]
 80030b8:	e7dc      	b.n	8003074 <_malloc_r+0xb0>
 80030ba:	605b      	str	r3, [r3, #4]
 80030bc:	deff      	udf	#255	; 0xff
 80030be:	bf00      	nop
 80030c0:	20000248 	.word	0x20000248

080030c4 <__malloc_lock>:
 80030c4:	4801      	ldr	r0, [pc, #4]	; (80030cc <__malloc_lock+0x8>)
 80030c6:	f7ff bf12 	b.w	8002eee <__retarget_lock_acquire_recursive>
 80030ca:	bf00      	nop
 80030cc:	20000244 	.word	0x20000244

080030d0 <__malloc_unlock>:
 80030d0:	4801      	ldr	r0, [pc, #4]	; (80030d8 <__malloc_unlock+0x8>)
 80030d2:	f7ff bf0d 	b.w	8002ef0 <__retarget_lock_release_recursive>
 80030d6:	bf00      	nop
 80030d8:	20000244 	.word	0x20000244

080030dc <__sfputc_r>:
 80030dc:	6893      	ldr	r3, [r2, #8]
 80030de:	b410      	push	{r4}
 80030e0:	3b01      	subs	r3, #1
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	6093      	str	r3, [r2, #8]
 80030e6:	da07      	bge.n	80030f8 <__sfputc_r+0x1c>
 80030e8:	6994      	ldr	r4, [r2, #24]
 80030ea:	42a3      	cmp	r3, r4
 80030ec:	db01      	blt.n	80030f2 <__sfputc_r+0x16>
 80030ee:	290a      	cmp	r1, #10
 80030f0:	d102      	bne.n	80030f8 <__sfputc_r+0x1c>
 80030f2:	bc10      	pop	{r4}
 80030f4:	f000 bb72 	b.w	80037dc <__swbuf_r>
 80030f8:	6813      	ldr	r3, [r2, #0]
 80030fa:	1c58      	adds	r0, r3, #1
 80030fc:	6010      	str	r0, [r2, #0]
 80030fe:	7019      	strb	r1, [r3, #0]
 8003100:	4608      	mov	r0, r1
 8003102:	bc10      	pop	{r4}
 8003104:	4770      	bx	lr

08003106 <__sfputs_r>:
 8003106:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003108:	4606      	mov	r6, r0
 800310a:	460f      	mov	r7, r1
 800310c:	4614      	mov	r4, r2
 800310e:	18d5      	adds	r5, r2, r3
 8003110:	42ac      	cmp	r4, r5
 8003112:	d101      	bne.n	8003118 <__sfputs_r+0x12>
 8003114:	2000      	movs	r0, #0
 8003116:	e007      	b.n	8003128 <__sfputs_r+0x22>
 8003118:	463a      	mov	r2, r7
 800311a:	4630      	mov	r0, r6
 800311c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003120:	f7ff ffdc 	bl	80030dc <__sfputc_r>
 8003124:	1c43      	adds	r3, r0, #1
 8003126:	d1f3      	bne.n	8003110 <__sfputs_r+0xa>
 8003128:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800312c <_vfiprintf_r>:
 800312c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003130:	460d      	mov	r5, r1
 8003132:	4614      	mov	r4, r2
 8003134:	4698      	mov	r8, r3
 8003136:	4606      	mov	r6, r0
 8003138:	b09d      	sub	sp, #116	; 0x74
 800313a:	b118      	cbz	r0, 8003144 <_vfiprintf_r+0x18>
 800313c:	6a03      	ldr	r3, [r0, #32]
 800313e:	b90b      	cbnz	r3, 8003144 <_vfiprintf_r+0x18>
 8003140:	f7ff fdd0 	bl	8002ce4 <__sinit>
 8003144:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003146:	07d9      	lsls	r1, r3, #31
 8003148:	d405      	bmi.n	8003156 <_vfiprintf_r+0x2a>
 800314a:	89ab      	ldrh	r3, [r5, #12]
 800314c:	059a      	lsls	r2, r3, #22
 800314e:	d402      	bmi.n	8003156 <_vfiprintf_r+0x2a>
 8003150:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003152:	f7ff fecc 	bl	8002eee <__retarget_lock_acquire_recursive>
 8003156:	89ab      	ldrh	r3, [r5, #12]
 8003158:	071b      	lsls	r3, r3, #28
 800315a:	d501      	bpl.n	8003160 <_vfiprintf_r+0x34>
 800315c:	692b      	ldr	r3, [r5, #16]
 800315e:	b99b      	cbnz	r3, 8003188 <_vfiprintf_r+0x5c>
 8003160:	4629      	mov	r1, r5
 8003162:	4630      	mov	r0, r6
 8003164:	f000 fb78 	bl	8003858 <__swsetup_r>
 8003168:	b170      	cbz	r0, 8003188 <_vfiprintf_r+0x5c>
 800316a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800316c:	07dc      	lsls	r4, r3, #31
 800316e:	d504      	bpl.n	800317a <_vfiprintf_r+0x4e>
 8003170:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003174:	b01d      	add	sp, #116	; 0x74
 8003176:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800317a:	89ab      	ldrh	r3, [r5, #12]
 800317c:	0598      	lsls	r0, r3, #22
 800317e:	d4f7      	bmi.n	8003170 <_vfiprintf_r+0x44>
 8003180:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003182:	f7ff feb5 	bl	8002ef0 <__retarget_lock_release_recursive>
 8003186:	e7f3      	b.n	8003170 <_vfiprintf_r+0x44>
 8003188:	2300      	movs	r3, #0
 800318a:	9309      	str	r3, [sp, #36]	; 0x24
 800318c:	2320      	movs	r3, #32
 800318e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003192:	2330      	movs	r3, #48	; 0x30
 8003194:	f04f 0901 	mov.w	r9, #1
 8003198:	f8cd 800c 	str.w	r8, [sp, #12]
 800319c:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 800334c <_vfiprintf_r+0x220>
 80031a0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80031a4:	4623      	mov	r3, r4
 80031a6:	469a      	mov	sl, r3
 80031a8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80031ac:	b10a      	cbz	r2, 80031b2 <_vfiprintf_r+0x86>
 80031ae:	2a25      	cmp	r2, #37	; 0x25
 80031b0:	d1f9      	bne.n	80031a6 <_vfiprintf_r+0x7a>
 80031b2:	ebba 0b04 	subs.w	fp, sl, r4
 80031b6:	d00b      	beq.n	80031d0 <_vfiprintf_r+0xa4>
 80031b8:	465b      	mov	r3, fp
 80031ba:	4622      	mov	r2, r4
 80031bc:	4629      	mov	r1, r5
 80031be:	4630      	mov	r0, r6
 80031c0:	f7ff ffa1 	bl	8003106 <__sfputs_r>
 80031c4:	3001      	adds	r0, #1
 80031c6:	f000 80a9 	beq.w	800331c <_vfiprintf_r+0x1f0>
 80031ca:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80031cc:	445a      	add	r2, fp
 80031ce:	9209      	str	r2, [sp, #36]	; 0x24
 80031d0:	f89a 3000 	ldrb.w	r3, [sl]
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	f000 80a1 	beq.w	800331c <_vfiprintf_r+0x1f0>
 80031da:	2300      	movs	r3, #0
 80031dc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80031e0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80031e4:	f10a 0a01 	add.w	sl, sl, #1
 80031e8:	9304      	str	r3, [sp, #16]
 80031ea:	9307      	str	r3, [sp, #28]
 80031ec:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80031f0:	931a      	str	r3, [sp, #104]	; 0x68
 80031f2:	4654      	mov	r4, sl
 80031f4:	2205      	movs	r2, #5
 80031f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80031fa:	4854      	ldr	r0, [pc, #336]	; (800334c <_vfiprintf_r+0x220>)
 80031fc:	f000 fb94 	bl	8003928 <memchr>
 8003200:	9a04      	ldr	r2, [sp, #16]
 8003202:	b9d8      	cbnz	r0, 800323c <_vfiprintf_r+0x110>
 8003204:	06d1      	lsls	r1, r2, #27
 8003206:	bf44      	itt	mi
 8003208:	2320      	movmi	r3, #32
 800320a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800320e:	0713      	lsls	r3, r2, #28
 8003210:	bf44      	itt	mi
 8003212:	232b      	movmi	r3, #43	; 0x2b
 8003214:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003218:	f89a 3000 	ldrb.w	r3, [sl]
 800321c:	2b2a      	cmp	r3, #42	; 0x2a
 800321e:	d015      	beq.n	800324c <_vfiprintf_r+0x120>
 8003220:	4654      	mov	r4, sl
 8003222:	2000      	movs	r0, #0
 8003224:	f04f 0c0a 	mov.w	ip, #10
 8003228:	9a07      	ldr	r2, [sp, #28]
 800322a:	4621      	mov	r1, r4
 800322c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003230:	3b30      	subs	r3, #48	; 0x30
 8003232:	2b09      	cmp	r3, #9
 8003234:	d94d      	bls.n	80032d2 <_vfiprintf_r+0x1a6>
 8003236:	b1b0      	cbz	r0, 8003266 <_vfiprintf_r+0x13a>
 8003238:	9207      	str	r2, [sp, #28]
 800323a:	e014      	b.n	8003266 <_vfiprintf_r+0x13a>
 800323c:	eba0 0308 	sub.w	r3, r0, r8
 8003240:	fa09 f303 	lsl.w	r3, r9, r3
 8003244:	4313      	orrs	r3, r2
 8003246:	46a2      	mov	sl, r4
 8003248:	9304      	str	r3, [sp, #16]
 800324a:	e7d2      	b.n	80031f2 <_vfiprintf_r+0xc6>
 800324c:	9b03      	ldr	r3, [sp, #12]
 800324e:	1d19      	adds	r1, r3, #4
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	9103      	str	r1, [sp, #12]
 8003254:	2b00      	cmp	r3, #0
 8003256:	bfbb      	ittet	lt
 8003258:	425b      	neglt	r3, r3
 800325a:	f042 0202 	orrlt.w	r2, r2, #2
 800325e:	9307      	strge	r3, [sp, #28]
 8003260:	9307      	strlt	r3, [sp, #28]
 8003262:	bfb8      	it	lt
 8003264:	9204      	strlt	r2, [sp, #16]
 8003266:	7823      	ldrb	r3, [r4, #0]
 8003268:	2b2e      	cmp	r3, #46	; 0x2e
 800326a:	d10c      	bne.n	8003286 <_vfiprintf_r+0x15a>
 800326c:	7863      	ldrb	r3, [r4, #1]
 800326e:	2b2a      	cmp	r3, #42	; 0x2a
 8003270:	d134      	bne.n	80032dc <_vfiprintf_r+0x1b0>
 8003272:	9b03      	ldr	r3, [sp, #12]
 8003274:	3402      	adds	r4, #2
 8003276:	1d1a      	adds	r2, r3, #4
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	9203      	str	r2, [sp, #12]
 800327c:	2b00      	cmp	r3, #0
 800327e:	bfb8      	it	lt
 8003280:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8003284:	9305      	str	r3, [sp, #20]
 8003286:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8003350 <_vfiprintf_r+0x224>
 800328a:	2203      	movs	r2, #3
 800328c:	4650      	mov	r0, sl
 800328e:	7821      	ldrb	r1, [r4, #0]
 8003290:	f000 fb4a 	bl	8003928 <memchr>
 8003294:	b138      	cbz	r0, 80032a6 <_vfiprintf_r+0x17a>
 8003296:	2240      	movs	r2, #64	; 0x40
 8003298:	9b04      	ldr	r3, [sp, #16]
 800329a:	eba0 000a 	sub.w	r0, r0, sl
 800329e:	4082      	lsls	r2, r0
 80032a0:	4313      	orrs	r3, r2
 80032a2:	3401      	adds	r4, #1
 80032a4:	9304      	str	r3, [sp, #16]
 80032a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80032aa:	2206      	movs	r2, #6
 80032ac:	4829      	ldr	r0, [pc, #164]	; (8003354 <_vfiprintf_r+0x228>)
 80032ae:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80032b2:	f000 fb39 	bl	8003928 <memchr>
 80032b6:	2800      	cmp	r0, #0
 80032b8:	d03f      	beq.n	800333a <_vfiprintf_r+0x20e>
 80032ba:	4b27      	ldr	r3, [pc, #156]	; (8003358 <_vfiprintf_r+0x22c>)
 80032bc:	bb1b      	cbnz	r3, 8003306 <_vfiprintf_r+0x1da>
 80032be:	9b03      	ldr	r3, [sp, #12]
 80032c0:	3307      	adds	r3, #7
 80032c2:	f023 0307 	bic.w	r3, r3, #7
 80032c6:	3308      	adds	r3, #8
 80032c8:	9303      	str	r3, [sp, #12]
 80032ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80032cc:	443b      	add	r3, r7
 80032ce:	9309      	str	r3, [sp, #36]	; 0x24
 80032d0:	e768      	b.n	80031a4 <_vfiprintf_r+0x78>
 80032d2:	460c      	mov	r4, r1
 80032d4:	2001      	movs	r0, #1
 80032d6:	fb0c 3202 	mla	r2, ip, r2, r3
 80032da:	e7a6      	b.n	800322a <_vfiprintf_r+0xfe>
 80032dc:	2300      	movs	r3, #0
 80032de:	f04f 0c0a 	mov.w	ip, #10
 80032e2:	4619      	mov	r1, r3
 80032e4:	3401      	adds	r4, #1
 80032e6:	9305      	str	r3, [sp, #20]
 80032e8:	4620      	mov	r0, r4
 80032ea:	f810 2b01 	ldrb.w	r2, [r0], #1
 80032ee:	3a30      	subs	r2, #48	; 0x30
 80032f0:	2a09      	cmp	r2, #9
 80032f2:	d903      	bls.n	80032fc <_vfiprintf_r+0x1d0>
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d0c6      	beq.n	8003286 <_vfiprintf_r+0x15a>
 80032f8:	9105      	str	r1, [sp, #20]
 80032fa:	e7c4      	b.n	8003286 <_vfiprintf_r+0x15a>
 80032fc:	4604      	mov	r4, r0
 80032fe:	2301      	movs	r3, #1
 8003300:	fb0c 2101 	mla	r1, ip, r1, r2
 8003304:	e7f0      	b.n	80032e8 <_vfiprintf_r+0x1bc>
 8003306:	ab03      	add	r3, sp, #12
 8003308:	9300      	str	r3, [sp, #0]
 800330a:	462a      	mov	r2, r5
 800330c:	4630      	mov	r0, r6
 800330e:	4b13      	ldr	r3, [pc, #76]	; (800335c <_vfiprintf_r+0x230>)
 8003310:	a904      	add	r1, sp, #16
 8003312:	f3af 8000 	nop.w
 8003316:	4607      	mov	r7, r0
 8003318:	1c78      	adds	r0, r7, #1
 800331a:	d1d6      	bne.n	80032ca <_vfiprintf_r+0x19e>
 800331c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800331e:	07d9      	lsls	r1, r3, #31
 8003320:	d405      	bmi.n	800332e <_vfiprintf_r+0x202>
 8003322:	89ab      	ldrh	r3, [r5, #12]
 8003324:	059a      	lsls	r2, r3, #22
 8003326:	d402      	bmi.n	800332e <_vfiprintf_r+0x202>
 8003328:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800332a:	f7ff fde1 	bl	8002ef0 <__retarget_lock_release_recursive>
 800332e:	89ab      	ldrh	r3, [r5, #12]
 8003330:	065b      	lsls	r3, r3, #25
 8003332:	f53f af1d 	bmi.w	8003170 <_vfiprintf_r+0x44>
 8003336:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003338:	e71c      	b.n	8003174 <_vfiprintf_r+0x48>
 800333a:	ab03      	add	r3, sp, #12
 800333c:	9300      	str	r3, [sp, #0]
 800333e:	462a      	mov	r2, r5
 8003340:	4630      	mov	r0, r6
 8003342:	4b06      	ldr	r3, [pc, #24]	; (800335c <_vfiprintf_r+0x230>)
 8003344:	a904      	add	r1, sp, #16
 8003346:	f000 f87d 	bl	8003444 <_printf_i>
 800334a:	e7e4      	b.n	8003316 <_vfiprintf_r+0x1ea>
 800334c:	08003ab2 	.word	0x08003ab2
 8003350:	08003ab8 	.word	0x08003ab8
 8003354:	08003abc 	.word	0x08003abc
 8003358:	00000000 	.word	0x00000000
 800335c:	08003107 	.word	0x08003107

08003360 <_printf_common>:
 8003360:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003364:	4616      	mov	r6, r2
 8003366:	4699      	mov	r9, r3
 8003368:	688a      	ldr	r2, [r1, #8]
 800336a:	690b      	ldr	r3, [r1, #16]
 800336c:	4607      	mov	r7, r0
 800336e:	4293      	cmp	r3, r2
 8003370:	bfb8      	it	lt
 8003372:	4613      	movlt	r3, r2
 8003374:	6033      	str	r3, [r6, #0]
 8003376:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800337a:	460c      	mov	r4, r1
 800337c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003380:	b10a      	cbz	r2, 8003386 <_printf_common+0x26>
 8003382:	3301      	adds	r3, #1
 8003384:	6033      	str	r3, [r6, #0]
 8003386:	6823      	ldr	r3, [r4, #0]
 8003388:	0699      	lsls	r1, r3, #26
 800338a:	bf42      	ittt	mi
 800338c:	6833      	ldrmi	r3, [r6, #0]
 800338e:	3302      	addmi	r3, #2
 8003390:	6033      	strmi	r3, [r6, #0]
 8003392:	6825      	ldr	r5, [r4, #0]
 8003394:	f015 0506 	ands.w	r5, r5, #6
 8003398:	d106      	bne.n	80033a8 <_printf_common+0x48>
 800339a:	f104 0a19 	add.w	sl, r4, #25
 800339e:	68e3      	ldr	r3, [r4, #12]
 80033a0:	6832      	ldr	r2, [r6, #0]
 80033a2:	1a9b      	subs	r3, r3, r2
 80033a4:	42ab      	cmp	r3, r5
 80033a6:	dc2b      	bgt.n	8003400 <_printf_common+0xa0>
 80033a8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80033ac:	1e13      	subs	r3, r2, #0
 80033ae:	6822      	ldr	r2, [r4, #0]
 80033b0:	bf18      	it	ne
 80033b2:	2301      	movne	r3, #1
 80033b4:	0692      	lsls	r2, r2, #26
 80033b6:	d430      	bmi.n	800341a <_printf_common+0xba>
 80033b8:	4649      	mov	r1, r9
 80033ba:	4638      	mov	r0, r7
 80033bc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80033c0:	47c0      	blx	r8
 80033c2:	3001      	adds	r0, #1
 80033c4:	d023      	beq.n	800340e <_printf_common+0xae>
 80033c6:	6823      	ldr	r3, [r4, #0]
 80033c8:	6922      	ldr	r2, [r4, #16]
 80033ca:	f003 0306 	and.w	r3, r3, #6
 80033ce:	2b04      	cmp	r3, #4
 80033d0:	bf14      	ite	ne
 80033d2:	2500      	movne	r5, #0
 80033d4:	6833      	ldreq	r3, [r6, #0]
 80033d6:	f04f 0600 	mov.w	r6, #0
 80033da:	bf08      	it	eq
 80033dc:	68e5      	ldreq	r5, [r4, #12]
 80033de:	f104 041a 	add.w	r4, r4, #26
 80033e2:	bf08      	it	eq
 80033e4:	1aed      	subeq	r5, r5, r3
 80033e6:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80033ea:	bf08      	it	eq
 80033ec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80033f0:	4293      	cmp	r3, r2
 80033f2:	bfc4      	itt	gt
 80033f4:	1a9b      	subgt	r3, r3, r2
 80033f6:	18ed      	addgt	r5, r5, r3
 80033f8:	42b5      	cmp	r5, r6
 80033fa:	d11a      	bne.n	8003432 <_printf_common+0xd2>
 80033fc:	2000      	movs	r0, #0
 80033fe:	e008      	b.n	8003412 <_printf_common+0xb2>
 8003400:	2301      	movs	r3, #1
 8003402:	4652      	mov	r2, sl
 8003404:	4649      	mov	r1, r9
 8003406:	4638      	mov	r0, r7
 8003408:	47c0      	blx	r8
 800340a:	3001      	adds	r0, #1
 800340c:	d103      	bne.n	8003416 <_printf_common+0xb6>
 800340e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003412:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003416:	3501      	adds	r5, #1
 8003418:	e7c1      	b.n	800339e <_printf_common+0x3e>
 800341a:	2030      	movs	r0, #48	; 0x30
 800341c:	18e1      	adds	r1, r4, r3
 800341e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003422:	1c5a      	adds	r2, r3, #1
 8003424:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003428:	4422      	add	r2, r4
 800342a:	3302      	adds	r3, #2
 800342c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003430:	e7c2      	b.n	80033b8 <_printf_common+0x58>
 8003432:	2301      	movs	r3, #1
 8003434:	4622      	mov	r2, r4
 8003436:	4649      	mov	r1, r9
 8003438:	4638      	mov	r0, r7
 800343a:	47c0      	blx	r8
 800343c:	3001      	adds	r0, #1
 800343e:	d0e6      	beq.n	800340e <_printf_common+0xae>
 8003440:	3601      	adds	r6, #1
 8003442:	e7d9      	b.n	80033f8 <_printf_common+0x98>

08003444 <_printf_i>:
 8003444:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003448:	7e0f      	ldrb	r7, [r1, #24]
 800344a:	4691      	mov	r9, r2
 800344c:	2f78      	cmp	r7, #120	; 0x78
 800344e:	4680      	mov	r8, r0
 8003450:	460c      	mov	r4, r1
 8003452:	469a      	mov	sl, r3
 8003454:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003456:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800345a:	d807      	bhi.n	800346c <_printf_i+0x28>
 800345c:	2f62      	cmp	r7, #98	; 0x62
 800345e:	d80a      	bhi.n	8003476 <_printf_i+0x32>
 8003460:	2f00      	cmp	r7, #0
 8003462:	f000 80d5 	beq.w	8003610 <_printf_i+0x1cc>
 8003466:	2f58      	cmp	r7, #88	; 0x58
 8003468:	f000 80c1 	beq.w	80035ee <_printf_i+0x1aa>
 800346c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003470:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003474:	e03a      	b.n	80034ec <_printf_i+0xa8>
 8003476:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800347a:	2b15      	cmp	r3, #21
 800347c:	d8f6      	bhi.n	800346c <_printf_i+0x28>
 800347e:	a101      	add	r1, pc, #4	; (adr r1, 8003484 <_printf_i+0x40>)
 8003480:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003484:	080034dd 	.word	0x080034dd
 8003488:	080034f1 	.word	0x080034f1
 800348c:	0800346d 	.word	0x0800346d
 8003490:	0800346d 	.word	0x0800346d
 8003494:	0800346d 	.word	0x0800346d
 8003498:	0800346d 	.word	0x0800346d
 800349c:	080034f1 	.word	0x080034f1
 80034a0:	0800346d 	.word	0x0800346d
 80034a4:	0800346d 	.word	0x0800346d
 80034a8:	0800346d 	.word	0x0800346d
 80034ac:	0800346d 	.word	0x0800346d
 80034b0:	080035f7 	.word	0x080035f7
 80034b4:	0800351d 	.word	0x0800351d
 80034b8:	080035b1 	.word	0x080035b1
 80034bc:	0800346d 	.word	0x0800346d
 80034c0:	0800346d 	.word	0x0800346d
 80034c4:	08003619 	.word	0x08003619
 80034c8:	0800346d 	.word	0x0800346d
 80034cc:	0800351d 	.word	0x0800351d
 80034d0:	0800346d 	.word	0x0800346d
 80034d4:	0800346d 	.word	0x0800346d
 80034d8:	080035b9 	.word	0x080035b9
 80034dc:	682b      	ldr	r3, [r5, #0]
 80034de:	1d1a      	adds	r2, r3, #4
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	602a      	str	r2, [r5, #0]
 80034e4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80034e8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80034ec:	2301      	movs	r3, #1
 80034ee:	e0a0      	b.n	8003632 <_printf_i+0x1ee>
 80034f0:	6820      	ldr	r0, [r4, #0]
 80034f2:	682b      	ldr	r3, [r5, #0]
 80034f4:	0607      	lsls	r7, r0, #24
 80034f6:	f103 0104 	add.w	r1, r3, #4
 80034fa:	6029      	str	r1, [r5, #0]
 80034fc:	d501      	bpl.n	8003502 <_printf_i+0xbe>
 80034fe:	681e      	ldr	r6, [r3, #0]
 8003500:	e003      	b.n	800350a <_printf_i+0xc6>
 8003502:	0646      	lsls	r6, r0, #25
 8003504:	d5fb      	bpl.n	80034fe <_printf_i+0xba>
 8003506:	f9b3 6000 	ldrsh.w	r6, [r3]
 800350a:	2e00      	cmp	r6, #0
 800350c:	da03      	bge.n	8003516 <_printf_i+0xd2>
 800350e:	232d      	movs	r3, #45	; 0x2d
 8003510:	4276      	negs	r6, r6
 8003512:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003516:	230a      	movs	r3, #10
 8003518:	4859      	ldr	r0, [pc, #356]	; (8003680 <_printf_i+0x23c>)
 800351a:	e012      	b.n	8003542 <_printf_i+0xfe>
 800351c:	682b      	ldr	r3, [r5, #0]
 800351e:	6820      	ldr	r0, [r4, #0]
 8003520:	1d19      	adds	r1, r3, #4
 8003522:	6029      	str	r1, [r5, #0]
 8003524:	0605      	lsls	r5, r0, #24
 8003526:	d501      	bpl.n	800352c <_printf_i+0xe8>
 8003528:	681e      	ldr	r6, [r3, #0]
 800352a:	e002      	b.n	8003532 <_printf_i+0xee>
 800352c:	0641      	lsls	r1, r0, #25
 800352e:	d5fb      	bpl.n	8003528 <_printf_i+0xe4>
 8003530:	881e      	ldrh	r6, [r3, #0]
 8003532:	2f6f      	cmp	r7, #111	; 0x6f
 8003534:	bf0c      	ite	eq
 8003536:	2308      	moveq	r3, #8
 8003538:	230a      	movne	r3, #10
 800353a:	4851      	ldr	r0, [pc, #324]	; (8003680 <_printf_i+0x23c>)
 800353c:	2100      	movs	r1, #0
 800353e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003542:	6865      	ldr	r5, [r4, #4]
 8003544:	2d00      	cmp	r5, #0
 8003546:	bfa8      	it	ge
 8003548:	6821      	ldrge	r1, [r4, #0]
 800354a:	60a5      	str	r5, [r4, #8]
 800354c:	bfa4      	itt	ge
 800354e:	f021 0104 	bicge.w	r1, r1, #4
 8003552:	6021      	strge	r1, [r4, #0]
 8003554:	b90e      	cbnz	r6, 800355a <_printf_i+0x116>
 8003556:	2d00      	cmp	r5, #0
 8003558:	d04b      	beq.n	80035f2 <_printf_i+0x1ae>
 800355a:	4615      	mov	r5, r2
 800355c:	fbb6 f1f3 	udiv	r1, r6, r3
 8003560:	fb03 6711 	mls	r7, r3, r1, r6
 8003564:	5dc7      	ldrb	r7, [r0, r7]
 8003566:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800356a:	4637      	mov	r7, r6
 800356c:	42bb      	cmp	r3, r7
 800356e:	460e      	mov	r6, r1
 8003570:	d9f4      	bls.n	800355c <_printf_i+0x118>
 8003572:	2b08      	cmp	r3, #8
 8003574:	d10b      	bne.n	800358e <_printf_i+0x14a>
 8003576:	6823      	ldr	r3, [r4, #0]
 8003578:	07de      	lsls	r6, r3, #31
 800357a:	d508      	bpl.n	800358e <_printf_i+0x14a>
 800357c:	6923      	ldr	r3, [r4, #16]
 800357e:	6861      	ldr	r1, [r4, #4]
 8003580:	4299      	cmp	r1, r3
 8003582:	bfde      	ittt	le
 8003584:	2330      	movle	r3, #48	; 0x30
 8003586:	f805 3c01 	strble.w	r3, [r5, #-1]
 800358a:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800358e:	1b52      	subs	r2, r2, r5
 8003590:	6122      	str	r2, [r4, #16]
 8003592:	464b      	mov	r3, r9
 8003594:	4621      	mov	r1, r4
 8003596:	4640      	mov	r0, r8
 8003598:	f8cd a000 	str.w	sl, [sp]
 800359c:	aa03      	add	r2, sp, #12
 800359e:	f7ff fedf 	bl	8003360 <_printf_common>
 80035a2:	3001      	adds	r0, #1
 80035a4:	d14a      	bne.n	800363c <_printf_i+0x1f8>
 80035a6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80035aa:	b004      	add	sp, #16
 80035ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80035b0:	6823      	ldr	r3, [r4, #0]
 80035b2:	f043 0320 	orr.w	r3, r3, #32
 80035b6:	6023      	str	r3, [r4, #0]
 80035b8:	2778      	movs	r7, #120	; 0x78
 80035ba:	4832      	ldr	r0, [pc, #200]	; (8003684 <_printf_i+0x240>)
 80035bc:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80035c0:	6823      	ldr	r3, [r4, #0]
 80035c2:	6829      	ldr	r1, [r5, #0]
 80035c4:	061f      	lsls	r7, r3, #24
 80035c6:	f851 6b04 	ldr.w	r6, [r1], #4
 80035ca:	d402      	bmi.n	80035d2 <_printf_i+0x18e>
 80035cc:	065f      	lsls	r7, r3, #25
 80035ce:	bf48      	it	mi
 80035d0:	b2b6      	uxthmi	r6, r6
 80035d2:	07df      	lsls	r7, r3, #31
 80035d4:	bf48      	it	mi
 80035d6:	f043 0320 	orrmi.w	r3, r3, #32
 80035da:	6029      	str	r1, [r5, #0]
 80035dc:	bf48      	it	mi
 80035de:	6023      	strmi	r3, [r4, #0]
 80035e0:	b91e      	cbnz	r6, 80035ea <_printf_i+0x1a6>
 80035e2:	6823      	ldr	r3, [r4, #0]
 80035e4:	f023 0320 	bic.w	r3, r3, #32
 80035e8:	6023      	str	r3, [r4, #0]
 80035ea:	2310      	movs	r3, #16
 80035ec:	e7a6      	b.n	800353c <_printf_i+0xf8>
 80035ee:	4824      	ldr	r0, [pc, #144]	; (8003680 <_printf_i+0x23c>)
 80035f0:	e7e4      	b.n	80035bc <_printf_i+0x178>
 80035f2:	4615      	mov	r5, r2
 80035f4:	e7bd      	b.n	8003572 <_printf_i+0x12e>
 80035f6:	682b      	ldr	r3, [r5, #0]
 80035f8:	6826      	ldr	r6, [r4, #0]
 80035fa:	1d18      	adds	r0, r3, #4
 80035fc:	6961      	ldr	r1, [r4, #20]
 80035fe:	6028      	str	r0, [r5, #0]
 8003600:	0635      	lsls	r5, r6, #24
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	d501      	bpl.n	800360a <_printf_i+0x1c6>
 8003606:	6019      	str	r1, [r3, #0]
 8003608:	e002      	b.n	8003610 <_printf_i+0x1cc>
 800360a:	0670      	lsls	r0, r6, #25
 800360c:	d5fb      	bpl.n	8003606 <_printf_i+0x1c2>
 800360e:	8019      	strh	r1, [r3, #0]
 8003610:	2300      	movs	r3, #0
 8003612:	4615      	mov	r5, r2
 8003614:	6123      	str	r3, [r4, #16]
 8003616:	e7bc      	b.n	8003592 <_printf_i+0x14e>
 8003618:	682b      	ldr	r3, [r5, #0]
 800361a:	2100      	movs	r1, #0
 800361c:	1d1a      	adds	r2, r3, #4
 800361e:	602a      	str	r2, [r5, #0]
 8003620:	681d      	ldr	r5, [r3, #0]
 8003622:	6862      	ldr	r2, [r4, #4]
 8003624:	4628      	mov	r0, r5
 8003626:	f000 f97f 	bl	8003928 <memchr>
 800362a:	b108      	cbz	r0, 8003630 <_printf_i+0x1ec>
 800362c:	1b40      	subs	r0, r0, r5
 800362e:	6060      	str	r0, [r4, #4]
 8003630:	6863      	ldr	r3, [r4, #4]
 8003632:	6123      	str	r3, [r4, #16]
 8003634:	2300      	movs	r3, #0
 8003636:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800363a:	e7aa      	b.n	8003592 <_printf_i+0x14e>
 800363c:	462a      	mov	r2, r5
 800363e:	4649      	mov	r1, r9
 8003640:	4640      	mov	r0, r8
 8003642:	6923      	ldr	r3, [r4, #16]
 8003644:	47d0      	blx	sl
 8003646:	3001      	adds	r0, #1
 8003648:	d0ad      	beq.n	80035a6 <_printf_i+0x162>
 800364a:	6823      	ldr	r3, [r4, #0]
 800364c:	079b      	lsls	r3, r3, #30
 800364e:	d413      	bmi.n	8003678 <_printf_i+0x234>
 8003650:	68e0      	ldr	r0, [r4, #12]
 8003652:	9b03      	ldr	r3, [sp, #12]
 8003654:	4298      	cmp	r0, r3
 8003656:	bfb8      	it	lt
 8003658:	4618      	movlt	r0, r3
 800365a:	e7a6      	b.n	80035aa <_printf_i+0x166>
 800365c:	2301      	movs	r3, #1
 800365e:	4632      	mov	r2, r6
 8003660:	4649      	mov	r1, r9
 8003662:	4640      	mov	r0, r8
 8003664:	47d0      	blx	sl
 8003666:	3001      	adds	r0, #1
 8003668:	d09d      	beq.n	80035a6 <_printf_i+0x162>
 800366a:	3501      	adds	r5, #1
 800366c:	68e3      	ldr	r3, [r4, #12]
 800366e:	9903      	ldr	r1, [sp, #12]
 8003670:	1a5b      	subs	r3, r3, r1
 8003672:	42ab      	cmp	r3, r5
 8003674:	dcf2      	bgt.n	800365c <_printf_i+0x218>
 8003676:	e7eb      	b.n	8003650 <_printf_i+0x20c>
 8003678:	2500      	movs	r5, #0
 800367a:	f104 0619 	add.w	r6, r4, #25
 800367e:	e7f5      	b.n	800366c <_printf_i+0x228>
 8003680:	08003ac3 	.word	0x08003ac3
 8003684:	08003ad4 	.word	0x08003ad4

08003688 <__sflush_r>:
 8003688:	898a      	ldrh	r2, [r1, #12]
 800368a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800368c:	4605      	mov	r5, r0
 800368e:	0710      	lsls	r0, r2, #28
 8003690:	460c      	mov	r4, r1
 8003692:	d457      	bmi.n	8003744 <__sflush_r+0xbc>
 8003694:	684b      	ldr	r3, [r1, #4]
 8003696:	2b00      	cmp	r3, #0
 8003698:	dc04      	bgt.n	80036a4 <__sflush_r+0x1c>
 800369a:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800369c:	2b00      	cmp	r3, #0
 800369e:	dc01      	bgt.n	80036a4 <__sflush_r+0x1c>
 80036a0:	2000      	movs	r0, #0
 80036a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80036a4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80036a6:	2e00      	cmp	r6, #0
 80036a8:	d0fa      	beq.n	80036a0 <__sflush_r+0x18>
 80036aa:	2300      	movs	r3, #0
 80036ac:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80036b0:	682f      	ldr	r7, [r5, #0]
 80036b2:	6a21      	ldr	r1, [r4, #32]
 80036b4:	602b      	str	r3, [r5, #0]
 80036b6:	d032      	beq.n	800371e <__sflush_r+0x96>
 80036b8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80036ba:	89a3      	ldrh	r3, [r4, #12]
 80036bc:	075a      	lsls	r2, r3, #29
 80036be:	d505      	bpl.n	80036cc <__sflush_r+0x44>
 80036c0:	6863      	ldr	r3, [r4, #4]
 80036c2:	1ac0      	subs	r0, r0, r3
 80036c4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80036c6:	b10b      	cbz	r3, 80036cc <__sflush_r+0x44>
 80036c8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80036ca:	1ac0      	subs	r0, r0, r3
 80036cc:	2300      	movs	r3, #0
 80036ce:	4602      	mov	r2, r0
 80036d0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80036d2:	4628      	mov	r0, r5
 80036d4:	6a21      	ldr	r1, [r4, #32]
 80036d6:	47b0      	blx	r6
 80036d8:	1c43      	adds	r3, r0, #1
 80036da:	89a3      	ldrh	r3, [r4, #12]
 80036dc:	d106      	bne.n	80036ec <__sflush_r+0x64>
 80036de:	6829      	ldr	r1, [r5, #0]
 80036e0:	291d      	cmp	r1, #29
 80036e2:	d82b      	bhi.n	800373c <__sflush_r+0xb4>
 80036e4:	4a28      	ldr	r2, [pc, #160]	; (8003788 <__sflush_r+0x100>)
 80036e6:	410a      	asrs	r2, r1
 80036e8:	07d6      	lsls	r6, r2, #31
 80036ea:	d427      	bmi.n	800373c <__sflush_r+0xb4>
 80036ec:	2200      	movs	r2, #0
 80036ee:	6062      	str	r2, [r4, #4]
 80036f0:	6922      	ldr	r2, [r4, #16]
 80036f2:	04d9      	lsls	r1, r3, #19
 80036f4:	6022      	str	r2, [r4, #0]
 80036f6:	d504      	bpl.n	8003702 <__sflush_r+0x7a>
 80036f8:	1c42      	adds	r2, r0, #1
 80036fa:	d101      	bne.n	8003700 <__sflush_r+0x78>
 80036fc:	682b      	ldr	r3, [r5, #0]
 80036fe:	b903      	cbnz	r3, 8003702 <__sflush_r+0x7a>
 8003700:	6560      	str	r0, [r4, #84]	; 0x54
 8003702:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003704:	602f      	str	r7, [r5, #0]
 8003706:	2900      	cmp	r1, #0
 8003708:	d0ca      	beq.n	80036a0 <__sflush_r+0x18>
 800370a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800370e:	4299      	cmp	r1, r3
 8003710:	d002      	beq.n	8003718 <__sflush_r+0x90>
 8003712:	4628      	mov	r0, r5
 8003714:	f7ff fbee 	bl	8002ef4 <_free_r>
 8003718:	2000      	movs	r0, #0
 800371a:	6360      	str	r0, [r4, #52]	; 0x34
 800371c:	e7c1      	b.n	80036a2 <__sflush_r+0x1a>
 800371e:	2301      	movs	r3, #1
 8003720:	4628      	mov	r0, r5
 8003722:	47b0      	blx	r6
 8003724:	1c41      	adds	r1, r0, #1
 8003726:	d1c8      	bne.n	80036ba <__sflush_r+0x32>
 8003728:	682b      	ldr	r3, [r5, #0]
 800372a:	2b00      	cmp	r3, #0
 800372c:	d0c5      	beq.n	80036ba <__sflush_r+0x32>
 800372e:	2b1d      	cmp	r3, #29
 8003730:	d001      	beq.n	8003736 <__sflush_r+0xae>
 8003732:	2b16      	cmp	r3, #22
 8003734:	d101      	bne.n	800373a <__sflush_r+0xb2>
 8003736:	602f      	str	r7, [r5, #0]
 8003738:	e7b2      	b.n	80036a0 <__sflush_r+0x18>
 800373a:	89a3      	ldrh	r3, [r4, #12]
 800373c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003740:	81a3      	strh	r3, [r4, #12]
 8003742:	e7ae      	b.n	80036a2 <__sflush_r+0x1a>
 8003744:	690f      	ldr	r7, [r1, #16]
 8003746:	2f00      	cmp	r7, #0
 8003748:	d0aa      	beq.n	80036a0 <__sflush_r+0x18>
 800374a:	0793      	lsls	r3, r2, #30
 800374c:	bf18      	it	ne
 800374e:	2300      	movne	r3, #0
 8003750:	680e      	ldr	r6, [r1, #0]
 8003752:	bf08      	it	eq
 8003754:	694b      	ldreq	r3, [r1, #20]
 8003756:	1bf6      	subs	r6, r6, r7
 8003758:	600f      	str	r7, [r1, #0]
 800375a:	608b      	str	r3, [r1, #8]
 800375c:	2e00      	cmp	r6, #0
 800375e:	dd9f      	ble.n	80036a0 <__sflush_r+0x18>
 8003760:	4633      	mov	r3, r6
 8003762:	463a      	mov	r2, r7
 8003764:	4628      	mov	r0, r5
 8003766:	6a21      	ldr	r1, [r4, #32]
 8003768:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800376c:	47e0      	blx	ip
 800376e:	2800      	cmp	r0, #0
 8003770:	dc06      	bgt.n	8003780 <__sflush_r+0xf8>
 8003772:	89a3      	ldrh	r3, [r4, #12]
 8003774:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003778:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800377c:	81a3      	strh	r3, [r4, #12]
 800377e:	e790      	b.n	80036a2 <__sflush_r+0x1a>
 8003780:	4407      	add	r7, r0
 8003782:	1a36      	subs	r6, r6, r0
 8003784:	e7ea      	b.n	800375c <__sflush_r+0xd4>
 8003786:	bf00      	nop
 8003788:	dfbffffe 	.word	0xdfbffffe

0800378c <_fflush_r>:
 800378c:	b538      	push	{r3, r4, r5, lr}
 800378e:	690b      	ldr	r3, [r1, #16]
 8003790:	4605      	mov	r5, r0
 8003792:	460c      	mov	r4, r1
 8003794:	b913      	cbnz	r3, 800379c <_fflush_r+0x10>
 8003796:	2500      	movs	r5, #0
 8003798:	4628      	mov	r0, r5
 800379a:	bd38      	pop	{r3, r4, r5, pc}
 800379c:	b118      	cbz	r0, 80037a6 <_fflush_r+0x1a>
 800379e:	6a03      	ldr	r3, [r0, #32]
 80037a0:	b90b      	cbnz	r3, 80037a6 <_fflush_r+0x1a>
 80037a2:	f7ff fa9f 	bl	8002ce4 <__sinit>
 80037a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d0f3      	beq.n	8003796 <_fflush_r+0xa>
 80037ae:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80037b0:	07d0      	lsls	r0, r2, #31
 80037b2:	d404      	bmi.n	80037be <_fflush_r+0x32>
 80037b4:	0599      	lsls	r1, r3, #22
 80037b6:	d402      	bmi.n	80037be <_fflush_r+0x32>
 80037b8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80037ba:	f7ff fb98 	bl	8002eee <__retarget_lock_acquire_recursive>
 80037be:	4628      	mov	r0, r5
 80037c0:	4621      	mov	r1, r4
 80037c2:	f7ff ff61 	bl	8003688 <__sflush_r>
 80037c6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80037c8:	4605      	mov	r5, r0
 80037ca:	07da      	lsls	r2, r3, #31
 80037cc:	d4e4      	bmi.n	8003798 <_fflush_r+0xc>
 80037ce:	89a3      	ldrh	r3, [r4, #12]
 80037d0:	059b      	lsls	r3, r3, #22
 80037d2:	d4e1      	bmi.n	8003798 <_fflush_r+0xc>
 80037d4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80037d6:	f7ff fb8b 	bl	8002ef0 <__retarget_lock_release_recursive>
 80037da:	e7dd      	b.n	8003798 <_fflush_r+0xc>

080037dc <__swbuf_r>:
 80037dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037de:	460e      	mov	r6, r1
 80037e0:	4614      	mov	r4, r2
 80037e2:	4605      	mov	r5, r0
 80037e4:	b118      	cbz	r0, 80037ee <__swbuf_r+0x12>
 80037e6:	6a03      	ldr	r3, [r0, #32]
 80037e8:	b90b      	cbnz	r3, 80037ee <__swbuf_r+0x12>
 80037ea:	f7ff fa7b 	bl	8002ce4 <__sinit>
 80037ee:	69a3      	ldr	r3, [r4, #24]
 80037f0:	60a3      	str	r3, [r4, #8]
 80037f2:	89a3      	ldrh	r3, [r4, #12]
 80037f4:	071a      	lsls	r2, r3, #28
 80037f6:	d525      	bpl.n	8003844 <__swbuf_r+0x68>
 80037f8:	6923      	ldr	r3, [r4, #16]
 80037fa:	b31b      	cbz	r3, 8003844 <__swbuf_r+0x68>
 80037fc:	6823      	ldr	r3, [r4, #0]
 80037fe:	6922      	ldr	r2, [r4, #16]
 8003800:	b2f6      	uxtb	r6, r6
 8003802:	1a98      	subs	r0, r3, r2
 8003804:	6963      	ldr	r3, [r4, #20]
 8003806:	4637      	mov	r7, r6
 8003808:	4283      	cmp	r3, r0
 800380a:	dc04      	bgt.n	8003816 <__swbuf_r+0x3a>
 800380c:	4621      	mov	r1, r4
 800380e:	4628      	mov	r0, r5
 8003810:	f7ff ffbc 	bl	800378c <_fflush_r>
 8003814:	b9e0      	cbnz	r0, 8003850 <__swbuf_r+0x74>
 8003816:	68a3      	ldr	r3, [r4, #8]
 8003818:	3b01      	subs	r3, #1
 800381a:	60a3      	str	r3, [r4, #8]
 800381c:	6823      	ldr	r3, [r4, #0]
 800381e:	1c5a      	adds	r2, r3, #1
 8003820:	6022      	str	r2, [r4, #0]
 8003822:	701e      	strb	r6, [r3, #0]
 8003824:	6962      	ldr	r2, [r4, #20]
 8003826:	1c43      	adds	r3, r0, #1
 8003828:	429a      	cmp	r2, r3
 800382a:	d004      	beq.n	8003836 <__swbuf_r+0x5a>
 800382c:	89a3      	ldrh	r3, [r4, #12]
 800382e:	07db      	lsls	r3, r3, #31
 8003830:	d506      	bpl.n	8003840 <__swbuf_r+0x64>
 8003832:	2e0a      	cmp	r6, #10
 8003834:	d104      	bne.n	8003840 <__swbuf_r+0x64>
 8003836:	4621      	mov	r1, r4
 8003838:	4628      	mov	r0, r5
 800383a:	f7ff ffa7 	bl	800378c <_fflush_r>
 800383e:	b938      	cbnz	r0, 8003850 <__swbuf_r+0x74>
 8003840:	4638      	mov	r0, r7
 8003842:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003844:	4621      	mov	r1, r4
 8003846:	4628      	mov	r0, r5
 8003848:	f000 f806 	bl	8003858 <__swsetup_r>
 800384c:	2800      	cmp	r0, #0
 800384e:	d0d5      	beq.n	80037fc <__swbuf_r+0x20>
 8003850:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8003854:	e7f4      	b.n	8003840 <__swbuf_r+0x64>
	...

08003858 <__swsetup_r>:
 8003858:	b538      	push	{r3, r4, r5, lr}
 800385a:	4b2a      	ldr	r3, [pc, #168]	; (8003904 <__swsetup_r+0xac>)
 800385c:	4605      	mov	r5, r0
 800385e:	6818      	ldr	r0, [r3, #0]
 8003860:	460c      	mov	r4, r1
 8003862:	b118      	cbz	r0, 800386c <__swsetup_r+0x14>
 8003864:	6a03      	ldr	r3, [r0, #32]
 8003866:	b90b      	cbnz	r3, 800386c <__swsetup_r+0x14>
 8003868:	f7ff fa3c 	bl	8002ce4 <__sinit>
 800386c:	89a3      	ldrh	r3, [r4, #12]
 800386e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003872:	0718      	lsls	r0, r3, #28
 8003874:	d422      	bmi.n	80038bc <__swsetup_r+0x64>
 8003876:	06d9      	lsls	r1, r3, #27
 8003878:	d407      	bmi.n	800388a <__swsetup_r+0x32>
 800387a:	2309      	movs	r3, #9
 800387c:	602b      	str	r3, [r5, #0]
 800387e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8003882:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003886:	81a3      	strh	r3, [r4, #12]
 8003888:	e034      	b.n	80038f4 <__swsetup_r+0x9c>
 800388a:	0758      	lsls	r0, r3, #29
 800388c:	d512      	bpl.n	80038b4 <__swsetup_r+0x5c>
 800388e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003890:	b141      	cbz	r1, 80038a4 <__swsetup_r+0x4c>
 8003892:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003896:	4299      	cmp	r1, r3
 8003898:	d002      	beq.n	80038a0 <__swsetup_r+0x48>
 800389a:	4628      	mov	r0, r5
 800389c:	f7ff fb2a 	bl	8002ef4 <_free_r>
 80038a0:	2300      	movs	r3, #0
 80038a2:	6363      	str	r3, [r4, #52]	; 0x34
 80038a4:	89a3      	ldrh	r3, [r4, #12]
 80038a6:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80038aa:	81a3      	strh	r3, [r4, #12]
 80038ac:	2300      	movs	r3, #0
 80038ae:	6063      	str	r3, [r4, #4]
 80038b0:	6923      	ldr	r3, [r4, #16]
 80038b2:	6023      	str	r3, [r4, #0]
 80038b4:	89a3      	ldrh	r3, [r4, #12]
 80038b6:	f043 0308 	orr.w	r3, r3, #8
 80038ba:	81a3      	strh	r3, [r4, #12]
 80038bc:	6923      	ldr	r3, [r4, #16]
 80038be:	b94b      	cbnz	r3, 80038d4 <__swsetup_r+0x7c>
 80038c0:	89a3      	ldrh	r3, [r4, #12]
 80038c2:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80038c6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80038ca:	d003      	beq.n	80038d4 <__swsetup_r+0x7c>
 80038cc:	4621      	mov	r1, r4
 80038ce:	4628      	mov	r0, r5
 80038d0:	f000 f85d 	bl	800398e <__smakebuf_r>
 80038d4:	89a0      	ldrh	r0, [r4, #12]
 80038d6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80038da:	f010 0301 	ands.w	r3, r0, #1
 80038de:	d00a      	beq.n	80038f6 <__swsetup_r+0x9e>
 80038e0:	2300      	movs	r3, #0
 80038e2:	60a3      	str	r3, [r4, #8]
 80038e4:	6963      	ldr	r3, [r4, #20]
 80038e6:	425b      	negs	r3, r3
 80038e8:	61a3      	str	r3, [r4, #24]
 80038ea:	6923      	ldr	r3, [r4, #16]
 80038ec:	b943      	cbnz	r3, 8003900 <__swsetup_r+0xa8>
 80038ee:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80038f2:	d1c4      	bne.n	800387e <__swsetup_r+0x26>
 80038f4:	bd38      	pop	{r3, r4, r5, pc}
 80038f6:	0781      	lsls	r1, r0, #30
 80038f8:	bf58      	it	pl
 80038fa:	6963      	ldrpl	r3, [r4, #20]
 80038fc:	60a3      	str	r3, [r4, #8]
 80038fe:	e7f4      	b.n	80038ea <__swsetup_r+0x92>
 8003900:	2000      	movs	r0, #0
 8003902:	e7f7      	b.n	80038f4 <__swsetup_r+0x9c>
 8003904:	20000064 	.word	0x20000064

08003908 <_sbrk_r>:
 8003908:	b538      	push	{r3, r4, r5, lr}
 800390a:	2300      	movs	r3, #0
 800390c:	4d05      	ldr	r5, [pc, #20]	; (8003924 <_sbrk_r+0x1c>)
 800390e:	4604      	mov	r4, r0
 8003910:	4608      	mov	r0, r1
 8003912:	602b      	str	r3, [r5, #0]
 8003914:	f7fc fed0 	bl	80006b8 <_sbrk>
 8003918:	1c43      	adds	r3, r0, #1
 800391a:	d102      	bne.n	8003922 <_sbrk_r+0x1a>
 800391c:	682b      	ldr	r3, [r5, #0]
 800391e:	b103      	cbz	r3, 8003922 <_sbrk_r+0x1a>
 8003920:	6023      	str	r3, [r4, #0]
 8003922:	bd38      	pop	{r3, r4, r5, pc}
 8003924:	20000240 	.word	0x20000240

08003928 <memchr>:
 8003928:	4603      	mov	r3, r0
 800392a:	b510      	push	{r4, lr}
 800392c:	b2c9      	uxtb	r1, r1
 800392e:	4402      	add	r2, r0
 8003930:	4293      	cmp	r3, r2
 8003932:	4618      	mov	r0, r3
 8003934:	d101      	bne.n	800393a <memchr+0x12>
 8003936:	2000      	movs	r0, #0
 8003938:	e003      	b.n	8003942 <memchr+0x1a>
 800393a:	7804      	ldrb	r4, [r0, #0]
 800393c:	3301      	adds	r3, #1
 800393e:	428c      	cmp	r4, r1
 8003940:	d1f6      	bne.n	8003930 <memchr+0x8>
 8003942:	bd10      	pop	{r4, pc}

08003944 <__swhatbuf_r>:
 8003944:	b570      	push	{r4, r5, r6, lr}
 8003946:	460c      	mov	r4, r1
 8003948:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800394c:	4615      	mov	r5, r2
 800394e:	2900      	cmp	r1, #0
 8003950:	461e      	mov	r6, r3
 8003952:	b096      	sub	sp, #88	; 0x58
 8003954:	da0c      	bge.n	8003970 <__swhatbuf_r+0x2c>
 8003956:	89a3      	ldrh	r3, [r4, #12]
 8003958:	2100      	movs	r1, #0
 800395a:	f013 0f80 	tst.w	r3, #128	; 0x80
 800395e:	bf0c      	ite	eq
 8003960:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8003964:	2340      	movne	r3, #64	; 0x40
 8003966:	2000      	movs	r0, #0
 8003968:	6031      	str	r1, [r6, #0]
 800396a:	602b      	str	r3, [r5, #0]
 800396c:	b016      	add	sp, #88	; 0x58
 800396e:	bd70      	pop	{r4, r5, r6, pc}
 8003970:	466a      	mov	r2, sp
 8003972:	f000 f849 	bl	8003a08 <_fstat_r>
 8003976:	2800      	cmp	r0, #0
 8003978:	dbed      	blt.n	8003956 <__swhatbuf_r+0x12>
 800397a:	9901      	ldr	r1, [sp, #4]
 800397c:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8003980:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8003984:	4259      	negs	r1, r3
 8003986:	4159      	adcs	r1, r3
 8003988:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800398c:	e7eb      	b.n	8003966 <__swhatbuf_r+0x22>

0800398e <__smakebuf_r>:
 800398e:	898b      	ldrh	r3, [r1, #12]
 8003990:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003992:	079d      	lsls	r5, r3, #30
 8003994:	4606      	mov	r6, r0
 8003996:	460c      	mov	r4, r1
 8003998:	d507      	bpl.n	80039aa <__smakebuf_r+0x1c>
 800399a:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800399e:	6023      	str	r3, [r4, #0]
 80039a0:	6123      	str	r3, [r4, #16]
 80039a2:	2301      	movs	r3, #1
 80039a4:	6163      	str	r3, [r4, #20]
 80039a6:	b002      	add	sp, #8
 80039a8:	bd70      	pop	{r4, r5, r6, pc}
 80039aa:	466a      	mov	r2, sp
 80039ac:	ab01      	add	r3, sp, #4
 80039ae:	f7ff ffc9 	bl	8003944 <__swhatbuf_r>
 80039b2:	9900      	ldr	r1, [sp, #0]
 80039b4:	4605      	mov	r5, r0
 80039b6:	4630      	mov	r0, r6
 80039b8:	f7ff fb04 	bl	8002fc4 <_malloc_r>
 80039bc:	b948      	cbnz	r0, 80039d2 <__smakebuf_r+0x44>
 80039be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80039c2:	059a      	lsls	r2, r3, #22
 80039c4:	d4ef      	bmi.n	80039a6 <__smakebuf_r+0x18>
 80039c6:	f023 0303 	bic.w	r3, r3, #3
 80039ca:	f043 0302 	orr.w	r3, r3, #2
 80039ce:	81a3      	strh	r3, [r4, #12]
 80039d0:	e7e3      	b.n	800399a <__smakebuf_r+0xc>
 80039d2:	89a3      	ldrh	r3, [r4, #12]
 80039d4:	6020      	str	r0, [r4, #0]
 80039d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80039da:	81a3      	strh	r3, [r4, #12]
 80039dc:	9b00      	ldr	r3, [sp, #0]
 80039de:	6120      	str	r0, [r4, #16]
 80039e0:	6163      	str	r3, [r4, #20]
 80039e2:	9b01      	ldr	r3, [sp, #4]
 80039e4:	b15b      	cbz	r3, 80039fe <__smakebuf_r+0x70>
 80039e6:	4630      	mov	r0, r6
 80039e8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80039ec:	f000 f81e 	bl	8003a2c <_isatty_r>
 80039f0:	b128      	cbz	r0, 80039fe <__smakebuf_r+0x70>
 80039f2:	89a3      	ldrh	r3, [r4, #12]
 80039f4:	f023 0303 	bic.w	r3, r3, #3
 80039f8:	f043 0301 	orr.w	r3, r3, #1
 80039fc:	81a3      	strh	r3, [r4, #12]
 80039fe:	89a3      	ldrh	r3, [r4, #12]
 8003a00:	431d      	orrs	r5, r3
 8003a02:	81a5      	strh	r5, [r4, #12]
 8003a04:	e7cf      	b.n	80039a6 <__smakebuf_r+0x18>
	...

08003a08 <_fstat_r>:
 8003a08:	b538      	push	{r3, r4, r5, lr}
 8003a0a:	2300      	movs	r3, #0
 8003a0c:	4d06      	ldr	r5, [pc, #24]	; (8003a28 <_fstat_r+0x20>)
 8003a0e:	4604      	mov	r4, r0
 8003a10:	4608      	mov	r0, r1
 8003a12:	4611      	mov	r1, r2
 8003a14:	602b      	str	r3, [r5, #0]
 8003a16:	f7fc fe2a 	bl	800066e <_fstat>
 8003a1a:	1c43      	adds	r3, r0, #1
 8003a1c:	d102      	bne.n	8003a24 <_fstat_r+0x1c>
 8003a1e:	682b      	ldr	r3, [r5, #0]
 8003a20:	b103      	cbz	r3, 8003a24 <_fstat_r+0x1c>
 8003a22:	6023      	str	r3, [r4, #0]
 8003a24:	bd38      	pop	{r3, r4, r5, pc}
 8003a26:	bf00      	nop
 8003a28:	20000240 	.word	0x20000240

08003a2c <_isatty_r>:
 8003a2c:	b538      	push	{r3, r4, r5, lr}
 8003a2e:	2300      	movs	r3, #0
 8003a30:	4d05      	ldr	r5, [pc, #20]	; (8003a48 <_isatty_r+0x1c>)
 8003a32:	4604      	mov	r4, r0
 8003a34:	4608      	mov	r0, r1
 8003a36:	602b      	str	r3, [r5, #0]
 8003a38:	f7fc fe28 	bl	800068c <_isatty>
 8003a3c:	1c43      	adds	r3, r0, #1
 8003a3e:	d102      	bne.n	8003a46 <_isatty_r+0x1a>
 8003a40:	682b      	ldr	r3, [r5, #0]
 8003a42:	b103      	cbz	r3, 8003a46 <_isatty_r+0x1a>
 8003a44:	6023      	str	r3, [r4, #0]
 8003a46:	bd38      	pop	{r3, r4, r5, pc}
 8003a48:	20000240 	.word	0x20000240

08003a4c <_init>:
 8003a4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a4e:	bf00      	nop
 8003a50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a52:	bc08      	pop	{r3}
 8003a54:	469e      	mov	lr, r3
 8003a56:	4770      	bx	lr

08003a58 <_fini>:
 8003a58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a5a:	bf00      	nop
 8003a5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a5e:	bc08      	pop	{r3}
 8003a60:	469e      	mov	lr, r3
 8003a62:	4770      	bx	lr
